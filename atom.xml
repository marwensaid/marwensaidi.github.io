<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tug's Blog]]></title>
  <link href="http://tgrall.github.io/atom.xml" rel="self"/>
  <link href="http://tgrall.github.io/"/>
  <updated>2015-12-10T11:43:18+01:00</updated>
  <id>http://tgrall.github.io/</id>
  <author>
    <name><![CDATA[Tug Grall]]></name>
    <email><![CDATA[tugdual@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Using Apache Drill REST API to Build ASCII Dashboard With Node]]></title>
    <link href="http://tgrall.github.io/blog/2015/12/10/using-apache-drill-rest-api-to-build-ascii-dashboard-with-node/"/>
    <updated>2015-12-10T11:30:44+01:00</updated>
    <id>http://tgrall.github.io/blog/2015/12/10/using-apache-drill-rest-api-to-build-ascii-dashboard-with-node</id>
    <content type="html"><![CDATA[<p><a href="http://drill.apache.org">Apache Drill</a> has a hidden gem: an easy to use REST interface. This API can be used to Query, Profile and Configure Drill engine.</p>

<p>In this blog post I will explain how to use Drill REST API to create ascii dashboards using <a href="https://www.npmjs.com/package/blessed-contrib">Blessed Contrib</a>.</p>

<p>The ASCII Dashboard looks like</p>

<p><img class="center" src="http://tgrall.github.io/images/posts/drill_dashboard/dashboard_demo.gif" title="Dashboard" ></p>

<!-- more -->


<h4>Prerequisites</h4>

<ul>
<li>Node.js</li>
<li>Apache Drill 1.2</li>
<li>For this post, you will use the SFO Passengers CSV file available <a href="http://www.flysfo.com/media/facts-statistics/air-traffic-statistics">here</a>.

<ul>
<li>Download this locally, unzip the files and put the CSV into a folder that will be access uzing the following path in Drill : <code>dfs.data.`/airport/*.csv`</code></li>
</ul>
</li>
</ul>


<p><em>Note: I am still using Apache 1.2 to allow this example to be executed in context of a MapR cluster.</em></p>

<h2>The Query and View</h2>

<p>In Drill 1.2, CSV headers are not automatically parsed. (This is one of the new features of 1.3: look for <code>extractHeader</code> in the <a href="https://drill.apache.org/docs/text-files-csv-tsv-psv/">documentation</a>).</p>

<p>For simplicity, remove the first line of the CSV.</p>

<p>The basic query will look like:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>SELECT
</span><span class='line'>CAST(SUBSTR(columns[0],1,4) AS INT)  `YEAR`,
</span><span class='line'>CAST(SUBSTR(columns[0],5,2) AS INT) `MONTH`,
</span><span class='line'>columns[1] as `AIRLINE`,
</span><span class='line'>columns[2] as `IATA_CODE`,
</span><span class='line'>columns[3] as `AIRLINE_2`,
</span><span class='line'>columns[4] as `IATA_CODE_2`,
</span><span class='line'>columns[5] as `GEO_SUMMARY`,
</span><span class='line'>columns[6] as `GEO_REGION`,
</span><span class='line'>columns[7] as `ACTIVITY_CODE`,
</span><span class='line'>columns[8] as `PRICE_CODE`,
</span><span class='line'>columns[9] as `TERMINAL`,
</span><span class='line'>columns[10] as `BOARDING_AREA`,
</span><span class='line'>CAST(columns[11] AS DOUBLE) as `PASSENGER_COUNT`
</span><span class='line'>FROM dfs.data.`/airport/*.csv`
</span><span class='line'>LIMIT 10</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s now create a view with these columns: <em>(do not put any limit !)</em></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>CREATE OR REPLACE VIEW dfs.tmp.`airport_data_view` AS
</span><span class='line'>SELECT
</span><span class='line'>CAST(SUBSTR(columns[0],1,4) AS INT)  `YEAR`,
</span><span class='line'>CAST(SUBSTR(columns[0],5,2) AS INT) `MONTH`,
</span><span class='line'>columns[1] as `AIRLINE`,
</span><span class='line'>columns[2] as `IATA_CODE`,
</span><span class='line'>columns[3] as `AIRLINE_2`,
</span><span class='line'>columns[4] as `IATA_CODE_2`,
</span><span class='line'>columns[5] as `GEO_SUMMARY`,
</span><span class='line'>columns[6] as `GEO_REGION`,
</span><span class='line'>columns[7] as `ACTIVITY_CODE`,
</span><span class='line'>columns[8] as `PRICE_CODE`,
</span><span class='line'>columns[9] as `TERMINAL`,
</span><span class='line'>columns[10] as `BOARDING_AREA`,
</span><span class='line'>CAST(columns[11] AS DOUBLE) as `PASSENGER_COUNT`
</span><span class='line'>FROM dfs.data.`/airport/*.csv`</span></code></pre></td></tr></table></div></figure>


<p>So you can now use the view in your query:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>select * from dfs.tmp.`airport_data_view` limit 5;</span></code></pre></td></tr></table></div></figure>


<h2>Use the REST API</h2>

<p>Now that you have the query you can use the REST API to retrieve the data as JSON document over HTTP. Open a terminal and run this curl command:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl  \
</span><span class='line'>  --header "Content-type: application/json" \
</span><span class='line'>  --request POST \
</span><span class='line'>  --data '{
</span><span class='line'>    "queryType" : "SQL",
</span><span class='line'>    "query" : "select * from dfs.tmp.`airport_data_view` limit 5 " }' \
</span><span class='line'>  http://localhost:8047/query.json</span></code></pre></td></tr></table></div></figure>


<p>The returned JSON document looks like:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>  "columns" : [ "YEAR", "MONTH", ... , "PASSENGER_COUNT" ],
</span><span class='line'>  "rows" : [ {
</span><span class='line'>    "GEO_REGION" : "US",
</span><span class='line'>    "IATA_CODE_2" : "TZ",
</span><span class='line'>      ...
</span><span class='line'>      ...
</span><span class='line'>    "AIRLINE" : "ATA Airlines",
</span><span class='line'>    "MONTH" : "7",
</span><span class='line'>    "ACTIVITY_CODE" : "Deplaned"
</span><span class='line'>  }, {
</span><span class='line'>    "GEO_REGION" : "US",
</span><span class='line'>    "IATA_CODE_2" : "TZ",
</span><span class='line'>    "GEO_SUMMARY" : "Domestic",
</span><span class='line'>    ...
</span><span class='line'>  }
</span><span class='line'>  ]
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>As you can see it is quite simple:</p>

<ul>
<li>a first JSON attribute that list the columns</li>
<li>the list of rows, as JSON documents in an array.</li>
</ul>


<h2>Create a Graph using Node.js &amp; Blessed Contrib</h2>

<p>Let&rsquo;s create a node application.</p>

<p>First you have to include:</p>

<ul>
<li><code>request</code> : to call the REST API</li>
<li><code>blessed</code> : to get a rich Terminal API</li>
<li><code>blessed-contrib</code> : for the dashboard</li>
</ul>


<p>and then create a <code>screen</code> and a <code>bar</code> chard from Contrib.</p>

<p>So the <em>header</em> of your Javascript file looks like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">blessed</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;blessed&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">,</span> <span class="nx">contrib</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;blessed-contrib&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">,</span> <span class="nx">request</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;request&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">,</span> <span class="nx">screen</span> <span class="o">=</span> <span class="nx">blessed</span><span class="p">.</span><span class="nx">screen</span><span class="p">()</span>
</span><span class='line'>  <span class="p">,</span> <span class="nx">bar</span> <span class="o">=</span> <span class="nx">contrib</span><span class="p">.</span><span class="nx">bar</span><span class="p">(</span>
</span><span class='line'>       <span class="p">{</span> <span class="nx">label</span><span class="o">:</span> <span class="s1">&#39;Bar Chart&#39;</span>
</span><span class='line'>       <span class="p">,</span> <span class="nx">barWidth</span><span class="o">:</span> <span class="mi">20</span>
</span><span class='line'>       <span class="p">,</span> <span class="nx">barSpacing</span><span class="o">:</span> <span class="mi">20</span>
</span><span class='line'>       <span class="p">,</span> <span class="nx">maxHeight</span><span class="o">:</span> <span class="mi">9</span>
</span><span class='line'>       <span class="p">,</span> <span class="nx">height</span><span class="o">:</span> <span class="s2">&quot;100%&quot;</span>
</span><span class='line'>       <span class="p">,</span> <span class="nx">width</span><span class="o">:</span> <span class="s2">&quot;100%&quot;</span><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>So here we have defined a bar char, that will be populated with the columns and rows. For this we need a query, let&rsquo;s use the number of passengers per year, as follow:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">SELECT</span> <span class="err">`</span><span class="nx">YEAR</span><span class="err">`</span><span class="p">,</span> <span class="nx">SUM</span><span class="p">(</span><span class="err">`</span><span class="nx">PASSENGER_COUNT</span><span class="err">`</span><span class="p">)</span> <span class="nx">FROM</span> <span class="nx">dfs</span><span class="p">.</span><span class="nx">tmp</span><span class="p">.</span><span class="err">`</span><span class="nx">airport_data_view</span><span class="err">`</span> <span class="nx">GROUP</span> <span class="nx">BY</span> <span class="err">`</span><span class="nx">YEAR</span><span class="err">`</span>
</span></code></pre></td></tr></table></div></figure>


<p>The complete Bar Chat application looks like:</p>

<div><script src='https://gist.github.com/00c5d83b85f59d80ad95.js?file=app001.js'></script>
<noscript><pre><code>var blessed = require(&#39;blessed&#39;)
  , contrib = require(&#39;blessed-contrib&#39;)
  , request = require(&#39;request&#39;)
  , screen = blessed.screen()
  , bar = contrib.bar(
       { label: &#39;Bar Chart&#39;
       , barWidth: 12
       , barSpacing: 5
       , maxHeight: 9
       , height: &quot;100%&quot;
       , width: &quot;100%&quot;})

screen.append(bar);

var query =  {
    &quot;queryType&quot; : &quot;SQL&quot;,
    &quot;query&quot; : &quot;select `YEAR`, SUM(`PASSENGER_COUNT`) from dfs.tmp.`airport_data_view` GROUP BY `YEAR`&quot;
};

request(
    {
        url: &#39;http://localhost:8047/query.json&#39;, //URL to hit
        method: &#39;POST&#39;,
        json: query
    }, 
    function(error, response, body){
        var columns = body.columns;
        var data = {
            titles : [],
            data : []
        };
        for(var entry of body.rows){
            data.titles.push(entry[columns[0]]);
            data.data.push(entry[columns[1]]);
        }
        bar.setData(data);
        screen.render()
    });


screen.key([&#39;escape&#39;, &#39;q&#39;, &#39;C-c&#39;], function(ch, key) {
      return process.exit(0);
});
</code></pre></noscript></div>


<ul>
<li>The lines 15-17 contain the query object used by the Drill REST API</li>
<li>The lines 26-38 contain the callback from the HTTP call, and the results values are store in the data object (lines 33-34), and then set in the bar chart (line 36)</li>
</ul>


<h3>Run the &ldquo;Dashboard&rdquo;</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">npm</span> <span class="nx">install</span> <span class="nx">request</span> <span class="nx">blessed</span> <span class="nx">blessed</span><span class="o">-</span><span class="nx">contrib</span>
</span><span class='line'>
</span><span class='line'><span class="nx">node</span> <span class="nx">app001</span><span class="p">.</span><span class="nx">js</span>
</span></code></pre></td></tr></table></div></figure>


<p>This application shows a simple bar chart, in your terminal. Let&rsquo;s now create a richer dashboard.</p>

<h2>Complete Dashboard</h2>

<p>The Bless-Contrib node package allows developer to create rich dashboards that aggregate multiple graphs and could be refresh automatically, as seen in the screencast at the top of this post.</p>

<p>You can find a simple dashboard in this <a href="https://github.com/tgrall/drill-node-dashboard.git">Github repository</a>, once you have cloned it, you just need to run: (be sure that your view is called &lsquo;dfs.tmp.<code>airport_data_view</code>&rsquo;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">git</span> <span class="nx">clone</span> <span class="nx">https</span><span class="o">:</span><span class="c1">//github.com/tgrall/drill-node-dashboard.git</span>
</span><span class='line'>
</span><span class='line'><span class="nx">cd</span> <span class="nx">drill</span><span class="o">-</span><span class="nx">node</span><span class="o">-</span><span class="nx">dashboard</span>
</span><span class='line'>
</span><span class='line'><span class="nx">npm</span> <span class="nx">install</span>
</span><span class='line'>
</span><span class='line'><span class="nx">node</span> <span class="nx">dashboard</span><span class="p">.</span><span class="nx">js</span> <span class="nx">http</span><span class="o">:</span><span class="c1">//localhost:8047</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can even change the CSV file, for example adding new months, and the line chart on the right will be refreshed automatically.</p>

<p><em>Note: this dashboard sample is very basic and just a quick example explaning how to use Drill REST API in a node.js application</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Convert a CSV File to Apache Parquet With Drill]]></title>
    <link href="http://tgrall.github.io/blog/2015/08/17/convert-csv-file-to-apache-parquet-dot-dot-dot-with-drill/"/>
    <updated>2015-08-17T14:07:00+02:00</updated>
    <id>http://tgrall.github.io/blog/2015/08/17/convert-csv-file-to-apache-parquet-dot-dot-dot-with-drill</id>
    <content type="html"><![CDATA[<p>A very common use case when working with Hadoop is to store and query simple files (CSV, TSV, &hellip;); then to get better performance and efficient storage convert these files into more efficient format, for example <a href="https://parquet.apache.org/">Apache Parquet</a>.</p>

<p><a href="https://parquet.apache.org/">Apache Parquet</a> is a <a href="https://en.wikipedia.org/wiki/Column-oriented_DBMS">columnar storage format</a> available to any project in the Hadoop ecosystem. Apache Parquet has the following characteristics:</p>

<ul>
<li>Self-describing</li>
<li>Columnar format</li>
<li>Language-independent</li>
</ul>


<p>Let&rsquo;s take a concrete example, you can find many interesting Open Data sources that distribute data as CSV files- or equivalent format-. So you can store them into your distributed file system and use them in your applications/jobs/analytics queries. This is not the most efficient way especially when we know that these data won&rsquo;t move that often. So instead of simply storing the CSV let&rsquo;s copy this information into Parquet.</p>

<h3>How to convert CSV files into Parquet files?</h3>

<p>You can use code to achieve this, as you can see in the <a href="https://github.com/Parquet/parquet-compatibility/blob/master/parquet-compat/src/test/java/parquet/compat/test/ConvertUtils.java">ConvertUtils</a> sample/test class. You can use a simpler way with Apache Drill. Drill allows you save the result of a query as Parquet files.</p>

<p>The following steps will show you how to do convert a simple CSV into a Parquet file using Drill.</p>

<!-- more -->


<h4>Prerequisites</h4>

<ul>
<li>Apache Drill : Standalone <a href="https://drill.apache.org/">Apache Drill</a> or using <a href="https://www.mapr.com/products/mapr-sandbox-hadoop/download-sandbox-drill">Apache Drill Sandbox from MapR</a></li>
<li>Some CSV Files: for example <a href="http://www.flysfo.com/media/facts-statistics/air-traffic-statistics">Passenger Dataset from SFO Air Traffic Statistics</a></li>
</ul>


<h4>Querying the CSV file</h4>

<p>Let&rsquo;s execute a basic query:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span> <span class="o">*</span>
</span><span class='line'><span class="k">FROM</span> <span class="n">dfs</span><span class="p">.</span><span class="o">`/</span><span class="n">opendata</span><span class="o">/</span><span class="n">Passenger</span><span class="o">/</span><span class="n">SFO_Passenger_Data</span><span class="o">/</span><span class="n">MonthlyPassengerData_200507_to_201503</span><span class="p">.</span><span class="n">csv</span><span class="o">`</span>
</span><span class='line'><span class="k">LIMIT</span> <span class="mi">5</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="p">[</span><span class="ss">&quot;200507&quot;</span><span class="p">,</span><span class="ss">&quot;ATA Airlines&quot;</span><span class="p">,</span><span class="ss">&quot;TZ&quot;</span><span class="p">,</span><span class="ss">&quot;ATA Airlines&quot;</span><span class="p">,</span><span class="ss">&quot;TZ&quot;</span><span class="p">,</span><span class="ss">&quot;Domestic&quot;</span><span class="p">,</span><span class="ss">&quot;US&quot;</span><span class="p">,</span><span class="ss">&quot;Deplaned&quot;</span><span class="p">,</span><span class="ss">&quot;Low Fare&quot;</span><span class="p">,</span><span class="ss">&quot;Terminal 1&quot;</span><span class="p">,</span><span class="ss">&quot;B&quot;</span><span class="p">,</span><span class="ss">&quot;27271\r&quot;</span><span class="p">]</span>
</span><span class='line'><span class="p">...</span>
</span><span class='line'><span class="p">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see, by default Drill processes each line as an array of columns, all values being simple String. So if you need to do some operations with these values (projection or where clause) you must use the column index, and cast the value to the proper type. You can see a simple example below:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span>
</span><span class='line'><span class="n">columns</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="k">as</span> <span class="o">`</span><span class="nb">DATE</span><span class="o">`</span><span class="p">,</span>
</span><span class='line'><span class="n">columns</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="k">as</span> <span class="o">`</span><span class="n">AIRLINE</span><span class="o">`</span><span class="p">,</span>
</span><span class='line'><span class="k">CAST</span><span class="p">(</span><span class="n">columns</span><span class="p">[</span><span class="mi">11</span><span class="p">]</span> <span class="k">AS</span> <span class="n">DOUBLE</span><span class="p">)</span> <span class="k">as</span> <span class="o">`</span><span class="n">PASSENGER_COUNT</span><span class="o">`</span>
</span><span class='line'><span class="k">FROM</span> <span class="n">dfs</span><span class="p">.</span><span class="o">`/</span><span class="n">opendata</span><span class="o">/</span><span class="n">Passenger</span><span class="o">/</span><span class="n">SFO_Passenger_Data</span><span class="cm">/*.csv`</span>
</span><span class='line'><span class="cm">WHERE CAST(columns[11] AS DOUBLE) &lt; 5</span>
</span><span class='line'><span class="cm">;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">+---------+-----------------------------------+------------------+</span>
</span><span class='line'><span class="cm">|  DATE   |              AIRLINE              | PASSENGER_COUNT  |</span>
</span><span class='line'><span class="cm">+---------+-----------------------------------+------------------+</span>
</span><span class='line'><span class="cm">| 200610  | United Airlines - Pre 07/01/2013  | 2.0              |</span>
</span><span class='line'><span class="cm">...</span>
</span><span class='line'><span class="cm">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>We are now ready to create our Parquet files using the &ldquo;Create Table As Select&rdquo; (aka <a href="http://drill.apache.org/docs/create-table-as-ctas-command/">CTAS</a>)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">alter</span> <span class="k">session</span> <span class="k">set</span> <span class="o">`</span><span class="n">store</span><span class="p">.</span><span class="n">format</span><span class="o">`=</span><span class="s1">&#39;parquet&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">CREATE</span> <span class="k">TABLE</span> <span class="n">dfs</span><span class="p">.</span><span class="n">tmp</span><span class="p">.</span><span class="o">`/</span><span class="n">stats</span><span class="o">/</span><span class="n">airport_data</span><span class="o">/`</span> <span class="k">AS</span>
</span><span class='line'><span class="k">SELECT</span>
</span><span class='line'><span class="k">CAST</span><span class="p">(</span><span class="n">SUBSTR</span><span class="p">(</span><span class="n">columns</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="mi">1</span><span class="p">,</span><span class="mi">4</span><span class="p">)</span> <span class="k">AS</span> <span class="nb">INT</span><span class="p">)</span>  <span class="o">`</span><span class="k">YEAR</span><span class="o">`</span><span class="p">,</span>
</span><span class='line'><span class="k">CAST</span><span class="p">(</span><span class="n">SUBSTR</span><span class="p">(</span><span class="n">columns</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="mi">5</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span> <span class="k">AS</span> <span class="nb">INT</span><span class="p">)</span> <span class="o">`</span><span class="k">MONTH</span><span class="o">`</span><span class="p">,</span>
</span><span class='line'><span class="n">columns</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="k">as</span> <span class="o">`</span><span class="n">AIRLINE</span><span class="o">`</span><span class="p">,</span>
</span><span class='line'><span class="n">columns</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="k">as</span> <span class="o">`</span><span class="n">IATA_CODE</span><span class="o">`</span><span class="p">,</span>
</span><span class='line'><span class="n">columns</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span> <span class="k">as</span> <span class="o">`</span><span class="n">AIRLINE_2</span><span class="o">`</span><span class="p">,</span>
</span><span class='line'><span class="n">columns</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span> <span class="k">as</span> <span class="o">`</span><span class="n">IATA_CODE_2</span><span class="o">`</span><span class="p">,</span>
</span><span class='line'><span class="n">columns</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span> <span class="k">as</span> <span class="o">`</span><span class="n">GEO_SUMMARY</span><span class="o">`</span><span class="p">,</span>
</span><span class='line'><span class="n">columns</span><span class="p">[</span><span class="mi">6</span><span class="p">]</span> <span class="k">as</span> <span class="o">`</span><span class="n">GEO_REGION</span><span class="o">`</span><span class="p">,</span>
</span><span class='line'><span class="n">columns</span><span class="p">[</span><span class="mi">7</span><span class="p">]</span> <span class="k">as</span> <span class="o">`</span><span class="n">ACTIVITY_CODE</span><span class="o">`</span><span class="p">,</span>
</span><span class='line'><span class="n">columns</span><span class="p">[</span><span class="mi">8</span><span class="p">]</span> <span class="k">as</span> <span class="o">`</span><span class="n">PRICE_CODE</span><span class="o">`</span><span class="p">,</span>
</span><span class='line'><span class="n">columns</span><span class="p">[</span><span class="mi">9</span><span class="p">]</span> <span class="k">as</span> <span class="o">`</span><span class="n">TERMINAL</span><span class="o">`</span><span class="p">,</span>
</span><span class='line'><span class="n">columns</span><span class="p">[</span><span class="mi">10</span><span class="p">]</span> <span class="k">as</span> <span class="o">`</span><span class="n">BOARDING_AREA</span><span class="o">`</span><span class="p">,</span>
</span><span class='line'><span class="k">CAST</span><span class="p">(</span><span class="n">columns</span><span class="p">[</span><span class="mi">11</span><span class="p">]</span> <span class="k">AS</span> <span class="n">DOUBLE</span><span class="p">)</span> <span class="k">as</span> <span class="o">`</span><span class="n">PASSENGER_COUNT</span><span class="o">`</span>
</span><span class='line'><span class="k">FROM</span> <span class="n">dfs</span><span class="p">.</span><span class="o">`/</span><span class="n">opendata</span><span class="o">/</span><span class="n">Passenger</span><span class="o">/</span><span class="n">SFO_Passenger_Data</span><span class="cm">/*.csv`</span>
</span></code></pre></td></tr></table></div></figure>


<p>That&rsquo;s it! You have now a Parquet file, a single file in our case since our dataset is really small. Apache Drill will create multiples files for the tables depending of the size and configuration your environment.</p>

<p>I invite you to read this Chapter in the Apache Drill documentation to learn more about <a href="https://drill.apache.org/docs/parquet-format/">Drill and Parquet</a>.</p>

<h3>Query Parquet Files</h3>

<p>Now that you have created your Parquet files you can use them in any of your Hadoop processes, but you can also use them in Drill, as follow:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span> <span class="o">*</span>
</span><span class='line'><span class="k">FROM</span> <span class="n">dfs</span><span class="p">.</span><span class="n">tmp</span><span class="p">.</span><span class="o">`/</span><span class="n">stats</span><span class="o">/</span><span class="n">airport_data</span><span class="cm">/*`</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Conclusion</h2>

<p>In this article you have learned how to convert a CSV file using an Apache Drill query.</p>

<p>You can do that with any source supported by Drill, for example from JSON to Parquet, or even a complex join query between multiple data sources. You can also chose a different output format for example JSON, or a CSV.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Apache Drill : How to Create a New Function?]]></title>
    <link href="http://tgrall.github.io/blog/2015/07/22/apache-drill-how-to-create-a-new-function/"/>
    <updated>2015-07-22T02:32:54+02:00</updated>
    <id>http://tgrall.github.io/blog/2015/07/22/apache-drill-how-to-create-a-new-function</id>
    <content type="html"><![CDATA[<p><a href="https://drill.apache.org/">Apache Drill</a> allows users to explore <em>any type of</em> data using ANSI SQL. This is great, but Drill goes even further than that and allows you to create custom functions to extend the query engine. These custom functions have all the performance of any of the Drill primitive operations, but allowing that performance makes writing these functions a little trickier than you might expect.</p>

<p>In this article, I&rsquo;ll explain step by step how to create and deploy a new function using a very basic example. Note that you can find lot of information about <a href="https://drill.apache.org/docs/develop-custom-functions-introduction/">Drill Custom Functions in the documentation</a>.</p>

<p>Let&rsquo;s create a new function that allows you to mask some characters in a string, and let&rsquo;s make it very simple. The new function will allow user to hide <em>x</em> number of characters from the start and replace then by any characters of their choice. This will look like:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>MASK( 'PASSWORD' , '#' , 4 ) =&gt; ####WORD</span></code></pre></td></tr></table></div></figure>


<p>You can find the full project in the following <a href="https://github.com/tgrall/drill-simple-mask-function">Github Repository</a>.</p>

<p>As mentioned before, we could imagine many advanced features to this, but my goal is to focus on the steps to write a custom function, not
so much on what the function does.</p>

<!--more-->


<h2>Prerequisites</h2>

<p>For this you will need:</p>

<ul>
<li>Java Developer Kit 7 or later</li>
<li>Apache Drill 1.1 or later</li>
<li>Maven 3.0 or later</li>
</ul>


<h2>Dependencies</h2>

<p>The following Drill dependency should be added to your maven project</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>      <span class="nt">&lt;groupId&gt;</span>org.apache.drill.exec<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>      <span class="nt">&lt;artifactId&gt;</span>drill-java-exec<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>      <span class="nt">&lt;version&gt;</span>1.1.0<span class="nt">&lt;/version&gt;</span>
</span><span class='line'><span class="nt">&lt;/dependency&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Source</h2>

<p>The <code>Mask</code> function is an implementation of the <a href="https://github.com/apache/drill/blob/master/exec/java-exec/src/main/java/org/apache/drill/exec/expr/DrillSimpleFunc.java"><code>DrillSimpleFunc</code></a>.</p>

<p>Developers can create 2 types of custom functions:</p>

<ul>
<li>Simple Functions: these functions have a single row as input and produce a single value as output</li>
<li>Aggregation Functions: that will accept multiple rows as input and produce one value as output</li>
</ul>


<p>Simple functions are often referred to as UDF&rsquo;s which stands for user defined function.  Aggregation functions are referred to as UDAF which
stands for user defined aggregation function.</p>

<p>In this example, we just need to transform the value of a column on each row, so a simple function is enough.</p>

<h4>Create the function</h4>

<p>The first step is to implement the <a href="https://github.com/apache/drill/blob/master/exec/java-exec/src/main/java/org/apache/drill/exec/expr/DrillSimpleFunc.java"><code>DrillSimpleFunc</code></a> interface.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">drill</span><span class="o">.</span><span class="na">contrib</span><span class="o">.</span><span class="na">function</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.drill.exec.expr.DrillSimpleFunc</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.drill.exec.expr.annotations.FunctionTemplate</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@FunctionTemplate</span><span class="o">(</span>
</span><span class='line'>        <span class="n">name</span><span class="o">=</span><span class="s">&quot;mask&quot;</span><span class="o">,</span>
</span><span class='line'>        <span class="n">scope</span><span class="o">=</span> <span class="n">FunctionTemplate</span><span class="o">.</span><span class="na">FunctionScope</span><span class="o">.</span><span class="na">SIMPLE</span><span class="o">,</span>
</span><span class='line'>        <span class="n">nulls</span> <span class="o">=</span> <span class="n">FunctionTemplate</span><span class="o">.</span><span class="na">NullHandling</span><span class="o">.</span><span class="na">NULL_IF_NULL</span>
</span><span class='line'><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SimpleMaskFunc</span> <span class="kd">implements</span> <span class="n">DrillSimpleFunc</span><span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setup</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">eval</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The behavior of the function is driven by annotations (line 6-10)
  * <em>Name</em> of the function
  * <em>Scope</em> of the function, in our case Simple
  * What to do when the value is NULL, in this case Reverse will just returns NULL</p>

<p>Now we need to implement the logic of the function using <code>setup()</code> and <code>eval()</code> methods.</p>

<ul>
<li><code>setup</code> is self-explanatory, and in our case we do not need to setup anything.</li>
<li><code>eval</code> that is the core of the function. As you can see this method does not have any parameter, and return void. So how does it work?</li>
</ul>


<p>In fact the function will be generated dynamically (see <a href="https://github.com/apache/drill/blob/master/exec/java-exec/src/main/java/org/apache/drill/exec/expr/fn/DrillSimpleFuncHolder.java#L42">DrillSimpleFuncHolder</a>), and the input parameters and output holders are defined using holders by annotations. Let&rsquo;s look into this.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">io.netty.buffer.DrillBuf</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.drill.exec.expr.DrillSimpleFunc</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.drill.exec.expr.annotations.FunctionTemplate</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.drill.exec.expr.annotations.Output</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.drill.exec.expr.annotations.Param</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.drill.exec.expr.holders.IntHolder</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.drill.exec.expr.holders.NullableVarCharHolder</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.drill.exec.expr.holders.VarCharHolder</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">javax.inject.Inject</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nd">@FunctionTemplate</span><span class="o">(</span>
</span><span class='line'>        <span class="n">name</span> <span class="o">=</span> <span class="s">&quot;mask&quot;</span><span class="o">,</span>
</span><span class='line'>        <span class="n">scope</span> <span class="o">=</span> <span class="n">FunctionTemplate</span><span class="o">.</span><span class="na">FunctionScope</span><span class="o">.</span><span class="na">SIMPLE</span><span class="o">,</span>
</span><span class='line'>        <span class="n">nulls</span> <span class="o">=</span> <span class="n">FunctionTemplate</span><span class="o">.</span><span class="na">NullHandling</span><span class="o">.</span><span class="na">NULL_IF_NULL</span>
</span><span class='line'><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SimpleMaskFunc</span> <span class="kd">implements</span> <span class="n">DrillSimpleFunc</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Param</span>
</span><span class='line'>    <span class="n">NullableVarCharHolder</span> <span class="n">input</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Param</span><span class="o">(</span><span class="n">constant</span> <span class="o">=</span> <span class="kc">true</span><span class="o">)</span>
</span><span class='line'>    <span class="n">VarCharHolder</span> <span class="n">mask</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Param</span><span class="o">(</span><span class="n">constant</span> <span class="o">=</span> <span class="kc">true</span><span class="o">)</span>
</span><span class='line'>    <span class="n">IntHolder</span> <span class="n">toReplace</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Output</span>
</span><span class='line'>    <span class="n">VarCharHolder</span> <span class="n">out</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Inject</span>
</span><span class='line'>    <span class="n">DrillBuf</span> <span class="n">buffer</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setup</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">eval</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>We need to define the parameters of the function. In this case we have 3 parameters, each defined using the <code>@Param</code> annotation.  In addition, we also have to define the returned value using the <code>@Output</code> annotation.</p>

<p>The parameters of our mask function are:</p>

<ul>
<li>A nullable string</li>
<li>The mask char or string</li>
<li>The number of characters to replace starting from the first</li>
</ul>


<p>The function returns :</p>

<ul>
<li>A string</li>
</ul>


<p>For each of these parameters you have to use an holder class. For the <code>String</code>, this is managed by a <code>VarCharHolder</code> or <code>NullableVarCharHolder</code> -lines 21, 24,30- that provides a buffer to manage larger objects in a efficient way. Since we are manipulating a <code>VarChar</code> you also have to inject another buffer that will be used for the output -line 33-. Note that Drill doesn&rsquo;t actually use the Java heap for data being processed in a query but instead keeps this data off the heap and manages the life-cycle for us without using the Java
garbage collector.</p>

<p>We are almost done since we have the proper class, the input/output object, we just need to implement the <code>eval()</code> method itself, and use these objects.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">eval</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// get the value and replace with</span>
</span><span class='line'>    <span class="n">String</span> <span class="n">maskValue</span> <span class="o">=</span> <span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">drill</span><span class="o">.</span><span class="na">exec</span><span class="o">.</span><span class="na">expr</span><span class="o">.</span><span class="na">fn</span><span class="o">.</span><span class="na">impl</span><span class="o">.</span><span class="na">StringFunctionHelpers</span><span class="o">.</span><span class="na">getStringFromVarCharHolder</span><span class="o">(</span><span class="n">mask</span><span class="o">);</span>
</span><span class='line'>    <span class="n">String</span> <span class="n">stringValue</span> <span class="o">=</span> <span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">drill</span><span class="o">.</span><span class="na">exec</span><span class="o">.</span><span class="na">expr</span><span class="o">.</span><span class="na">fn</span><span class="o">.</span><span class="na">impl</span><span class="o">.</span><span class="na">StringFunctionHelpers</span><span class="o">.</span><span class="na">toStringFromUTF8</span><span class="o">(</span><span class="n">input</span><span class="o">.</span><span class="na">start</span><span class="o">,</span> <span class="n">input</span><span class="o">.</span><span class="na">end</span><span class="o">,</span> <span class="n">input</span><span class="o">.</span><span class="na">buffer</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">int</span> <span class="n">numberOfCharToReplace</span> <span class="o">=</span> <span class="n">Math</span><span class="o">.</span><span class="na">min</span><span class="o">(</span><span class="n">toReplace</span><span class="o">.</span><span class="na">value</span><span class="o">,</span> <span class="n">stringValue</span><span class="o">.</span><span class="na">length</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// build the mask substring</span>
</span><span class='line'>    <span class="n">String</span> <span class="n">maskSubString</span> <span class="o">=</span> <span class="n">com</span><span class="o">.</span><span class="na">google</span><span class="o">.</span><span class="na">common</span><span class="o">.</span><span class="na">base</span><span class="o">.</span><span class="na">Strings</span><span class="o">.</span><span class="na">repeat</span><span class="o">(</span><span class="n">maskValue</span><span class="o">,</span> <span class="n">numberOfCharToReplace</span><span class="o">);</span>
</span><span class='line'>    <span class="n">String</span> <span class="n">outputValue</span> <span class="o">=</span> <span class="o">(</span><span class="k">new</span> <span class="nf">StringBuilder</span><span class="o">(</span><span class="n">maskSubString</span><span class="o">)).</span><span class="na">append</span><span class="o">(</span><span class="n">stringValue</span><span class="o">.</span><span class="na">substring</span><span class="o">(</span><span class="n">numberOfCharToReplace</span><span class="o">)).</span><span class="na">toString</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// put the output value in the out buffer</span>
</span><span class='line'>    <span class="n">out</span><span class="o">.</span><span class="na">buffer</span> <span class="o">=</span> <span class="n">buffer</span><span class="o">;</span>
</span><span class='line'>    <span class="n">out</span><span class="o">.</span><span class="na">start</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>    <span class="n">out</span><span class="o">.</span><span class="na">end</span> <span class="o">=</span> <span class="n">outputValue</span><span class="o">.</span><span class="na">getBytes</span><span class="o">().</span><span class="na">length</span><span class="o">;</span>
</span><span class='line'>    <span class="n">buffer</span><span class="o">.</span><span class="na">setBytes</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="n">outputValue</span><span class="o">.</span><span class="na">getBytes</span><span class="o">());</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The code is quite simple:</p>

<ul>
<li>Get the mask itself - line 4</li>
<li>Get the value - line 5</li>
<li>Get the number of character to replace - line 7</li>
<li>Generate a new string with masked values - lines 10/11</li>
<li>Create and populate the output buffer - lines 14 to 17</li>
</ul>


<p>This code does, however, look a bit strange to somebody used to reading Java code. This strangeness arises because the final code that is executed in a query will actually be generated on the fly. This allows Drill to leverage Java&rsquo;s just-in-time (JIT) compiler for maximum speed. To make this work, you have to respect some basic rules:</p>

<ul>
<li><strong>Do not use imports, but instead use the fully qualified class name</strong>, this is what is done on line 10 with the <code>Strings</code> class. (coming from the Google Guava API packaged in Apache Drill)</li>
<li>The <code>ValueHolders</code> classes, in our case <code>VarCharHolder</code> and <code>IntHolder</code> should be manipulated like structs, so you must call helper methods, for example <code>getStringFromVarCharHolder</code> and <code>toStringFromUTF8</code>. Calling methods like <code>toString</code> will result in very bad problems.</li>
</ul>


<p>Starting in Apache Drill 1.3.x, it is mandatory to specify the package name of your function in the <code>./resources/drill-module.conf</code> file as follow:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">drill</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">classpath</span><span class="o">.</span><span class="na">scanning</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">packages</span> <span class="o">:</span> <span class="n">$</span><span class="o">{?</span><span class="n">drill</span><span class="o">.</span><span class="na">classpath</span><span class="o">.</span><span class="na">scanning</span><span class="o">.</span><span class="na">packages</span><span class="o">}</span> <span class="o">[</span>
</span><span class='line'>      <span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">drill</span><span class="o">.</span><span class="na">contrib</span><span class="o">.</span><span class="na">function</span>
</span><span class='line'>    <span class="o">]</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>We are now ready to deploy and test this new function.</p>

<h3>Package</h3>

<p>Once again since, Drill will generate source, <em><strong>you must prepare your package in a way that classes and sources of the function are present in the classpath</strong></em>. This is different from the way that Java code is normally packaged but is necessary for Drill to be able to do the necessary code generation. Drill uses the compiled code to access the annotations and uses the source code to do code generation.</p>

<p>An easy way to do that is to use maven to build your project, and, in particular, use the <a href="https://maven.apache.org/plugins/maven-source-plugin/">maven-source-plugin</a> like this in your <code>pom.xml</code> file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;plugin&gt;</span>
</span><span class='line'>    <span class="nt">&lt;groupId&gt;</span>org.apache.maven.plugins<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>    <span class="nt">&lt;artifactId&gt;</span>maven-source-plugin<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>    <span class="nt">&lt;version&gt;</span>2.4<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>    <span class="nt">&lt;executions&gt;</span>
</span><span class='line'>        <span class="nt">&lt;execution&gt;</span>
</span><span class='line'>            <span class="nt">&lt;id&gt;</span>attach-sources<span class="nt">&lt;/id&gt;</span>
</span><span class='line'>            <span class="nt">&lt;phase&gt;</span>package<span class="nt">&lt;/phase&gt;</span>
</span><span class='line'>            <span class="nt">&lt;goals&gt;</span>
</span><span class='line'>                <span class="nt">&lt;goal&gt;</span>jar-no-fork<span class="nt">&lt;/goal&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/goals&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/execution&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/executions&gt;</span>
</span><span class='line'><span class="nt">&lt;/plugin&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, when you build using <code>mvn package</code>, Maven will generate 2 jars:</p>

<ul>
<li>The default jar with the classes and resources (<em>drill-simple-mask-1.0.jar</em>)</li>
<li>A second jar with the sources (<em>drill-simple-mask-1.0-sources.jar</em>)</li>
</ul>


<p>Finally you must add a <code>drill-module.conf</code> file in the resources folder of your project, to tell Drill that your jar contains a custom function. If you have no specific configuration to set for your function you can keep this file empty.</p>

<p>We are all set, you can now package and deploy the new function, just package and copy the Jars into the Drill 3rd party folder; $DRILL_HOME/jars/3rdparty , where $DRILL_HOME being your Drill installation folder.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>mvn clean package
</span><span class='line'>
</span><span class='line'>cp target/*.jar  $DRILL_HOME/jars/3rdparty
</span></code></pre></td></tr></table></div></figure>


<p>Restart drill.</p>

<h3>Run !</h3>

<p>You should now be able to use your function in your queries:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>SELECT MASK(first_name, &#39;*&#39; , 3) FIRST , MASK(last_name, &#39;#&#39;, 7) LAST  FROM cp.`employee.json` LIMIT 5;
</span><span class='line'>+----------+------------+
</span><span class='line'>|  FIRST   |    LAST    |
</span><span class='line'>+----------+------------+
</span><span class='line'>| ***ri    | ######     |
</span><span class='line'>| ***rick  | #######    |
</span><span class='line'>| ***hael  | ######     |
</span><span class='line'>| ***a     | #######ez  |
</span><span class='line'>| ***erta  | #######    |
</span><span class='line'>+----------+------------+
</span></code></pre></td></tr></table></div></figure>


<h2>Conclusion</h2>

<p>In this simple project you have learned how to write, deploy and use a custom Apache Drill Function. You can now extend this to create your own function.</p>

<p>One important thing to remember when extending Apache Drill (using a custom function, storage plugin or format), is that Drill runtime is generating dynamically lot of code. This means you may have to use a very specific pattern when writing and deploying your extensions. With our basic function this meant we had to:</p>

<ul>
<li>deploy <strong>classes AND sources</strong></li>
<li>use <strong>fully Qualified Class Names</strong></li>
<li>use value holder classes and helper methods to manipulate parameters
*</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MongoDB : Playing With Arrays]]></title>
    <link href="http://tgrall.github.io/blog/2015/04/21/mongodb-playing-with-arrays/"/>
    <updated>2015-04-21T15:45:39+02:00</updated>
    <id>http://tgrall.github.io/blog/2015/04/21/mongodb-playing-with-arrays</id>
    <content type="html"><![CDATA[<p>As you know,  you have many differences between relational and document databases. The biggest, for the developer, is probably the data model: Row versus Document. This is particularly true when we talk about &ldquo;relations&rdquo; versus &ldquo;embedded documents <em>(or values)</em>&rdquo;. Let&rsquo;s look at some examples, then see what are the various operations provided by MongoDB to help you to deal with this.</p>

<!-- more -->


<p>I won&rsquo;t use this post to go in all the details about &ldquo;document design&rdquo;, but I just want to focus on the operations you can to with these arrays/list (so useful operations once you have chosen to embed documents).</p>

<p>Let&rsquo;s use a very simple example based on e-commerce platform, with two document types : <strong><em>user</em></strong> and <strong><em>orders</em></strong>.</p>

<p>The first thing you have, is a simple list of values into a JSON array. Let&rsquo;s look at a user profile where user have a list of interests  (field <code>interested_by</code>) :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;_id&quot;</span> <span class="p">:</span> <span class="mi">654321</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;first_name&quot;</span> <span class="p">:</span> <span class="s2">&quot;John&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;last_name&quot;</span> <span class="p">:</span> <span class="s2">&quot;Doe&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;interested_by&quot;</span> <span class="p">:</span> <span class="p">[</span> <span class="s2">&quot;electronics&quot;</span><span class="p">,</span> <span class="s2">&quot;sports&quot;</span><span class="p">,</span> <span class="s2">&quot;music&quot;</span> <span class="p">],</span>
</span><span class='line'>  <span class="nt">&quot;address&quot;</span> <span class="p">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;name&quot;</span> <span class="p">:</span> <span class="s2">&quot;John Doe&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;company&quot;</span> <span class="p">:</span> <span class="s2">&quot;Resultri&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;street&quot;</span> <span class="p">:</span> <span class="s2">&quot;1015 Mapple Street&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;city&quot;</span> <span class="p">:</span> <span class="s2">&quot;San Francisco&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;state&quot;</span> <span class="p">:</span> <span class="s2">&quot;CA&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;zip_code&quot;</span> <span class="p">:</span> <span class="mi">94105</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Another thing you do with array, is to represent &ldquo;one-to-many&rdquo; relations. These relations in your RDBMS are based on multiple tables and foreign keys.
In document databases, like MongoDB, these relations are, most of the time, represented using an <em>array of documents</em>, something like (look at the <code>items</code> field):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;_id&quot;</span> <span class="p">:</span> <span class="mi">45218468309</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;date&quot;</span> <span class="p">:</span> <span class="err">ISODate(</span><span class="s2">&quot;2015-01-28T09:40:50.615Z&quot;</span><span class="err">)</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;customer&quot;</span> <span class="p">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;id&quot;</span> <span class="p">:</span> <span class="mi">654321</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;name&quot;</span> <span class="p">:</span> <span class="s2">&quot;John Doe&quot;</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nt">&quot;ship_to&quot;</span> <span class="p">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;name&quot;</span> <span class="p">:</span> <span class="s2">&quot;John Doe&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;company&quot;</span> <span class="p">:</span> <span class="s2">&quot;Resultri&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;street&quot;</span> <span class="p">:</span> <span class="s2">&quot;1015 Mapple Street&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;city&quot;</span> <span class="p">:</span> <span class="s2">&quot;San Francisco&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;state&quot;</span> <span class="p">:</span> <span class="s2">&quot;CA&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;zip_code&quot;</span> <span class="p">:</span> <span class="mi">94105</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nt">&quot;items&quot;</span> <span class="p">:</span> <span class="p">[</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="nt">&quot;sku&quot;</span> <span class="p">:</span> <span class="s2">&quot;WA34R&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;description&quot;</span> <span class="p">:</span> <span class="s2">&quot;Wireless Qwerty Keyboard&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;quantity&quot;</span> <span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;unit_price&quot;</span> <span class="p">:</span> <span class="mf">41.5</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;price&quot;</span> <span class="p">:</span> <span class="mf">41.5</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;vat&quot;</span> <span class="p">:</span> <span class="mi">20</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="nt">&quot;sku&quot;</span> <span class="p">:</span> <span class="s2">&quot;MW003&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;description&quot;</span> <span class="p">:</span> <span class="s2">&quot;MiWatch&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;quantity&quot;</span> <span class="p">:</span> <span class="mi">2</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;unit_price&quot;</span> <span class="p">:</span> <span class="mi">245</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;price&quot;</span> <span class="p">:</span> <span class="mi">490</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;vat&quot;</span> <span class="p">:</span> <span class="mi">20</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Documents above are not necessary complete, I just want to focus on the various operations you can do on these arrays.</p>

<p><em>Note: you can add these documents into your MongoDB instance, I will use the collections <code>customers</code> and <code>orders</code>.</em></p>

<h3>Adding new interest to the user</h3>

<p>To achieve this you have 2 operators that you can use in your update: <a href="1"><code>$push</code></a> and <a href="2"><code>$addToSet</code></a>. Since these one a very simple I won&rsquo;t go into too much details.</p>

<p>The <code>$push</code> will add the value at the end of the list, if the value already exits it will be added (many copies), this is why it makes sense to use the <code>$addToSet</code> operator, that only add the value if the value does not already exist in the array.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="err">db.customers.update(</span>
</span><span class='line'>  <span class="p">{</span> <span class="nt">&quot;_id&quot;</span> <span class="p">:</span> <span class="mi">654321</span>  <span class="p">}</span><span class="err">,</span>
</span><span class='line'>  <span class="p">{</span> <span class="nt">&quot;$addToSet&quot;</span> <span class="p">:</span> <span class="p">{</span> <span class="nt">&quot;interested_by&quot;</span> <span class="p">:</span>  <span class="s2">&quot;sports&quot;</span><span class="p">}</span>  <span class="p">}</span>
</span><span class='line'><span class="err">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>This update command above <strong>will not change</strong> the document since the &ldquo;sports&rdquo; value is already in the list.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="err">db.customers.update(</span>
</span><span class='line'>  <span class="p">{</span> <span class="nt">&quot;_id&quot;</span> <span class="p">:</span> <span class="mi">654321</span>  <span class="p">}</span><span class="err">,</span>
</span><span class='line'>  <span class="p">{</span> <span class="nt">&quot;$addToSet&quot;</span> <span class="p">:</span> <span class="p">{</span> <span class="nt">&quot;interested_by&quot;</span> <span class="p">:</span>  <span class="s2">&quot;books&quot;</span><span class="p">}</span>  <span class="p">}</span>
</span><span class='line'><span class="err">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>This <strong>will add</strong> the &ldquo;books&rdquo; value at the end of the list.</p>

<p>If the attribute <code>interested_by</code> does not exist in the document, it will be added with one single entry (here the <code>$push</code> is working the same way ).</p>

<p>If the attribute is not an array, the database will not do anything and return the error <a href="3">#16837</a> <em>&ldquo;The field &lsquo;first_name&rsquo; must be an array but is of type String in document&rdquo;</em>.</p>

<p>Here we use <em>interest</em>, but you can imagine doing the same thing for tagging, or any other business use case with a list of values.</p>

<h3>Adding a new item into an order</h3>

<p>The previous case, is very simple since it is a scalar value. Now I need to add a new order line, it is not harder than before:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="err">db.orders.update(</span>
</span><span class='line'>  <span class="p">{</span> <span class="nt">&quot;_id&quot;</span> <span class="p">:</span> <span class="mi">45218468309</span>   <span class="p">}</span><span class="err">,</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;$push&quot;</span> <span class="p">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nt">&quot;items&quot;</span> <span class="p">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nt">&quot;sku&quot;</span> <span class="p">:</span> <span class="s2">&quot;MO001&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;description&quot;</span> <span class="p">:</span> <span class="s2">&quot;Bluetooth mouse&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;quantity&quot;</span> <span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;unit_price&quot;</span> <span class="p">:</span> <span class="mf">20.00</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;price&quot;</span> <span class="p">:</span> <span class="mf">20.00</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;vat&quot;</span> <span class="p">:</span> <span class="mf">20.00</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="err">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>So you can see now that the value is added at the end of the list.</p>

<h3>Updating an item in the order</h3>

<p>Let&rsquo;s look at another requirement. Now I need to update for example the quantity of one of the line. In your relational application it is <em>easy</em> in the sense that you have one single record to update(in reality it is a different story since application are using complex data layer).</p>

<p>You can do the same, meaning you can only update the <em>items</em> directly in the array &ndash; (no need to replace the full document or list like I see too often).</p>

<p>For this, you  just need to use the <code>update</code> and <code>$set</code> and specify the positional operation <code>$</code>.</p>

<p>The <code>$</code> operator is a placeholder for the first entry in the array that match the filter (query document) sent to the update/findAndModify command.</p>

<p>In our example, to update a specific line in the order</p>

<p>The proper way is simply to use the an update and <code>$set</code>,
 but you have to select the exact entry in the array in your filter. For example in our case we want to update the number of mouses and the price, this will look like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="err">db.orders.update(</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;_id&quot;</span> <span class="p">:</span> <span class="mi">45218468309</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;items.sku&quot;</span> <span class="p">:</span> <span class="s2">&quot;MO001&quot;</span>
</span><span class='line'>  <span class="p">}</span><span class="err">,</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;$set&quot;</span> <span class="p">:</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nt">&quot;items.$&quot;</span> <span class="p">:</span> <span class="p">{</span>
</span><span class='line'>          <span class="nt">&quot;sku&quot;</span> <span class="p">:</span> <span class="s2">&quot;MO001&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="nt">&quot;description&quot;</span> <span class="p">:</span> <span class="s2">&quot;Bluetooth mouse&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="nt">&quot;quantity&quot;</span> <span class="p">:</span> <span class="mi">2</span><span class="p">,</span>
</span><span class='line'>          <span class="nt">&quot;unit_price&quot;</span> <span class="p">:</span> <span class="mf">20.00</span><span class="p">,</span>
</span><span class='line'>          <span class="nt">&quot;price&quot;</span> <span class="p">:</span> <span class="mf">40.00</span><span class="p">,</span>
</span><span class='line'>          <span class="nt">&quot;vat&quot;</span> <span class="p">:</span> <span class="mf">20.00</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="err">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see, the <code>$</code> operator is telling MongoDB to update one specific entry in the array.</p>

<h2>Remove an item from the Array</h2>

<p>You have learned so far that you can easily query and add values into an array; using the same appraoch you can also remove entry in an array. This is done using 3 operators : <code>$pop</code>, <code>$pull</code> and <code>$pullAll</code></p>

<ul>
<li>The <code>$pop</code> operator removes one element from the end of the array</li>
<li>The <code>$pull</code> operator removes <em>all</em> elements in the array that match a specified value.</li>
<li>The <code>$pullAll</code> operator removes <em>all</em> elements in the array that match any of the specified values.</li>
</ul>


<h4>Remove some interests from a customer</h4>

<p>For example, let&rsquo;s remove the &ldquo;electronics&rdquo; interest from the customer id 654321.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="err">db.customers.update(</span>
</span><span class='line'>  <span class="p">{</span> <span class="nt">&quot;_id&quot;</span> <span class="p">:</span> <span class="mi">654321</span>  <span class="p">}</span><span class="err">,</span>
</span><span class='line'>  <span class="p">{</span> <span class="nt">&quot;$pull&quot;</span> <span class="p">:</span> <span class="p">{</span> <span class="nt">&quot;interested_by&quot;</span> <span class="p">:</span>  <span class="s2">&quot;electronics&quot;</span><span class="p">}</span>  <span class="p">}</span>
</span><span class='line'><span class="err">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you want to remove sports and music interest from the customer you can use the <code>$pullAll</code> operator as follow:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="err">db.customers.update(</span>
</span><span class='line'>  <span class="p">{</span> <span class="nt">&quot;_id&quot;</span> <span class="p">:</span> <span class="mi">654321</span>  <span class="p">}</span><span class="err">,</span>
</span><span class='line'>  <span class="p">{</span> <span class="nt">&quot;$pullAll&quot;</span> <span class="p">:</span> <span class="p">{</span> <span class="nt">&quot;interested_by&quot;</span> <span class="p">:</span>  <span class="p">[</span><span class="s2">&quot;sports&quot;</span><span class="p">,</span><span class="s2">&quot;music&quot;</span><span class="p">]}</span>  <span class="p">}</span>
</span><span class='line'><span class="err">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here we use <em>interest</em>, but you can imagine doing the same thing for tagging, or any other business use case with a list of values.</p>

<h4>Remove item into an order</h4>

<p>Using the same operator you can also remove a line order (item) from an order document, for example let&rsquo;s remove the line with the item MO001 (Bluetooth mouse). For this we can use the <code>$pull</code> operator with the proper sku.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="err">db.orders.update(</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;_id&quot;</span> <span class="p">:</span> <span class="mi">45218468309</span><span class="p">,</span>
</span><span class='line'>  <span class="p">}</span><span class="err">,</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;$pull&quot;</span> <span class="p">:</span> <span class="p">{</span> <span class="nt">&quot;items&quot;</span> <span class="p">:</span> <span class="p">{</span> <span class="nt">&quot;sku&quot;</span> <span class="p">:</span> <span class="s2">&quot;MO001&quot;</span> <span class="p">}</span> <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="err">);</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Conclusion</h3>

<p>In this article you have learn how to create/edit arrays in JSON documents.</p>

<p>In addition to all the update operators, MongoDB provides many operators for querying arrays such as  <a href="5">$size</a> or <a href="4"><code>$elemMatch</code></a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introduction to MongoDB Security]]></title>
    <link href="http://tgrall.github.io/blog/2015/02/04/introduction-to-mongodb-security/"/>
    <updated>2015-02-04T18:55:30+01:00</updated>
    <id>http://tgrall.github.io/blog/2015/02/04/introduction-to-mongodb-security</id>
    <content type="html"><![CDATA[<p>Last week at the Paris MUG, I had a quick chat about security and MongoDB, and I have decided to create this post that explains how to configure out of the box security available in MongoDB.</p>

<p>You can find all information about MongoDB Security in following documentation chapter:</p>

<ul>
<li><a href="http://docs.mongodb.org/manual/security/">http://docs.mongodb.org/manual/security/</a></li>
</ul>


<p><img class="center" src="http://tgrall.github.io/images/posts/intro-mongodb-security/password.jpg"></p>

<p>In this post, <em>I won&rsquo;t go</em> into the detail about how to deploy your database in a secured environment (DMZ/Network/IP/Location/&hellip;)</p>

<p>I will focus on <strong>Authentication</strong> and <strong>Authorization</strong>, and provide you the steps to secure the access to your database and data.</p>

<p>I have to mention that by default, when you install and start MongoDB, security is not enabled. Just to make it easier to work with.</p>

<p>The first part of the security is the <strong>Authentication</strong>, you have multiple choices documented <a href="http://docs.mongodb.org/manual/core/authentication/">here</a>. Let&rsquo;s focus on &ldquo;MONGODB-CR&rdquo; mechanism.</p>

<p>The second part is <strong>Authorization</strong> to select what a user can do or not once he is connected to the database. The documentation about authorization is available <a href="http://docs.mongodb.org/manual/core/authorization/">here</a>.</p>

<p>Let&rsquo;s now document how-to:</p>

<ol>
<li>Create an Administrator User</li>
<li>Create Application Users</li>
</ol>


<p>For each type of users I will show how to grant specific permissions.</p>

<!-- more -->


<h2>1. Start MongoDB</h2>

<p>As I said before, by default security is not enabled when you start MongoDB; so the first think to do is to enable it using the <code>--auth</code> parameter.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; mkdir /data/db
</span><span class='line'>
</span><span class='line'>&gt; mongod --auth
</span><span class='line'>
</span><span class='line'>....
</span><span class='line'>....
</span><span class='line'>2015-02-04T06:56:37.875+0100 [conn1] note: no users configured in admin.system.users, allowing localhost access
</span><span class='line'>...
</span></code></pre></td></tr></table></div></figure>


<p>MongoDB is starting, and until you have created a user you can connect from localhost to create some users (especially the administrator one). This is what is called the <em>localhost exception</em>.</p>

<p>Note: I am here documenting security in simple configuration, I invite you to look to the documentation when deploying a <a href="http://docs.mongodb.org/v2.2/administration/sharded-clusters/#sharded-cluster-security-considerations">Sharded cluster</a>.</p>

<p>Now that we have started MongoDB, we can create users.</p>

<h2>2. Create Admin User</h2>

<p>The first thing is to create an admin user, that can also create users, So we have to:</p>

<ol>
<li>go to the mongo shell</li>
<li>connect to the `admin&#8217; database</li>
<li>create a user and assign him the role <a href="http://docs.mongodb.org/manual/reference/built-in-roles/#userAdminAnyDatabase"><strong>userAdminAnyDatabase</strong></a></li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>use admin
</span><span class='line'>
</span><span class='line'>var user = {
</span><span class='line'>  "user" : "admin",
</span><span class='line'>  "pwd" : "manager",
</span><span class='line'>  roles : [
</span><span class='line'>      {
</span><span class='line'>          "role" : "userAdminAnyDatabase",
</span><span class='line'>          "db" : "admin"
</span><span class='line'>      }
</span><span class='line'>  ]
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>db.createUser(user);
</span><span class='line'>
</span><span class='line'>exit</span></code></pre></td></tr></table></div></figure>


<p>Now that you have created a user, in a MongoDB running with <code>--auth</code>, anonymous connections won&rsquo;t be able to do do anything with the database.</p>

<p>You can test for example to execute <code>show dbs</code> or <code>db.coll.insert({'x':0})</code> commands, you&rsquo;ll see authorization errors.</p>

<h3>Connect with the Admnistrator user</h3>

<p>Now that we have an admin user you can connect to the database with this user:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>&gt; mongo admin -u admin -p
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p>Our admin user, has the role <strong>userAdminAnyDatabase</strong>. With this role you can manage user; but this role cannot read/write data from application datatabases/collections.</p>

<p>So we need now to create a new user for our &ldquo;eCommerce&rdquo; application.</p>

<h2>3. Create Application User</h2>

<p>Now we will create a new user <em>website</em> that is responsible of the ecommerce database.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; mongo admin -u admin -p
</span><span class='line'>
</span><span class='line'>use ecommerce
</span><span class='line'>
</span><span class='line'>var user = {
</span><span class='line'>  "user" : "website",
</span><span class='line'>  "pwd" : "abc123",
</span><span class='line'>  roles : [
</span><span class='line'>      {
</span><span class='line'>          "role" : "readWrite",
</span><span class='line'>          "db" : "ecommerce"
</span><span class='line'>      }
</span><span class='line'>  ]
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>db.createUser(user);
</span><span class='line'>
</span><span class='line'>exit
</span></code></pre></td></tr></table></div></figure>


<p>This user will be able to read/write on the <em>ecommerce</em> database</p>

<h3>Connect with the application user</h3>

<p>Using the mongo shell you can now connect and create/query data</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; mongo ecommerce -u website -p
</span><span class='line'>
</span><span class='line'>db.products.insert({ "title" : "MongoDB in Action"  });
</span><span class='line'>
</span><span class='line'>db.products.findOne();
</span><span class='line'>
</span><span class='line'>db.products.update({}, {"$set" : { "type" : "book" } })
</span></code></pre></td></tr></table></div></figure>


<p>As you can see this user has the perfect profile for your application.</p>

<p>Note, that if you try to query or modify another database with this user you will receive authorization exceptions.</p>

<h2>Create a reporting user (Read Only)</h2>

<p>You may need in your application, user that can only read data, let&rsquo;s say in all databases. For this you just need to assign the role <strong>readAnyDatabase</strong>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>&gt; mongo admin -u admin -p
</span><span class='line'>
</span><span class='line'>var user = {
</span><span class='line'>  "user" : "reporting",
</span><span class='line'>  "pwd" : "abc123",
</span><span class='line'>  roles : [
</span><span class='line'>      {
</span><span class='line'>          "role" : "readAnyDatabase",
</span><span class='line'>          "db" : "admin"
</span><span class='line'>      }
</span><span class='line'>  ]
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>db.createUser(user);
</span><span class='line'>
</span><span class='line'>exit</span></code></pre></td></tr></table></div></figure>


<p>This user will be able to query all the databases and collections, including <code>show dbs</code> command.</p>

<p>Let&rsquo;s connect with the reporting user:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; mongo admin -u reporting -p
</span><span class='line'>
</span><span class='line'>show dbs
</span><span class='line'>
</span><span class='line'>use ecommerce
</span><span class='line'>
</span><span class='line'>db.products.find();
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p>If you try to inser/update/delete document you will receive an exception.</p>

<h2>Add new role to a user</h2>

<p>Let&rsquo;s now see how to add a new role to a user. For example I want to let the admin the power of read and write any database. For this I just need to add the role <strong>readWriteAnyDatabase</strong> to the admin user.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; mongo admin -u admin -p
</span><span class='line'>
</span><span class='line'>db.grantRolesToUser(
</span><span class='line'>  "admin",
</span><span class='line'>  [{ "role" : "readWriteAnyDatabase", "db" : "admin" }]
</span><span class='line'>)
</span><span class='line'>
</span><span class='line'>db.getUser("admin");
</span></code></pre></td></tr></table></div></figure>


<p>Using the <code>db.grantRolesToUser</code> command I have added the role to the admin user, and using the <code>db.getUser</code> I can look at the user profile.</p>

<p>Now, admin user should be able to create new databases, collections and documents, let&rsquo;s try:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>use hr
</span><span class='line'>
</span><span class='line'>db.employees.insert({ "name":"John Doe", "hire_date" : new Date() });
</span><span class='line'>
</span><span class='line'>db.organization.insert({ "name" : "Development" });
</span><span class='line'>
</span><span class='line'>db.employees.findOne();
</span></code></pre></td></tr></table></div></figure>


<h2>Create and use custom roles</h2>

<p>Another feature that is used a lot around security is related to the roles. In some case you want to provide multiple roles to a user, for example:</p>

<ul>
<li>all permission on database <em>ecommerce</em></li>
<li>read the collection <em>employees</em> in database <em>hr</em></li>
</ul>


<p>For this you can create a role that provide all the permissions and assign it to users. Let&rsquo;s do that using admin user.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>use admin
</span><span class='line'>
</span><span class='line'>var role = {
</span><span class='line'>  "role"  : "webSiteManagerRole",
</span><span class='line'>  privileges : [
</span><span class='line'>      {
</span><span class='line'>          "resource": {"db" : "hr", "collection" : "employees"},
</span><span class='line'>          "actions": ["find"]
</span><span class='line'>      }
</span><span class='line'>  ],
</span><span class='line'>  "roles" : [
</span><span class='line'>      {
</span><span class='line'>          "role" : "readWrite",
</span><span class='line'>          "db" : "ecommerce"
</span><span class='line'>      }
</span><span class='line'>  ]
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>db.createRole( role );
</span><span class='line'>
</span><span class='line'>var user = {
</span><span class='line'>  "user" : "master",
</span><span class='line'>  "pwd" : "abc123",
</span><span class='line'>  roles : [
</span><span class='line'>      {
</span><span class='line'>          "role" : "webSiteManagerRole",
</span><span class='line'>          "db" : "admin"
</span><span class='line'>      }
</span><span class='line'>  ]
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>db.createUser(user);
</span><span class='line'>
</span><span class='line'>exit
</span></code></pre></td></tr></table></div></figure>


<p>If you connect now with the user &ldquo;master&rdquo;, you will see that, the user:</p>

<ul>
<li>can do anything you want in the ecommerce database</li>
<li>can read the &ldquo;hr.employees&rdquo; collection, on only this</li>
<li>cannot do anything else.</li>
</ul>


<h2>Roles and Privileges</h2>

<p>As you have seen in the previous section, you can create roles, and assign privileges to these roles. This is very powerful and you can really control each action on the database.</p>

<p>I am inviting you to look in detail to the built-in roles and privileges, this will help you a lot to select the proper ones for your application:</p>

<ul>
<li><a href="http://docs.mongodb.org/manual/reference/built-in-roles/">Built-in Roles</a></li>
<li><a href="http://docs.mongodb.org/manual/reference/privilege-actions/">Privileges</a></li>
</ul>


<h2>Conclusion</h2>

<p>In this blog post I quickly explained, how to:</p>

<ul>
<li>Use MongoDB Authentication</li>
<li>Create Users</li>
<li>Assign Roles and Privileges for Users.</li>
</ul>


<p>It is interesting to know that everything that I have showed you in the shell could be done from a user interface in <a href="http://mms.mongodb.com">MMS</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Moving My Beers From Couchbase to MongoDB]]></title>
    <link href="http://tgrall.github.io/blog/2015/02/01/moving-my-beers-from-couchbase-to-mongodb/"/>
    <updated>2015-02-01T15:37:46+01:00</updated>
    <id>http://tgrall.github.io/blog/2015/02/01/moving-my-beers-from-couchbase-to-mongodb</id>
    <content type="html"><![CDATA[<p>Few days ago I have posted a <em>joke</em> on Twitter</p>

<blockquote class="twitter-tweet" lang="en"><p>Moving my Java from Couchbase to MongoDB <a href="http://t.co/Wnn3pXfMGi">pic.twitter.com/Wnn3pXfMGi</a></p>&mdash; Tugdual Grall (@tgrall) <a href="https://twitter.com/tgrall/status/559664540041117696">January 26, 2015</a></blockquote>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>So I decided to move it from a simple picture to a <em>real</em> project. Let&rsquo;s look at the two phases of this so called project:</p>

<ul>
<li>Moving the data from Couchbase to MongoDB</li>
<li>Updating the application code to use MongoDB</li>
</ul>


<p>Look at this screencast to see it in action:</p>

<iframe width="560" height="420" src="http://www.youtube.com/embed/Fpl74Z0HbC0?color=white&theme=light"></iframe>




<!-- more -->


<h2>Moving the data</h2>

<p>I have created a replication server, that uses the Couchbase XDCR protocol to get the document out and insert them into MongoDB. This server use the Couchbase CAPI Server project available <a href="https://github.com/couchbaselabs/couchbase-capi-server">here</a>.</p>

<p>This server will receive all the mutations made in the Couchbase:</p>

<ul>
<li>When a document is inserted or updated the full document is sent</li>
<li>When a document is deleted, only the medata are sent</li>
<li>The <code>replication server</code>, save the data into MongoDB (inserts and/or updates - no delete), and then return the list to Couchbase as part of the XDCR Protocol.</li>
</ul>


<p>One of the challenges is the fact Couchbase does not have the notion of &ldquo;types&rdquo; or &ldquo;collections&rdquo;. You put everything in a <em>bucket</em> and the application code knows how to deal with the data. Not necessary a problem, just a choice of implementation, but make it sometime harder than expected when you want to write tools. So here the logic that I apply in my replication server, to organize the data in multiple collections when it makes sense <em>(and when it is possible)</em>:</p>

<ul>
<li>If the JSON document does not contains a <em>type field</em>, all the documents will be saved in a single collection</li>
<li>If the JSON document contains a <em>type field</em> then a collection will be created for each type and documents will be inserted/updated in these collections</li>
<li>MongoDB does not allow attributes key to have . and $ signs, so it is necessary to change the name with alternative characters. This is done automatically during the copy of the data.</li>
</ul>


<p>All this, and more is configurable in the tool.</p>

<p>As you can see in the screencast this is straightforward.<em>(note that I have only tested very simple use cases and deployment)</em></p>

<p>You can download the tool and the source code here:</p>

<ul>
<li><a href="https://github.com/tgrall/mongodb-cb-replicator">https://github.com/tgrall/mongodb-cb-replicator</a></li>
<li>Download the <a href="http://goo.gl/WkuHBk">MongoCBReplicator.jar</a> file.</li>
</ul>


<h2>Updating the application code</h2>

<p>The next step is to use these data in an application. For this I simply use the Beer Sample Java application available on <a href="https://github.com/couchbaselabs/beersample-java">Couchbase repository</a>.</p>

<p>I just recreated the project and modified few things, to get the application up and running:</p>

<ul>
<li>Change the connection string</li>
<li>Remove the code that generate views</li>
<li>Replace set/get by MongoDB operations</li>
<li>Replace call to the views by simple queries</li>
</ul>


<p>The code of the MongoDBeer application is available here:</p>

<ul>
<li>[<a href="https://github.com/tgrall/mongodbeer">https://github.com/tgrall/mongodbeer</a>]</li>
</ul>


<p>I did not change any business logic, or added features, or even replaced the way navigation and page rendition is made. I just focused on the database access, for example :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// Couchbase Query</span>
</span><span class='line'><span class="n">View</span> <span class="n">view</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="na">getView</span><span class="o">(</span><span class="s">&quot;beer&quot;</span><span class="o">,</span> <span class="s">&quot;by_name&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="n">Query</span> <span class="n">query</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Query</span><span class="o">();</span>
</span><span class='line'>    <span class="n">query</span><span class="o">.</span><span class="na">setIncludeDocs</span><span class="o">(</span><span class="kc">true</span><span class="o">).</span><span class="na">setLimit</span><span class="o">(</span><span class="mi">20</span><span class="o">);</span>
</span><span class='line'>    <span class="n">ViewResponse</span> <span class="n">result</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="na">query</span><span class="o">(</span><span class="n">view</span><span class="o">,</span> <span class="n">query</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">HashMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;&gt;</span> <span class="n">beers</span> <span class="o">=</span>
</span><span class='line'>      <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">HashMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;&gt;();</span>
</span><span class='line'>    <span class="k">for</span><span class="o">(</span><span class="n">ViewRow</span> <span class="n">row</span> <span class="o">:</span> <span class="n">result</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">parsedDoc</span> <span class="o">=</span> <span class="n">gson</span><span class="o">.</span><span class="na">fromJson</span><span class="o">(</span>
</span><span class='line'>        <span class="o">(</span><span class="n">String</span><span class="o">)</span><span class="n">row</span><span class="o">.</span><span class="na">getDocument</span><span class="o">(),</span> <span class="n">HashMap</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">beer</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;();</span>
</span><span class='line'>      <span class="n">beer</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;id&quot;</span><span class="o">,</span> <span class="n">row</span><span class="o">.</span><span class="na">getId</span><span class="o">());</span>
</span><span class='line'>      <span class="n">beer</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;name&quot;</span><span class="o">,</span> <span class="n">parsedDoc</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;name&quot;</span><span class="o">));</span>
</span><span class='line'>      <span class="n">beer</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;brewery&quot;</span><span class="o">,</span> <span class="n">parsedDoc</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;brewery_id&quot;</span><span class="o">));</span>
</span><span class='line'>      <span class="n">beers</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">beer</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="n">request</span><span class="o">.</span><span class="na">setAttribute</span><span class="o">(</span><span class="s">&quot;beers&quot;</span><span class="o">,</span> <span class="n">beers</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1">// MongoDB Query</span>
</span><span class='line'><span class="n">DBCursor</span> <span class="n">cursor</span> <span class="o">=</span> <span class="n">db</span><span class="o">.</span><span class="na">getCollection</span><span class="o">(</span><span class="s">&quot;beer&quot;</span><span class="o">).</span><span class="na">find</span><span class="o">()</span>
</span><span class='line'>                                                   <span class="o">.</span><span class="na">sort</span><span class="o">(</span> <span class="n">BasicDBObjectBuilder</span><span class="o">.</span><span class="na">start</span><span class="o">(</span><span class="s">&quot;name&quot;</span><span class="o">,</span><span class="mi">1</span><span class="o">).</span><span class="na">get</span><span class="o">()</span> <span class="o">)</span>
</span><span class='line'>                                                   <span class="o">.</span><span class="na">limit</span><span class="o">(</span><span class="mi">20</span><span class="o">);</span>
</span><span class='line'>     <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">HashMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;&gt;</span> <span class="n">beers</span> <span class="o">=</span>
</span><span class='line'>             <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">HashMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;&gt;();</span>
</span><span class='line'>     <span class="k">while</span> <span class="o">(</span><span class="n">cursor</span><span class="o">.</span><span class="na">hasNext</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>         <span class="n">DBObject</span> <span class="n">row</span> <span class="o">=</span> <span class="n">cursor</span><span class="o">.</span><span class="na">next</span><span class="o">();</span>
</span><span class='line'>         <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">beer</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;();</span>
</span><span class='line'>         <span class="n">beer</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;id&quot;</span><span class="o">,</span> <span class="o">(</span><span class="n">String</span><span class="o">)</span><span class="n">row</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;_id&quot;</span><span class="o">));</span>
</span><span class='line'>         <span class="n">beer</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;name&quot;</span><span class="o">,</span> <span class="o">(</span><span class="n">String</span><span class="o">)</span><span class="n">row</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;name&quot;</span><span class="o">));</span>
</span><span class='line'>         <span class="n">beer</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;brewery&quot;</span><span class="o">,</span> <span class="o">(</span><span class="n">String</span><span class="o">)</span><span class="n">row</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;brewery_id&quot;</span><span class="o">));</span>
</span><span class='line'>         <span class="n">beers</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">beer</span><span class="o">);</span>
</span><span class='line'>     <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1">// Couchbase update</span>
</span><span class='line'><span class="n">client</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="n">beerId</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">gson</span><span class="o">.</span><span class="na">toJson</span><span class="o">(</span><span class="n">beer</span><span class="o">));</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// MongoDB update</span>
</span><span class='line'><span class="n">db</span><span class="o">.</span><span class="na">getCollection</span><span class="o">(</span><span class="s">&quot;beer&quot;</span><span class="o">).</span><span class="na">save</span><span class="o">(</span><span class="k">new</span> <span class="nf">BasicDBObject</span><span class="o">(</span><span class="n">beer</span><span class="o">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>I did not attend to optimize the MongoDB code,  but just to replace as few lines of code as possible.</p>

<p>Note: I have not created any index during the process. Obviously if your application have more and more data and you do intense work with it you must analyze your application/queries to see which indexes must be created.</p>

<h2>Adding new features</h2>

<p>Once you have the data into MongoDB you can do a lot more without anything more than MongoDB:</p>

<h4>Full Text Search</h4>

<p>You can create a Text index on various fields in the collection to provide advanced search capabilities to your users.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="err">db.brewery.ensureIndex(</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;name&quot;</span> <span class="p">:</span> <span class="s2">&quot;text&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;description&quot;</span> <span class="p">:</span> <span class="s2">&quot;text&quot;</span>
</span><span class='line'>  <span class="p">}</span><span class="err">,</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;weights&quot;</span> <span class="p">:</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="nt">&quot;name&quot;</span> <span class="p">:</span> <span class="mi">10</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;description&quot;</span> <span class="p">:</span> <span class="mi">5</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nt">&quot;name&quot;</span> <span class="p">:</span> <span class="s2">&quot;TextIndex&quot;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="err">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then you can query the database using the <code>$text</code> operation, for example all breweries with <em>Belgium</em> and without <em>Ale</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="err">db.brewery.find(</span> <span class="p">{</span> <span class="nt">&quot;$text&quot;</span> <span class="p">:</span> <span class="p">{</span> <span class="nt">&quot;$search&quot;</span> <span class="p">:</span> <span class="s2">&quot;belgium -ale&quot;</span> <span class="p">}</span>   <span class="p">}</span>  <span class="err">,</span> <span class="p">{</span> <span class="nt">&quot;name&quot;</span> <span class="p">:</span> <span class="mi">1</span>  <span class="p">}</span> <span class="err">);</span>
</span><span class='line'><span class="p">{</span> <span class="nt">&quot;_id&quot;</span> <span class="p">:</span> <span class="s2">&quot;daas&quot;</span><span class="p">,</span> <span class="nt">&quot;name&quot;</span> <span class="p">:</span> <span class="s2">&quot;Daas&quot;</span> <span class="p">}</span>
</span><span class='line'><span class="p">{</span> <span class="nt">&quot;_id&quot;</span> <span class="p">:</span> <span class="s2">&quot;chimay_abbaye_notre_dame_de_scourmont&quot;</span><span class="p">,</span> <span class="nt">&quot;name&quot;</span> <span class="p">:</span> <span class="s2">&quot;Chimay (Abbaye Notre Dame de Scourmont)&quot;</span> <span class="p">}</span>
</span><span class='line'><span class="p">{</span> <span class="nt">&quot;_id&quot;</span> <span class="p">:</span> <span class="s2">&quot;brasserie_de_cazeau&quot;</span><span class="p">,</span> <span class="nt">&quot;name&quot;</span> <span class="p">:</span> <span class="s2">&quot;Brasserie de Cazeau&quot;</span> <span class="p">}</span>
</span><span class='line'><span class="p">{</span> <span class="nt">&quot;_id&quot;</span> <span class="p">:</span> <span class="s2">&quot;inbev&quot;</span><span class="p">,</span> <span class="nt">&quot;name&quot;</span> <span class="p">:</span> <span class="s2">&quot;InBev&quot;</span> <span class="p">}</span>
</span><span class='line'><span class="p">{</span> <span class="nt">&quot;_id&quot;</span> <span class="p">:</span> <span class="s2">&quot;new_belgium_brewing&quot;</span><span class="p">,</span> <span class="nt">&quot;name&quot;</span> <span class="p">:</span> <span class="s2">&quot;New Belgium Brewing&quot;</span> <span class="p">}</span>
</span><span class='line'><span class="p">{</span> <span class="nt">&quot;_id&quot;</span> <span class="p">:</span> <span class="s2">&quot;palm_breweries&quot;</span><span class="p">,</span> <span class="nt">&quot;name&quot;</span> <span class="p">:</span> <span class="s2">&quot;Palm Breweries&quot;</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Some analytics</h4>

<p>Not sure these queries really make sense, but it is just to show that now you can leverage your documents without the need of any 3rd party tool.</p>

<p>Number of beer by category, from the most common to the less one:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="err">db.beer.aggregate(</span><span class="p">[</span>
</span><span class='line'>  <span class="p">{</span><span class="nt">&quot;$group&quot;</span> <span class="p">:</span> <span class="p">{</span> <span class="nt">&quot;_id&quot;</span> <span class="p">:</span> <span class="s2">&quot;$category&quot;</span><span class="p">,</span><span class="nt">&quot;count&quot;</span> <span class="p">:</span> <span class="p">{</span><span class="nt">&quot;$sum&quot;</span> <span class="p">:</span> <span class="mi">1</span> <span class="p">}</span> <span class="p">}</span> <span class="p">},</span>
</span><span class='line'>  <span class="p">{</span><span class="nt">&quot;$sort&quot;</span> <span class="p">:</span> <span class="p">{</span> <span class="nt">&quot;count&quot;</span> <span class="p">:</span> <span class="mi">-1</span> <span class="p">}</span> <span class="p">},</span>
</span><span class='line'>  <span class="p">{</span><span class="nt">&quot;$project&quot;</span> <span class="p">:</span> <span class="p">{</span>  <span class="nt">&quot;category&quot;</span> <span class="p">:</span> <span class="s2">&quot;$_id&quot;</span><span class="p">,</span> <span class="nt">&quot;count&quot;</span> <span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="nt">&quot;_id&quot;</span> <span class="p">:</span> <span class="mi">0</span> <span class="p">}</span> <span class="p">}</span>
</span><span class='line'><span class="p">]</span><span class="err">);</span>
</span><span class='line'>
</span><span class='line'><span class="p">{</span> <span class="nt">&quot;count&quot;</span> <span class="p">:</span> <span class="mi">1996</span><span class="p">,</span> <span class="nt">&quot;category&quot;</span> <span class="p">:</span> <span class="s2">&quot;North American Ale&quot;</span> <span class="p">}</span>
</span><span class='line'><span class="p">{</span> <span class="nt">&quot;count&quot;</span> <span class="p">:</span> <span class="mi">1468</span><span class="p">,</span> <span class="nt">&quot;category&quot;</span> <span class="p">:</span> <span class="kc">null</span> <span class="p">}</span>
</span><span class='line'><span class="p">{</span> <span class="nt">&quot;count&quot;</span> <span class="p">:</span> <span class="mi">564</span><span class="p">,</span> <span class="nt">&quot;category&quot;</span> <span class="p">:</span> <span class="s2">&quot;North American Lager&quot;</span> <span class="p">}</span>
</span><span class='line'><span class="p">{</span> <span class="nt">&quot;count&quot;</span> <span class="p">:</span> <span class="mi">441</span><span class="p">,</span> <span class="nt">&quot;category&quot;</span> <span class="p">:</span> <span class="s2">&quot;German Lager&quot;</span> <span class="p">}</span>
</span><span class='line'><span class="err">...</span>
</span><span class='line'><span class="err">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>Number of beer of a specific ABV by brewery, for example: top 3 breweries with the most beer with an abv greather or equals to a value, let&rsquo;s say 5:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="err">db.beer.aggregate(</span><span class="p">[</span>
</span><span class='line'><span class="err">...</span> <span class="p">{</span> <span class="nt">&quot;$match&quot;</span> <span class="p">:</span> <span class="p">{</span> <span class="nt">&quot;abv&quot;</span> <span class="p">:</span> <span class="p">{</span> <span class="nt">&quot;$gte&quot;</span> <span class="p">:</span> <span class="mi">5</span> <span class="p">}</span>  <span class="p">}</span> <span class="p">},</span>
</span><span class='line'><span class="err">...</span> <span class="p">{</span> <span class="nt">&quot;$group&quot;</span> <span class="p">:</span> <span class="p">{</span> <span class="nt">&quot;_id&quot;</span> <span class="p">:</span> <span class="s2">&quot;$brewery_id&quot;</span><span class="p">,</span> <span class="nt">&quot;count&quot;</span> <span class="p">:</span> <span class="p">{</span> <span class="nt">&quot;$sum&quot;</span> <span class="p">:</span> <span class="mi">1</span><span class="p">}</span> <span class="p">}},</span>
</span><span class='line'><span class="err">...</span> <span class="p">{</span> <span class="nt">&quot;$sort&quot;</span> <span class="p">:</span> <span class="p">{</span> <span class="nt">&quot;count&quot;</span> <span class="p">:</span> <span class="mi">-1</span> <span class="p">}</span> <span class="p">},</span>
</span><span class='line'><span class="err">...</span> <span class="p">{</span> <span class="nt">&quot;$limit&quot;</span> <span class="p">:</span> <span class="mi">3</span> <span class="p">}</span>
</span><span class='line'><span class="err">...</span> <span class="p">]</span><span class="err">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">{</span> <span class="nt">&quot;_id&quot;</span> <span class="p">:</span> <span class="s2">&quot;midnight_sun_brewing_co&quot;</span><span class="p">,</span> <span class="nt">&quot;count&quot;</span> <span class="p">:</span> <span class="mi">53</span> <span class="p">}</span>
</span><span class='line'><span class="p">{</span> <span class="nt">&quot;_id&quot;</span> <span class="p">:</span> <span class="s2">&quot;troegs_brewing&quot;</span><span class="p">,</span> <span class="nt">&quot;count&quot;</span> <span class="p">:</span> <span class="mi">33</span> <span class="p">}</span>
</span><span class='line'><span class="p">{</span> <span class="nt">&quot;_id&quot;</span> <span class="p">:</span> <span class="s2">&quot;rogue_ales&quot;</span><span class="p">,</span> <span class="nt">&quot;count&quot;</span> <span class="p">:</span> <span class="mi">31</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Geospatial queries</h4>

<p>The first thing to do with the data is to change the data structure to save the various data into a GeoJSON format, for this we can simply use a script into the MongoDB Shell:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="err">&gt;mongo</span>
</span><span class='line'>
</span><span class='line'><span class="err">use</span> <span class="err">beers</span>
</span><span class='line'>
</span><span class='line'><span class="err">db.brewery.find().forEach(</span>
</span><span class='line'>  <span class="err">function(</span> <span class="err">doc</span> <span class="err">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="err">var</span> <span class="err">loc</span> <span class="err">=</span> <span class="err">{</span> <span class="err">type</span> <span class="err">:</span> <span class="nt">&quot;Point&quot;</span> <span class="p">}</span><span class="err">;</span>
</span><span class='line'>    <span class="err">if</span> <span class="err">(doc.geo</span> <span class="err">&amp;&amp;</span> <span class="err">doc.geo.lat</span> <span class="err">&amp;&amp;</span> <span class="err">doc.geo.lon)</span> <span class="p">{</span>
</span><span class='line'>      <span class="err">loc.coordinates</span> <span class="err">=</span> <span class="err">[</span> <span class="err">doc.geo.lon</span> <span class="err">,</span> <span class="err">doc.geo.lat</span>  <span class="err">];</span>
</span><span class='line'>      <span class="err">db.brewery.update(</span> <span class="err">{</span> <span class="err">_id</span> <span class="err">:</span> <span class="err">doc._id</span> <span class="p">}</span> <span class="err">,</span> <span class="p">{</span><span class="err">$set</span> <span class="err">:</span> <span class="err">{</span> <span class="err">loc</span> <span class="err">:</span> <span class="err">loc</span> <span class="p">}</span> <span class="err">}</span>  <span class="err">);</span>
</span><span class='line'>    <span class="err">}</span>
</span><span class='line'>  <span class="err">}</span>
</span><span class='line'><span class="err">);</span>
</span><span class='line'>
</span><span class='line'><span class="err">db.brewery.ensureIndex(</span> <span class="p">{</span> <span class="nt">&quot;loc&quot;</span> <span class="p">:</span> <span class="s2">&quot;2dsphere&quot;</span> <span class="p">}</span> <span class="err">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>This call take all the breweries and add a new attribute, name <code>loc</code> as a GeoJSON point. I could also chose to remove the old geo information using a &lsquo;$unset&rsquo;, but I did not; let&rsquo;s imagine that some API/applications are using it. This is a good example of flexible schema.</p>

<p>Now I can search for all the brewery that are at less than 30km from the Golden Gate in San Francisco: [-122.478255,37.819929]</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="err">db.brewery.find(</span>
</span><span class='line'>  <span class="p">{</span> <span class="nt">&quot;loc&quot;</span> <span class="p">:</span>
</span><span class='line'>    <span class="p">{</span> <span class="nt">&quot;$near&quot;</span> <span class="p">:</span>
</span><span class='line'>      <span class="p">{</span> <span class="nt">&quot;$geometry&quot;</span> <span class="p">:</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>          <span class="nt">&quot;type&quot;</span> <span class="p">:</span> <span class="s2">&quot;Point&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="nt">&quot;coordinates&quot;</span> <span class="p">:</span> <span class="p">[</span><span class="mf">-122.478255</span><span class="p">,</span><span class="mf">37.819929</span><span class="p">]</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="nt">&quot;$maxDistance&quot;</span> <span class="p">:</span> <span class="mi">20000</span>
</span><span class='line'>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="err">,</span> <span class="p">{</span> <span class="err">name</span> <span class="err">:</span> <span class="err">1</span> <span class="p">}</span>
</span><span class='line'><span class="err">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can also use Geospatial indexes and operators in the aggregation queries used above</p>

<h2>Conclusion</h2>

<p>As as said in the introduction, this week end project started as a joke on Twitter, and finished with a small blog post and Gitub repositories.</p>

<p>My goal here is not to compare the two solutions -I made my choice few months back-  but simply show how you can move from one to the other with almost no effort, not only the data but also the application code.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Everybody Says “Hackathon”!]]></title>
    <link href="http://tgrall.github.io/blog/2015/01/23/everybody-says-hackathon/"/>
    <updated>2015-01-23T10:54:20+01:00</updated>
    <id>http://tgrall.github.io/blog/2015/01/23/everybody-says-hackathon</id>
    <content type="html"><![CDATA[<h4>TLTR:</h4>

<ul>
<li>MongoDB &amp; Sage organized an internal Hackathon</li>
<li>We use the new X3 Platform based on MongoDB, Node.js and HTML to add cool features  to the ERP</li>
<li>This shows that “any” enterprise can (should) do it to:

<ul>
<li>look differently at software development</li>
<li>build strong team spirit</li>
<li>have fun!</li>
</ul>
</li>
</ul>


<h3>Introduction</h3>

<p>I have like many of you participated to multiple Hackathons where developers, designer and entrepreneurs are working together to build applications in few hours/days. As you probably know more and more companies are running such events internally, it is the case for example at Facebook, Google, but also ING (bank), AXA (Insurance), and many more.</p>

<p>Last week, I have participated to the first Sage Hackathon!</p>

<p>In case you do not know Sage is a 30+ years old ERP vendor. I have to say that I could not imagine that coming from such company… Let me tell me more about it.</p>

<p><img class="center" src="http://tgrall.github.io/images/posts/everybody-says-hackathon/00-logo.png"></p>

<!-- more -->


<h3>Sage Hackathon</h3>

<h5>How did it start?</h5>

<p>I have met the development team few months back when I learned that Sage was using MongoDB. We discussed about use cases, architecture,&hellip; And this is when I was the most surprised! The new version of Sage ERP X3 is a mix of legacy components (RDBMS, C++ based proprietary middleware), and brand new layer based on Node.js, MongoDB and HTML/CSS/JS (AngularJS like). The Sage team has open sourced some of the JS libraries, see <a href="https://github.com/sage">https://github.com/sage</a> Pretty cool isn’t?</p>

<p>I was really excited to see how MongoDB and Node.js are used by Sage modernize the ERP. So I asked more and more questions about the product, looked at some demonstrations. This leads to a broader discussion to see how we can use this new architecture to develop more features using it.</p>

<p>This is how we started to talk about an internal hackathon. Everybody, developers, marketing and managers were very excited about the idea.</p>

<h5>Hackathon Preparation</h5>

<p>Sage and MongoDB teams worked together to organize the event, with the following constraints:</p>

<ul>
<li>The hackathon will be a 24h (noon to noon) event, to allow Sage management to have corporate meetings before and after the event,</li>
<li>40 persons limit - 6 teams max - with a mix of developers, designer, product owner, quality engineer, … (coming from various countries),</li>
<li>The event will occur offsite to <em>daily duty noise</em></li>
</ul>


<p>Also since the hackathon will be short, 24h!, we decided to propose in advance many subjects and teams. This to be able to focus on the implementation on D-Day and avoid &ldquo;team and project&rdquo; selection.</p>

<p>So we define a list of 6 ideas that would extend the ERP in a cool way, for example: notification platform, collaboration feature such as business discussion, caching layer with query capabilities, office tool integration, plug social network like LinkedIn and Twitter to ERP business objects,&hellip;</p>

<p>Once we had a good vision of the event, Sage marketing and product management organized an internal presentation to announce the event, and ask for more ideas. We were all surprised to see so many ideas coming out of this presentation!</p>

<h5>Let&rsquo;s code!</h5>

<p>So we all met at the location, a very nice conference center, <a href="http://www.les-fontaines.com/">Les Fontaines</a>, where fresh coffee was waiting for us!</p>

<p>The event started with a very short presentation of the teams, projects, and jury.</p>

<p><img class="center" src="http://tgrall.github.io/images/posts/everybody-says-hackathon/01-sage-hack-intro.png" title="Presentation" ></p>

<p>Quickly the teams started to draw things on whiteboard, discuss architecture, and design&hellip; The organizers, included myself, were
very happy to see that everybody was diving into it.</p>

<p><img src="http://tgrall.github.io/images/posts/everybody-says-hackathon/02-team-work.png" title="Team Work" > <img src="http://tgrall.github.io/images/posts/everybody-says-hackathon/03-motto.png"></p>

<p>MongoDB (<a href="http://twitter.com/alainhelaili">Alain</a> and I), and Sage architects were here to help; so we did. I pushed hard to be sure all the teams start to develop, design
as early as possible. I also gave many advices around document design and other things around MongoDB and node.</p>

<p>In the evening we stopped for a nice dinner, this is the big difference between a startup event, and a corporate one, good wine, soup, duck confit, wine, and fantastic desserts. Yummy!</p>

<p>Let&rsquo;s go back to the code thing, so all the teams were working like crazy on their project. I had lot of interesting discussions with all of them.</p>

<p><img src="http://tgrall.github.io/images/posts/everybody-says-hackathon/04-night-coding.png" title="Night Coding" > <img src="http://tgrall.github.io/images/posts/everybody-says-hackathon/05-night-coding.png" title="Night Coding" ></p>

<p>I went to bed at 11:30pm, <em>yeah, I am a loser!</em>, while everybody was still working.</p>

<p><img src="http://tgrall.github.io/images/posts/everybody-says-hackathon/06-night-coding.png" title="Night Coding" ><img src="http://tgrall.github.io/images/posts/everybody-says-hackathon/07-night-coding.png" title="Night Coding" ></p>

<p>I as back in the <em>war room</em> around 6:00am, and helped some team to finish their project.</p>

<p>All the teams used the morning to polish the feature and prepare the demonstration.</p>

<h5>Let&rsquo;s vote!</h5>

<p>At noon each team started to demonstrate their feature in 5mn. All the teams did a live demonstration, with the feature well integrated to the Sage X3 screens.
It was really cool. A team even created a small video clip to explain the feature and vision.</p>

<p><img src="http://tgrall.github.io/images/posts/everybody-says-hackathon/08-demonstration.png"> <img src="http://tgrall.github.io/images/posts/everybody-says-hackathon/10-demonstration.png"> <img src="http://tgrall.github.io/images/posts/everybody-says-hackathon/11-demonstration.png"> <img src="http://tgrall.github.io/images/posts/everybody-says-hackathon/12-demonstration.png"> <img src="http://tgrall.github.io/images/posts/everybody-says-hackathon/13-demonstration.png"> <img src="http://tgrall.github.io/images/posts/everybody-says-hackathon/14-demonstration.png"> <img src="http://tgrall.github.io/images/posts/everybody-says-hackathon/15-demonstration.png"> <img src="http://tgrall.github.io/images/posts/everybody-says-hackathon/09-demonstration.png"></p>

<p>It was very hard to chose a winner, but we agreed on a very rich and promising notification platform.</p>

<h5>What&rsquo;s next?</h5>

<p>It was really nice for me to see the excitement of all the teams, and the pride of being able to develop something that fast!</p>

<p>I cannot talk for Sage, but I think they all realize something: they can do stuff a lot faster, and this should try to push this into the product now!
It is also a good opportunity to see how to developer and deliver new addons for X3.</p>

<p>On my side, I am very happy of the result, and see that MongoDB and new technologies can really change the way we work with our data. And I hope to be able to do that again
with other companies.</p>

<h3>What about you?</h3>

<p>I believe that any organization that has an IT/Development team should organize such event, for example every year.</p>

<p>Honestly, we can &ldquo;stop&rdquo; working on our daily duties for 1,2 or 3 days and do this. If you look at your agenda, I am sure that you have wasted
more time on none productive meetings; remember :</p>

<blockquote><p>If a picture is worth 1000 words</p>

<p>A prototype is worth 1000 meetings!</p></blockquote>

<p>by @ideo</p>

<p>You will be surprised to see what can be done when you let the passionate people do what they love, but also it will be a good opportunity to motivate your team.</p>

<p>I will be pleased to discuss that you will, so feel free to drop me a comment.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Nantes MUG : Event #2]]></title>
    <link href="http://tgrall.github.io/blog/2015/01/21/nantes-mug-event-number-2/"/>
    <updated>2015-01-21T07:18:06+01:00</updated>
    <id>http://tgrall.github.io/blog/2015/01/21/nantes-mug-event-number-2</id>
    <content type="html"><![CDATA[<p><a href="http://www.meetup.com/Nantes-MongoDB-User-Group/events/218926859/">Last night</a> the Nantes MUG (<a href="http://www.mongodb.org/user-groups">MongoDB Users Group</a>) had its second event. More than 45 people signed up and joined us at the <a href="http://www.epitech.eu/nantes/ecole-informatique-nantes.aspx">Epitech schoo</a>l (thanks for this!). &nbsp;We were lucky to have 2 talks from local community members:</p>

<ul>
<li>How “MyScript Cloud” uses MongoDB by <a href="https://twitter.com/mathieuruellan">Mathieu Ruellan</a></li>
<li>Aggregation Framework by <a href="https://twitter.com/sebprunier">Sebastien Prunier</a></li>
</ul>


<!-- more -->


<h3>How “MyScript Cloud” uses MongoDB</h3>

<p>First of all, if you do not know <a href="http://myscript.com/">MyScript</a>&nbsp;I invite you to play with the <a href="http://webdemo.myscript.com/#/home">online demonstration</a>.&nbsp;I am pretty sure that you are already using this technology without noticing it, since it is embedded in many devices/applications including: your car look at the <a href="http://vimeo.com/49013364">Audi Touchpad</a>!</p>

<p>That said Mathieu was not here to talk about the cool features and applications of MyScript but to explain how MongoDB is used to run their cloud product.&nbsp;
Mathieu explained how you can use <a href="https://dev.myscript.com/dev-kits/cloud-development-kit/">MyScript SDK</a> online. You just need to call a REST API to add Handwriting Recognition to your application. Let&rsquo;s make the long story short, and see how MongoDB was chosen and how it is used today:</p>

<ul>
<li>The prototype was done with a single RDBMS instance</li>
<li>With the success of the project MyScript Cloud the team had to move to a more flexible solution:

<ul>
<li>Flexible schema to support heterogeneous structures,</li>
<li>Highly available solution with automatic failover,</li>
<li>Multi datacenter supports with localized read,</li>
</ul>
</li>
<li>This is when Mathieu looked at different solution and selected MongoDB and deployed it on AWS.</li>
</ul>


<p>Mathieu highlighted the following points:</p>

<ul>
<li>Deploy and Manage a Replica Set is really easy, and it is done on multiple AWS data centers,</li>
<li>Use the proper <a href="http://docs.mongodb.org/manual/core/read-preference/">read preference</a>&nbsp; (nearest in this case) to deliver the data as fast as possible,</li>
<li>Develop with JSON Documents provides lot of flexibility to the developers, that can add new features faster.</li>
</ul>


<p><img class="center" src="http://4.bp.blogspot.com/-AWHn75hAyBY/VL9EMpRrFVI/AAAAAAAAAwA/CrDMkKL5A1Y/s1600/IMG_3743.jpg"></p>

<iframe src="http://www.slideshare.net/slideshow/embed_code/43741214 " width="595" height="446" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC;border-width:1px 1px 0;margin-bottom:5px" allowfullscreen></iframe>


<p></p>

<h3>Aggregation Framework</h3>

<p>Sebastien &ldquo;Seb&rdquo; is software engineering at SERLI and working with MongoDB for more than 2 years now. Seb introduced the reasons why aggregations are needed in applications and the various ways of doing it with <a href="http://docs.mongodb.org/manual/aggregation/">MongoDB</a>: simple queries, map reduce, and aggregation pipeline; with a focus on a Aggregation Pipeline.</p>

<p>Using cool demonstrations, Seb explained in a step by step approach the key features and capabilities of MongoDB <a href="http://docs.mongodb.org/manual/core/aggregation-pipeline/">Aggregation Pipeline</a>:</p>

<ul>
<li>$match, $group, &hellip;</li>
<li>$unwind arrays</li>
<li>$sort and $limit</li>
<li>$geonear</li>
</ul>


<p>To close his presentation, Seb talked about aggregation best practices, and behavior&nbsp;<a href="http://docs.mongodb.org/manual/core/aggregation-pipeline-sharded-collections/#aggregation-pipeline-sharded-collection">in a sharded cluster</a>.</p>

<p><img class="center" src="http://4.bp.blogspot.com/-1fK-Q5SmL4s/VL9EQiaUIvI/AAAAAAAAAwI/AMVYrmQDPVg/s1600/IMG_3745.jpg"></p>

<iframe src="http://www.slideshare.net/slideshow/embed_code/43730356 " width="595" height="446" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC;border-width:1px 1px 0;margin-bottom:5px" allowfullscreen></iframe>


<p></p>

<h3>And&hellip;</h3>

<p>As usual the event ended with some drinks and a late dinner!</p>

<p>This event was really great and I am very happy to see what people are doing with MongoDB, including storing <em>ink</em> like MyScript, thanks again to the speakers!</p>

<p>This brings me to the last point : MUGs are driven by the community. You are using MongoDB and want to talk about what you, do not hesitate to reach out the organizers they will be more than happy to have you.</p>

<p>You can find a MUG near you, <a href="http://www.mongodb.org/user-groups">look here</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Create a Pub/sub Application With MongoDB ? Introduction]]></title>
    <link href="http://tgrall.github.io/blog/2015/01/12/how-to-create-a-pub-slash-sub-application-with-mongodb-introduction/"/>
    <updated>2015-01-12T09:21:03+01:00</updated>
    <id>http://tgrall.github.io/blog/2015/01/12/how-to-create-a-pub-slash-sub-application-with-mongodb-introduction</id>
    <content type="html"><![CDATA[<p>In this article we will see how to create a pub/sub application (messaging, chat, notification), and this fully based on MongoDB (without any message broker like RabbitMQ, JMS, &hellip; ).</p>

<p>So, what needs to be done to achieve such thing:</p>

<ul>
<li>an application &ldquo;publish&rdquo; a message. In our case, we simply save a document into MongoDB</li>
<li>another application, or thread, subscribe to these events and will received message automatically. In our case this means that the application should automatically receive newly created document out of MongoDB</li>
</ul>


<p>All this is possible with some very cool MongoDB features: <a href="http://docs.mongodb.org/manual/core/capped-collections/">capped collections</a> and <a href="http://docs.mongodb.org/manual/tutorial/create-tailable-cursor/">tailable cursors</a>,</p>

<!-- more -->


<h2>Collections and Tailable Cursors</h2>

<p>As you can see in the documentation, Capped Collections are fixed sized collections, that work in a way similar to circular buffers: once a collection fills its allocated space, it makes room for new documents by overwriting the oldest documents.</p>

<p>MongoDB Capped Collections can be queried using Tailable Cursors, that are similar to the unix <code>tail -f</code> command. Your application continue to retrieve documents as they are inserted into the collection. I also like to call this a &ldquo;continuous query&rdquo;.</p>

<p>Now that we have seen the basics, let&rsquo;s implement it.</p>

<h2>Building a very basic application</h2>

<h4>Create the collection</h4>

<p>The first thing to do is to create a new capped collection:</p>

<div><script src='https://gist.github.com/f16b1d3b5bcc12a4270a.js?file=capped-collection'></script>
<noscript><pre><code>$&gt; mongo

use chat

db.messages.drop()

db.createCollection(&#39;messages&#39;, { capped: true, size: 10000 })

db.messages.insert({&quot;type&quot;:&quot;init&quot;});

</code></pre></noscript></div>


<p>For simplicity, I am using the MongoDB Shell to create the <code>messages</code> collection in the <code>chat</code> database.</p>

<p>You can see on line #7 how to create a capped collection, with 2 options:</p>

<ul>
<li><code>capped : true</code> : this one is obvious</li>
<li><code>size : 10000</code> : this is a mandatory option when you create a capped collection. This is the maximum size in bytes. (will be raised to a multiple of 256)</li>
</ul>


<p>Finally, on line #9, I insert a dummy document, this is also mandatory to be able to get the tailable cursor to work.</p>

<h4>Write an application</h4>

<p>Now that we have the collection, let&rsquo;s write some code. First in <em>node.js</em>:</p>

<div><script src='https://gist.github.com/f16b1d3b5bcc12a4270a.js?file=app.js'></script>
<noscript><pre><code>var mongo = require(&quot;mongodb&quot;);

var mongodbUri = &quot;mongodb://127.0.0.1/chat&quot;;

mongo.MongoClient.connect (mongodbUri, function (err, db) {

  db.collection(&#39;messages&#39;, function(err, collection) {
    // open a tailable cursor
    console.log(&quot;== open tailable cursor&quot;);
    collection.find({}, {tailable:true, awaitdata:true, numberOfRetries:-1})
                      .sort({ $natural: 1 })
                      .each(function(err, doc) {
      console.log(doc);
    })
  });

});</code></pre></noscript></div>


<p>From lines #1 to 5 I just connect to my local mongoDB instance.</p>

<p>Then on line #7, I get the <code>messages</code> collection.</p>

<p>And on line #10, I execute a find, using a tailable cursor, using specific options:</p>

<ul>
<li><code>{}</code> : no filter, so all documents will be returned</span></li></li>
<li><code>tailable : true</code> : this one is clear, to say that we want to create a tailable cursor</li>
<li><code>awaitdata : true</code> : to say that we wait for data before returning no data to the client</li>
<li><code>numberOfRetries : -1</code> : The number of times to retry on time out, -1 is infinite, so the application will keep trying</li>
</ul>


<p>Line #11 just force the sort to the natural order.</p>

<p>Then on line #12, the cursor returns the data, and the document is printed in the console each time it is inserted.</p>

<h4>Test the Application</h4>

<p>Start the application</p>

<p><code>node app.js</code></p>

<p>Insert documents in the messages collection, from the shell or any other tool.</p>

<p>You can find below a screencast showing this very basic application working:</p>

<iframe width="560" height="420" src="http://www.youtube.com/embed/uSuiYvssKuo?color=white&theme=light"></iframe>


<p>The source code of this sample application in this Github repository, take the step-01 branch; clone this branch using:</p>

<p><code>git clone -b step-01 https://github.com/tgrall/mongodb-realtime-pubsub.git</code></p>

<p>I have also created a gist showing the same behavior in <em>Java</em>:</p>

<div><script src='https://gist.github.com/f16b1d3b5bcc12a4270a.js?file=MyApp.java'></script>
<noscript><pre><code>package org.mongodb.demos.tailable;

import com.mongodb.*;

public class MyApp {

    public static void main(String[] args) throws Exception {

        MongoClient mongoClient = new MongoClient();
        DBCollection coll = mongoClient.getDB(&quot;chat&quot;).getCollection(&quot;messages&quot;);

        DBCursor cur = coll.find().sort(BasicDBObjectBuilder.start(&quot;$natural&quot;, 1).get())
                .addOption(Bytes.QUERYOPTION_TAILABLE | Bytes.QUERYOPTION_AWAITDATA);

        System.out.println(&quot;== open cursor ==&quot;);

        Runnable task = () -&gt; {
            System.out.println(&quot;\tWaiting for events&quot;);
            while (cur.hasNext()) {
                DBObject obj = cur.next();
                System.out.println( obj );

            }
        };
        new Thread(task).start();
        
    }
    
}</code></pre></noscript></div>


<p>Mathieu Ancelin has written it in <em>Scala</em>:</p>

<div><script src='https://gist.github.com/f16b1d3b5bcc12a4270a.js?file=App.scala'></script>
<noscript><pre><code>package org.mongodb.demos.tailable

import reactivemongo.api._
import reactivemongo.bson._
import play.api.libs.iteratee.Iteratee
import scala.concurrent.ExecutionContext.Implicits.global
import reactivemongo.api.collections.default.BSONCollection

object Capped extends App {

  val driver = new MongoDriver
  val connection = driver.connection(List(&quot;localhost&quot;))
  val db = connection(&quot;chat&quot;)
  val collection = db.collection[BSONCollection](&quot;messages&quot;)

  val cursor = collection
        .find(BSONDocument())
          .options(QueryOpts().tailable.awaitData)
            .cursor[BSONDocument]

  println(&quot;== open tailable cursor&quot;)
  
  cursor.enumerate().apply(Iteratee.foreach { doc =&gt;
    println(s&quot;Document inserted: ${BSONDocument.pretty(doc)}&quot;)
  })
}</code></pre></noscript></div>


<h3>Add some user interface</h3>

<p>We have the basics of a publish subscribe based application:</p>

<ul>
<li>publish by inserting document into MongoDB</li>
<li>subscribe by reading document using a tailable cursor</li>
</ul>


<p>Let&rsquo;s now push the messages to a user using for example socket.io. For this we need to:</p>

<ul>
<li>add socket.io dependency to our node project</li>
<li>add HTML page to show messages</li>
</ul>


<p>The following gists shows the updated version of the app.js and index.html, let&rsquo;s take a look:</p>

<div><script src='https://gist.github.com/d8c2acfdc416abcc5d18.js?file=app.js'></script>
<noscript><pre><code>&quot;use strict&quot;;

var mongo = require(&quot;mongodb&quot;),
    fs = require(&quot;fs&quot;),         // to read static files
    io = require(&quot;socket.io&quot;),  // socket io server
    http = require(&quot;http&quot;);

var mongodbUri = &quot;mongodb://127.0.0.1/chat&quot;;

var app = http.createServer(handler);
io = io.listen(app);
app.listen(3000);
console.log(&quot;http server on port 3000&quot;);

function handler(req, res){
  fs.readFile(__dirname + &quot;/index.html&quot;,
  function (err, data) {
    res.writeHead(200);
    res.end(data);
  });
}

mongo.MongoClient.connect (mongodbUri, function (err, db) {

  db.collection(&#39;messages&#39;, function(err, collection) {

    // open socket
    io.sockets.on(&quot;connection&quot;, function (socket) {
      // open a tailable cursor
      console.log(&quot;== open tailable cursor&quot;);
      collection.find({}, {tailable:true, awaitdata:true, numberOfRetries:-1}).sort({ $natural: 1 }).each(function(err, doc) {
        console.log(doc);
        // send message to client
        if (doc.type == &quot;message&quot;) {
          socket.emit(&quot;message&quot;,doc);
        }
      })

    });

  });

});
</code></pre></noscript></div>


<p>The node application has been updated with the following features:</p>

<ul>
<li>lines #4-7: import of http, file system and socket.io</li>
<li>lines #10-21: configure and start the http server. You can see that I have created a simple handler to serve static html file</li>
<li>lines #28-39: I have added support to Web socket using socket.io where I open the tailable cursor, and push/emit the messages on the socket.</li>
</ul>


<p>As you can see, the code that I have added is simple. I do not use any advanced framework, nor manage exceptions, this for simplicity and readability.</p>

<p>Let&rsquo;s now look at the client (html page).</p>

<div><script src='https://gist.github.com/d8c2acfdc416abcc5d18.js?file=index.html'></script>
<noscript><pre><code>&lt;!doctype html&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;title&gt;MongoDB pub/sub&lt;/title&gt;
  &lt;style&gt;
  * { margin: 0; padding: 10px; box-sizing: border-box; }
  body { font: 13px Helvetica, Arial; }
  #messages { list-style-type: none; margin: 0; padding: 0; }
  #messages li { padding: 5px 10px; }
  #messages li:nth-child(odd) { background: #eee; }
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
  &lt;h2&gt;MongoDB/Socket.io demonstration&lt;/h2&gt;

  &lt;ul id=&quot;messages&quot;&gt;&lt;/ul&gt;

  &lt;script src=&quot;https://cdn.socket.io/socket.io-1.2.0.js&quot;&gt;&lt;/script&gt;
  &lt;script src=&quot;https://code.jquery.com/jquery-2.1.3.min.js&quot;&gt;&lt;/script&gt;
  &lt;script&gt;
  var socket = io();
  socket.on(&#39;message&#39;, function(doc){
    $(&#39;#messages&#39;).append($(&#39;&lt;li&gt;&#39;).text(doc.text));
  });
  &lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre></noscript></div>


<p>Same as the server, it is really simple and does not use any advanced libraries except socket.io client (line #18) and JQuery (line #19), and used:</p>

<ul>
<li>on line #22 to received messages ans print them in the page using JQuery on line #23</li>
</ul>


<p>I have created a screencast of this version of the application:</p>

<iframe width="560" height="420" src="http://www.youtube.com/embed/N9fDxuohdy8?color=white&theme=light"></iframe>


<p>You can find the source code in this Github repository, take the step-02 branch; clone this branch using:</div></p>

<p><code>git clone -b step-02 https://github.com/tgrall/mongodb-realtime-pubsub.git</code></p>

<h3>Conclusion</h3>

<p>In this first post, we have:</p>

<ul>
<li>learned about tailable cursor and capped collection</li>
<li>see how it can be used to develop a pub/sub application</li>
<li>expose this into a basic web socket based application</li>
</ul>


<p>In the next article we will continue to develop a bigger application using these features.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Big Data... Is Hadoop the Good Way to Start?]]></title>
    <link href="http://tgrall.github.io/blog/2014/11/25/big-data-dot-dot-dot-is-hadoop-the-good-way-to-start/"/>
    <updated>2014-11-25T07:27:36+01:00</updated>
    <id>http://tgrall.github.io/blog/2014/11/25/big-data-dot-dot-dot-is-hadoop-the-good-way-to-start</id>
    <content type="html"><![CDATA[<p>In the past 2 years, I have met many developers, architects that are working on “big data” projects. This sounds amazing, but quite often the truth is not that amazing.</p>

<h4>TL;TR</h4>

<p>You believe that you have a big data project?</p>

<ul>
<li>Do not start with the installation of an Hadoop Cluster &ndash; the &ldquo;<em>how</em>&rdquo;</li>
<li>Start to talk to business people to understand their problem &ndash; the &ldquo;<em>why</em>&rdquo;</li>
<li>Understand the data you must process</li>
<li>Look at the volume &ndash; very often it is not &ldquo;that&rdquo; big</li>
<li>Then implement it, and take a simple approach, for example start with MongoDB + Apache Spark</li>
</ul>


<p><img class="center center" src="http://cdn.meme.am/instances/500x/47510205.jpg" width="320" title="'Big Data'" ></p>

<!-- more -->


<h2>The infamous &ldquo;big data project&rdquo;</h2>

<p>A typical discussion would look like:</p>

<p>Me: <em>“Can you tell me more about this project, what do you do with your data?”</em></p>

<p>Mr. Big Bytes: <em>“Sure, we have a 40 nodes Hadoop cluster&hellip;&ldquo;</em></p>

<p>Me: <em>“This is cool but which type of data do you store, and what is the use case, business value?&ldquo;</em></p>

<p>Mr. Big Bytes: <em>“We store, all the logs of our applications, we have hundreds of gigabits…&#8221;</em></p>

<p>After a long blank: <em>“We have not yet started to analyze these data. For now it is jut  &lsquo;us, the IT team,&rsquo; we store the data, like that soon we will be able to do interesting things with them&#8221;</em></p>

<p>You can meet the same person few months later; the cluster is still sitting here, with no activity on it. I even met some consultants telling me they received calls from their customer asking the following:</p>

<p><em>“Hmmm, we have an Hadoop cluster installed, can you help us to find what to do with it?&ldquo;</em></p>

<p><em>Wrong! That is wrong!!!!!</em> This means that the IT Team has spent lot of time for nothing, at least for the business; and I am not even sure the team has learned something technically.</p>

<h3>Start with the &ldquo;Why&rdquo; not with the &ldquo;How&rdquo;!</h3>

<p>The solution to this, could be obvious, start your “big data project” answering the “why/what” questions first! The “how”, the implementation, will come later.</p>

<p>I am sure that most of the enterprises will benefit of a so called “big data project”, but it is really important to understand the problems first. <em>And these problems are not technical…</em> at least at the beginning. So you must spend time with the business persons to understand what could help them. Let&rsquo;s take some examples.</p>

<p>You are working in a bank or insurance, business people will be more than happy to predict when/why customer will be leaving the company by doing some <em>churn analysis</em>; or it will be nice to be able to see when it makes lot of sense <em>to sell new contracts</em>, service to existing customers.</p>

<p>You are working in retail/commerce, your business will be happy to see if they can <u>adjust the price</u> to the market, or <u>provide precise recommendations</u> to a user from an analysis of other customer behavior.</p>

<p>We can find many other examples. But as you can see we are not talking about technology, just business and possible benefits. In fact nothing new, compare with the applications you are building, you need first to have some requirements/ideas to build a product. Here we just need to have some &ldquo;data input&rdquo; to see <u>how we can enrich the data</u> with some business value.</p>

<p>Once you have started to ask all these questions you will start to see some input, and possible processing around them:</p>

<ul>
<li>You are an insurance, you customers has no contact with your representative, or the customer satisfaction is medium/bad; you start to see some customer name in quotes coming from price comparison website…. hmm you can guess that they are looking for a new insurance.</li>
<li>Still in the insurance, when your customer are close to the requirement age, or has teenagers learning how to drive, moving to college, you know that you have some opportunity to sell new contract, or adapt existing ones to the new needs</li>
<li>In retail, you may want to look to all customers and what they have ordered, and based on this be able to recommend some products to a customer that &ldquo;looks&rdquo; the same.</li>
<li>Another very common use case these days, you want to do some sentiment analysis of social networks to see how your brand is perceived by your community</li>
</ul>


<p>As you can see now, we can start to think about the data we have to use and the type of processing we have to do on them.</p>

<h3>Let&rsquo;s now talk about the &ldquo;How&rdquo;</h3>

<p>Now that you have a better idea about what you want to do, it does not mean that you should dive into a large cluster installation.</p>

<p>Before that, you should continue to analyze the data:</p>

<ul>
<li>What is the structure of the data that I have to analyze?</li>
<li>How big is my dataset?</li>
<li>How much data I have to ingest on a period of time (minute, hour, day, &hellip;)</li>
</ul>


<p>All these questions will help you to understand better your application. This is where it is often interesting too, and we realize that for most of us the &ldquo;big data&rdquo; is not that big!</p>

<p>I was working the other day with a Telco company in Belgium, and I was talking about possible new project. I simply said:</p>

<ul>
<li>Belgium is what, 11+ millions of people</li>
<li>If you store a 50kb object for each person this represent:</li>
<li>Your full dataset will be 524Gb, yes not even a Terabyte!</li>
</ul>


<p>Do you need a large Hadoop cluster to store and process this? You can use it, but you do not need to! You can find something smaller, and easier to start with.</p>

<p>Any database will do the job, starting with MongoDB. I think it is really interesting to start this project with a MongoDB cluster, not only because it will allow you to scale out as much as you need, but also because you will leverage the flexibility of the document model. This will allow you to store any type of data, and easily adapt the structure to the new data, or requirements.</p>

<p>Storing the data is only one part of the equation. The other part is how you achieve the data processing. Lately I am playing a lot with <a href="https://spark.apache.org/">Apache Spark</a>. Spark provides a very powerful engine for large scale data processing, and it is a lot simpler than Map Reduce jobs. In addition to this, you can run Spark without Hadoop! This means you can connect you Spark to your MongoDB, with the <a href="http://docs.mongodb.org/ecosystem/tools/hadoop/">MongoDB Hadoop Connector</a> and other data sources and directly execute job on your main database.</p>

<p>What I like also about this approach, you can when you dataset starts to grow, and it become harder to process all the data on your operational database, you can easily add Hadoop; and keep most of your data processing layer intact, and only change the data sources information. In this case you will connect MongoDB and Hadoop to get/push the data into HDFS, once again using the MongoDB Hadoop Connector.</p>

<h3>Conclusion</h3>

<p>Too many times, projects are driven by technology instead of focusing on the business value. This is particularly true around big data projects. So be sure you start by understanding the business problem, and find the data that could help to solve it.</p>

<p>Once you have the business problem and the data, select the good technology, that could be very simple, simple files and python scripts, or more often a database like MongoDB with a data processing layer like Spark. And start to move to Hadoop when it is really mandatory&hellip; a very, very, very, large dataset.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introduction to MongoDB Geospatial Feature]]></title>
    <link href="http://tgrall.github.io/blog/2014/08/21/introduction-to-mongodb-geospatial-feature/"/>
    <updated>2014-08-21T15:30:02+02:00</updated>
    <id>http://tgrall.github.io/blog/2014/08/21/introduction-to-mongodb-geospatial-feature</id>
    <content type="html"><![CDATA[<p>This post is a quick and simple introduction to Geospatial feature of MongoDB 2.6 using simple dataset and queries.</p>

<h3>Storing Geospatial Informations</h3>

<p>As you know you can store any type of data, but if you want to query them you need to use some coordinates, and create index on them. MongoDB supports three types of indexes for GeoSpatial queries:</p>

<ul>
<li><a href="http://docs.mongodb.org/manual/core/2d/">2d Index</a> : uses simple coordinate (longitude, latitude). As stated in the documentation: <em>The 2d index is intended for legacy coordinate pairs used in MongoDB 2.2 and earlier</em>. For this reason, I won&rsquo;t detail anything about this in this post. Just for the record 2d Index are used to query data stored as points on a two-dimensional plane</li>
<li><a href="http://docs.mongodb.org/manual/core/2dsphere/">2d Sphere Index</a> : support queries of any geometries on an-earth-like sphere, the data can be stored as GeoJSON and legacy coordinate pairs (longitude, latitude). For the rest of the article I will use this type of index and focusing on GeoJSON.</li>
<li><a href="http://docs.mongodb.org/manual/core/geohaystack/">Geo Haystack</a> : that are used to query on very small area. It is today less used by applications and I will not describe it in this post.
So this article will focus now on the 2d Sphere index with GeoJSON format to store and query documents.</li>
</ul>


<p><em>So what is GeoJSON?</em></p>

<p>You can look at the <a href="http://geojson.org/">http://geojson.org/</a> site, let&rsquo;s do a very short explanation. GeoJSON is a format for encoding, in JSON, a variety of geographic data structures, and support the following types:  Point , LineString , Polygon , MultiPoint , MultiLineString , MultiPolygon and Geometry.</p>

<p>The GeoJSON format  is quite straightforward based, for the simple geometries, on two attributes: type and coordinates. Let&rsquo;s take some examples:</p>

<p>The city where I spend all my childhood, Pleneuf Val-André, France, has the following coordinates (from Wikipedia)</p>

<p><code>48° 35′ 30.12″ N, 2° 32′ 48.84″ W</code></p>

<p>This notation is a point, based on a latitude &amp; longitude using the <a href="http://en.wikipedia.org/wiki/World_Geodetic_System">WGS 84</a> (Degrees, Minutes, Seconds) system. Not very easy to use by application/code, this is why it is also possible to represent the exact same point using the following values for latitude &amp; longitude:</p>

<p><code>48.5917, -2.5469</code></p>

<p>This one uses the <a href="http://en.wikipedia.org/wiki/World_Geodetic_System">WGS 84</a> (Decimal Degrees) system. This is the coordinates you see use in most of the application/API you are using as developer (eg: Google Maps/Earth for example)</p>

<p>By default GeoJSON, and MongoDB use these values but <strong>the coordinates must be stored in the longitude, latitude order</strong>, so this point in GeoJSON will look like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;type&quot;</span><span class="p">:</span> <span class="s2">&quot;Point&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;coordinates&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>  <span class="mf">-2.5469</span><span class="p">,</span>
</span><span class='line'>  <span class="mf">48.5917</span>
</span><span class='line'>  <span class="p">]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://2.bp.blogspot.com/-0GfvAvSgLM8/U_NwAR_BCpI/AAAAAAAAArI/INweKtutfDQ/s1600/01-geojson-point.png"></p>

<p>This is a simple &ldquo;Point&rdquo;, let&rsquo;s now for example look at a line, a very nice walk on the beach :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;type&quot;</span><span class="p">:</span> <span class="s2">&quot;LineString&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;coordinates&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>    <span class="p">[</span><span class="mf">-2.551082</span><span class="p">,</span><span class="mf">48.5955632</span><span class="p">],</span>
</span><span class='line'>    <span class="p">[</span><span class="mf">-2.551229</span><span class="p">,</span><span class="mf">48.594312</span><span class="p">],</span>
</span><span class='line'>    <span class="p">[</span><span class="mf">-2.551550</span><span class="p">,</span><span class="mf">48.593312</span><span class="p">],</span>
</span><span class='line'>    <span class="p">[</span><span class="mf">-2.552400</span><span class="p">,</span><span class="mf">48.592312</span><span class="p">],</span>
</span><span class='line'>    <span class="p">[</span><span class="mf">-2.553677</span><span class="p">,</span> <span class="mf">48.590898</span><span class="p">]</span>
</span><span class='line'>  <span class="p">]</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://1.bp.blogspot.com/-dg_myaJAG-c/U_Nv80jrncI/AAAAAAAAArA/utmCcBlQeqY/s1600/02-geojson-linestring.png"></p>

<p>So using the same approach you will be able to create MultiPoint, MultiLineString, Polygon, MultiPolygon. It is also possible to mix all these in a single document using a GeometryCollection. The following example is a Geometry Collection of MultiLineString and Polygon over Central Park:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;type&quot;</span> <span class="p">:</span> <span class="s2">&quot;GeometryCollection&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;geometries&quot;</span> <span class="p">:</span> <span class="p">[</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="nt">&quot;type&quot;</span> <span class="p">:</span> <span class="s2">&quot;Polygon&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;coordinates&quot;</span> <span class="p">:</span> <span class="p">[</span>
</span><span class='line'><span class="p">[</span>
</span><span class='line'>  <span class="p">[</span> <span class="mf">-73.9580</span><span class="p">,</span> <span class="mf">40.8003</span> <span class="p">],</span>
</span><span class='line'>  <span class="p">[</span> <span class="mf">-73.9498</span><span class="p">,</span> <span class="mf">40.7968</span> <span class="p">],</span>
</span><span class='line'>  <span class="p">[</span> <span class="mf">-73.9737</span><span class="p">,</span> <span class="mf">40.7648</span> <span class="p">],</span>
</span><span class='line'>  <span class="p">[</span> <span class="mf">-73.9814</span><span class="p">,</span> <span class="mf">40.7681</span> <span class="p">],</span>
</span><span class='line'>  <span class="p">[</span> <span class="mf">-73.9580</span><span class="p">,</span> <span class="mf">40.8003</span>  <span class="p">]</span>
</span><span class='line'><span class="p">]</span>
</span><span class='line'>      <span class="p">]</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="nt">&quot;type&quot;</span> <span class="p">:</span> <span class="s2">&quot;MultiLineString&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;coordinates&quot;</span> <span class="p">:</span> <span class="p">[</span>
</span><span class='line'><span class="p">[</span> <span class="p">[</span> <span class="mf">-73.96943</span><span class="p">,</span> <span class="mf">40.78519</span> <span class="p">],</span> <span class="p">[</span> <span class="mf">-73.96082</span><span class="p">,</span> <span class="mf">40.78095</span> <span class="p">]</span> <span class="p">],</span>
</span><span class='line'><span class="p">[</span> <span class="p">[</span> <span class="mf">-73.96415</span><span class="p">,</span> <span class="mf">40.79229</span> <span class="p">],</span> <span class="p">[</span> <span class="mf">-73.95544</span><span class="p">,</span> <span class="mf">40.78854</span> <span class="p">]</span> <span class="p">],</span>
</span><span class='line'><span class="p">[</span> <span class="p">[</span> <span class="mf">-73.97162</span><span class="p">,</span> <span class="mf">40.78205</span> <span class="p">],</span> <span class="p">[</span> <span class="mf">-73.96374</span><span class="p">,</span> <span class="mf">40.77715</span> <span class="p">]</span> <span class="p">],</span>
</span><span class='line'><span class="p">[</span> <span class="p">[</span> <span class="mf">-73.97880</span><span class="p">,</span> <span class="mf">40.77247</span> <span class="p">],</span> <span class="p">[</span> <span class="mf">-73.97036</span><span class="p">,</span> <span class="mf">40.76811</span> <span class="p">]</span> <span class="p">]</span>
</span><span class='line'>      <span class="p">]</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://3.bp.blogspot.com/-tIxoUIeSMWw/U_SUsEJ_EDI/AAAAAAAAArY/2qelBrB1xRY/s1600/03-gejson-collection.png"></p>

<p>Note: You can if you want test/visualize these JSON documents using the <a href="http://geojsonlint.com/">http://geojsonlint.com/</a> service.</p>

<h5>Now what? Let&rsquo;s store data!</h5>

<p>Once you have a GeoJSON document you just need to store it into your document. For example if you want to store a document about JFK Airport with its location you can run the following command:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">db</span><span class="p">.</span><span class="nx">airports</span><span class="p">.</span><span class="nx">insert</span><span class="p">(</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="s2">&quot;name&quot;</span> <span class="o">:</span> <span class="s2">&quot;John F Kennedy Intl&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;type&quot;</span> <span class="o">:</span> <span class="s2">&quot;International&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;code&quot;</span> <span class="o">:</span> <span class="s2">&quot;JFK&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;loc&quot;</span> <span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;type&quot;</span> <span class="o">:</span> <span class="s2">&quot;Point&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;coordinates&quot;</span> <span class="o">:</span> <span class="p">[</span> <span class="o">-</span><span class="mf">73.778889</span><span class="p">,</span> <span class="mf">40.639722</span> <span class="p">]</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Yes this is that simple! You just save the GeoJSON as one of the attribute of the document, <code>loc</code> in this example)</p>

<h3>Querying Geospatial Informations</h3>

<p>Now that we have the data stored in MongoDB, it is now possible to use the geospatial information to do some interesting queries.</p>

<p>For this we need a sample dataset. I have created one using some open data found in various places. This dataset contains the following informations:</p>

<ul>
<li>airports collection with the list of US airport (Point)</li>
<li>states collection with the list of US states (MultiPolygon)</li>
</ul>


<p>I have created this dataset from various OpenData sources ( <a href="http://geocommons.com/">http://geocommons.com/</a> , <a href="http://catalog.data.gov/dataset">http://catalog.data.gov/dataset</a> ) and use <a href="https://github.com/mapbox/togeojson">toGeoJSON</a> to convert them into the proper format.</p>

<p>Let&rsquo;s install the dataset:</p>

<ol>
<li>Download it from <a href="https://www.dropbox.com/s/yui7shcud2xbxt7/geo.zip">here</a></li>
<li>Unzip geo.zip file</li>
<li>Restore the data into your mongoDB instance, using the following command</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">mongorestore</span> <span class="nx">geo</span><span class="p">.</span><span class="nx">zip</span>
</span></code></pre></td></tr></table></div></figure>


<p>MongoDB allows applications to do the following types of query on geospatial data:</p>

<ul>
<li>inclusion</li>
<li>intersection</li>
<li>proximity</li>
</ul>


<p>Obviously, you will be able to use all the other operator in addition to the geospatial ones. Let&rsquo;s now look at some concrete examples.</p>

<h4>Inclusion</h4>

<p>Find all the airports in California. For this you need to get the California location (Polygon) and use the command $geoWithin in the query. From the shell it will look like :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">use</span> <span class="nx">geo</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">cal</span> <span class="o">=</span> <span class="nx">db</span><span class="p">.</span><span class="nx">states</span><span class="p">.</span><span class="nx">findOne</span><span class="p">(</span>  <span class="p">{</span><span class="nx">code</span> <span class="o">:</span> <span class="s2">&quot;CA&quot;</span><span class="p">}</span>  <span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">db</span><span class="p">.</span><span class="nx">airports</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nx">loc</span> <span class="o">:</span> <span class="p">{</span> <span class="nx">$geoWithin</span> <span class="o">:</span> <span class="p">{</span> <span class="nx">$geometry</span> <span class="o">:</span> <span class="nx">cal</span><span class="p">.</span><span class="nx">loc</span> <span class="p">}</span> <span class="p">}</span>
</span><span class='line'><span class="p">},</span>
</span><span class='line'><span class="p">{</span> <span class="nx">name</span> <span class="o">:</span> <span class="mi">1</span> <span class="p">,</span> <span class="nx">type</span> <span class="o">:</span> <span class="mi">1</span><span class="p">,</span> <span class="nx">code</span> <span class="o">:</span> <span class="mi">1</span><span class="p">,</span> <span class="nx">_id</span><span class="o">:</span> <span class="mi">0</span> <span class="p">}</span>
</span><span class='line'><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Result:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span> <span class="nt">&quot;name&quot;</span> <span class="p">:</span> <span class="s2">&quot;Modesto City - County&quot;</span><span class="p">,</span> <span class="nt">&quot;type&quot;</span> <span class="p">:</span> <span class="s2">&quot;&quot;</span><span class="p">,</span> <span class="nt">&quot;code&quot;</span> <span class="p">:</span> <span class="s2">&quot;MOD&quot;</span> <span class="p">}</span>
</span><span class='line'><span class="err">...</span>
</span><span class='line'><span class="p">{</span> <span class="nt">&quot;name&quot;</span> <span class="p">:</span> <span class="s2">&quot;San Francisco Intl&quot;</span><span class="p">,</span> <span class="nt">&quot;type&quot;</span> <span class="p">:</span> <span class="s2">&quot;International&quot;</span><span class="p">,</span> <span class="nt">&quot;code&quot;</span> <span class="p">:</span> <span class="s2">&quot;SFO&quot;</span> <span class="p">}</span>
</span><span class='line'><span class="p">{</span> <span class="nt">&quot;name&quot;</span> <span class="p">:</span> <span class="s2">&quot;San Jose International&quot;</span><span class="p">,</span> <span class="nt">&quot;type&quot;</span> <span class="p">:</span> <span class="s2">&quot;International&quot;</span><span class="p">,</span> <span class="nt">&quot;code&quot;</span> <span class="p">:</span> <span class="s2">&quot;SJC&quot;</span> <span class="p">}</span>
</span><span class='line'><span class="err">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>So the query is using the &ldquo;California MultiPolygon&rdquo; and looks in the airports collection to find all the airports that are in these polygons. This looks like the following image on a map:</p>

<p><img src="http://1.bp.blogspot.com/-AO6C6fgsrYQ/U_Wyr2RHPWI/AAAAAAAAAro/hVn6YFJQtNI/s1600/04-geojson-cal-airport.png"></p>

<p>You can use any other query features or criteria, for example you can limit the query to international airport only sorted by name :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">db</span><span class="p">.</span><span class="nx">airports</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nx">loc</span> <span class="o">:</span> <span class="p">{</span> <span class="nx">$geoWithin</span> <span class="o">:</span> <span class="p">{</span> <span class="nx">$geometry</span> <span class="o">:</span> <span class="nx">cal</span><span class="p">.</span><span class="nx">loc</span> <span class="p">}</span> <span class="p">},</span>
</span><span class='line'>  <span class="nx">type</span> <span class="o">:</span> <span class="s2">&quot;International&quot;</span>
</span><span class='line'><span class="p">},</span>
</span><span class='line'><span class="p">{</span> <span class="nx">name</span> <span class="o">:</span> <span class="mi">1</span> <span class="p">,</span> <span class="nx">type</span> <span class="o">:</span> <span class="mi">1</span><span class="p">,</span> <span class="nx">code</span> <span class="o">:</span> <span class="mi">1</span><span class="p">,</span> <span class="nx">_id</span><span class="o">:</span> <span class="mi">0</span> <span class="p">}</span>
</span><span class='line'><span class="p">).</span><span class="nx">sort</span><span class="p">({</span> <span class="nx">name</span> <span class="o">:</span> <span class="mi">1</span> <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Result:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span> <span class="nt">&quot;name&quot;</span> <span class="p">:</span> <span class="s2">&quot;Los Angeles Intl&quot;</span><span class="p">,</span> <span class="nt">&quot;type&quot;</span> <span class="p">:</span> <span class="s2">&quot;International&quot;</span><span class="p">,</span> <span class="nt">&quot;code&quot;</span> <span class="p">:</span> <span class="s2">&quot;LAX&quot;</span> <span class="p">}</span>
</span><span class='line'><span class="p">{</span> <span class="nt">&quot;name&quot;</span> <span class="p">:</span> <span class="s2">&quot;Metropolitan Oakland Intl&quot;</span><span class="p">,</span> <span class="nt">&quot;type&quot;</span> <span class="p">:</span> <span class="s2">&quot;International&quot;</span><span class="p">,</span> <span class="nt">&quot;code&quot;</span> <span class="p">:</span> <span class="s2">&quot;OAK&quot;</span> <span class="p">}</span>
</span><span class='line'><span class="p">{</span> <span class="nt">&quot;name&quot;</span> <span class="p">:</span> <span class="s2">&quot;Ontario Intl&quot;</span><span class="p">,</span> <span class="nt">&quot;type&quot;</span> <span class="p">:</span> <span class="s2">&quot;International&quot;</span><span class="p">,</span> <span class="nt">&quot;code&quot;</span> <span class="p">:</span> <span class="s2">&quot;ONT&quot;</span> <span class="p">}</span>
</span><span class='line'><span class="p">{</span> <span class="nt">&quot;name&quot;</span> <span class="p">:</span> <span class="s2">&quot;San Diego Intl&quot;</span><span class="p">,</span> <span class="nt">&quot;type&quot;</span> <span class="p">:</span> <span class="s2">&quot;International&quot;</span><span class="p">,</span> <span class="nt">&quot;code&quot;</span> <span class="p">:</span> <span class="s2">&quot;SAN&quot;</span> <span class="p">}</span>
</span><span class='line'><span class="p">{</span> <span class="nt">&quot;name&quot;</span> <span class="p">:</span> <span class="s2">&quot;San Francisco Intl&quot;</span><span class="p">,</span> <span class="nt">&quot;type&quot;</span> <span class="p">:</span> <span class="s2">&quot;International&quot;</span><span class="p">,</span> <span class="nt">&quot;code&quot;</span> <span class="p">:</span> <span class="s2">&quot;SFO&quot;</span> <span class="p">}</span>
</span><span class='line'><span class="p">{</span> <span class="nt">&quot;name&quot;</span> <span class="p">:</span> <span class="s2">&quot;San Jose International&quot;</span><span class="p">,</span> <span class="nt">&quot;type&quot;</span> <span class="p">:</span> <span class="s2">&quot;International&quot;</span><span class="p">,</span> <span class="nt">&quot;code&quot;</span> <span class="p">:</span> <span class="s2">&quot;SJC&quot;</span> <span class="p">}</span>
</span><span class='line'><span class="p">{</span> <span class="nt">&quot;name&quot;</span> <span class="p">:</span> <span class="s2">&quot;Southern California International&quot;</span><span class="p">,</span> <span class="nt">&quot;type&quot;</span> <span class="p">:</span> <span class="s2">&quot;International&quot;</span><span class="p">,</span> <span class="nt">&quot;code&quot;</span> <span class="p">:</span> <span class="s2">&quot;VCV&quot;</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>I do not know if you have looked in detail, but we are querying these documents with no index. You can run a query with the <code>explain()</code> to see what&rsquo;s going on. The <code>$geoWithin</code> operator does not need index but your queries will be more efficient with one so let&rsquo;s create the index:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">db</span><span class="p">.</span><span class="nx">airports</span><span class="p">.</span><span class="nx">ensureIndex</span><span class="p">(</span> <span class="p">{</span> <span class="s2">&quot;loc&quot;</span> <span class="o">:</span> <span class="s2">&quot;2dsphere&quot;</span> <span class="p">}</span> <span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Run the explain and you will se the difference.</p>

<h4>Intersection</h4>

<p>Suppose you want to know what are all the adjacent states to California, for this we just need to search for all the states that have coordinates that &ldquo;intersects&rdquo; with California. This is done with the following query:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">cal</span> <span class="o">=</span> <span class="nx">db</span><span class="p">.</span><span class="nx">states</span><span class="p">.</span><span class="nx">findOne</span><span class="p">(</span>  <span class="p">{</span><span class="nx">code</span> <span class="o">:</span> <span class="s2">&quot;CA&quot;</span><span class="p">}</span>  <span class="p">);</span>
</span><span class='line'><span class="nx">db</span><span class="p">.</span><span class="nx">states</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nx">loc</span> <span class="o">:</span> <span class="p">{</span> <span class="nx">$geoIntersects</span> <span class="o">:</span> <span class="p">{</span> <span class="nx">$geometry</span> <span class="o">:</span> <span class="nx">cal</span><span class="p">.</span><span class="nx">loc</span>  <span class="p">}</span>  <span class="p">}</span> <span class="p">,</span>
</span><span class='line'>  <span class="nx">code</span> <span class="o">:</span> <span class="p">{</span> <span class="nx">$ne</span> <span class="o">:</span> <span class="s2">&quot;CA&quot;</span>  <span class="p">}</span>
</span><span class='line'><span class="p">},</span>
</span><span class='line'><span class="p">{</span> <span class="nx">name</span> <span class="o">:</span> <span class="mi">1</span><span class="p">,</span> <span class="nx">code</span> <span class="o">:</span> <span class="mi">1</span> <span class="p">,</span> <span class="nx">_id</span> <span class="o">:</span> <span class="mi">0</span> <span class="p">}</span>
</span><span class='line'><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Result:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span> <span class="nt">&quot;name&quot;</span> <span class="p">:</span> <span class="s2">&quot;Oregon&quot;</span><span class="p">,</span> <span class="nt">&quot;code&quot;</span> <span class="p">:</span> <span class="s2">&quot;OR&quot;</span> <span class="p">}</span>
</span><span class='line'><span class="p">{</span> <span class="nt">&quot;name&quot;</span> <span class="p">:</span> <span class="s2">&quot;Nevada&quot;</span><span class="p">,</span> <span class="nt">&quot;code&quot;</span> <span class="p">:</span> <span class="s2">&quot;NV&quot;</span> <span class="p">}</span>
</span><span class='line'><span class="p">{</span> <span class="nt">&quot;name&quot;</span> <span class="p">:</span> <span class="s2">&quot;Arizona&quot;</span><span class="p">,</span> <span class="nt">&quot;code&quot;</span> <span class="p">:</span> <span class="s2">&quot;AZ&quot;</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://3.bp.blogspot.com/--Kh1AzmsaSU/U_XreY-tRlI/AAAAAAAAAr4/cS1pgjgF2Pc/s1600/05-geojson-intersect.png"></p>

<p>Same as before <code>$geoIntersect</code> operator does not need an index to work, but it will be more efficient with the following index:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">db</span><span class="p">.</span><span class="nx">states</span><span class="p">.</span><span class="nx">ensureIndex</span><span class="p">(</span> <span class="p">{</span> <span class="nx">loc</span> <span class="o">:</span> <span class="s2">&quot;2dsphere&quot;</span> <span class="p">}</span> <span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Proximity</h4>

<p>The last feature that I want to highlight in this post is related to query with proximity criteria. Let&rsquo;s find all the international airports that are located at less than 20km from the reservoir in NYC Central Park. For this you will be using the <code>$near</code> operator.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">db</span><span class="p">.</span><span class="nx">airports</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nx">loc</span> <span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">$near</span> <span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">$geometry</span> <span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">type</span> <span class="o">:</span> <span class="s2">&quot;Point&quot;</span> <span class="p">,</span>
</span><span class='line'>        <span class="nx">coordinates</span> <span class="o">:</span> <span class="p">[</span><span class="o">-</span><span class="mf">73.965355</span><span class="p">,</span><span class="mf">40.782865</span><span class="p">]</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>      <span class="nx">$maxDistance</span> <span class="o">:</span> <span class="mi">20000</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nx">type</span> <span class="o">:</span> <span class="s2">&quot;International&quot;</span>
</span><span class='line'><span class="p">},</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nx">name</span> <span class="o">:</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">code</span> <span class="o">:</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">_id</span> <span class="o">:</span> <span class="mi">0</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Results:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span> <span class="nt">&quot;name&quot;</span> <span class="p">:</span> <span class="s2">&quot;La Guardia&quot;</span><span class="p">,</span> <span class="nt">&quot;code&quot;</span> <span class="p">:</span> <span class="s2">&quot;LGA&quot;</span> <span class="p">}</span>
</span><span class='line'><span class="p">{</span> <span class="nt">&quot;name&quot;</span> <span class="p">:</span> <span class="s2">&quot;Newark Intl&quot;</span><span class="p">,</span> <span class="nt">&quot;code&quot;</span> <span class="p">:</span> <span class="s2">&quot;EWR&quot;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>So this query returns 2 airports, the closest being La Guardia, since the <code>$near</code> operator sorts the results by distance. Also it is important to raise here that the <code>$near</code> operator requires an index.</p>

<h3>Conclusion</h3>

<p>In this first post about geospatial feature you have learned:</p>

<ul>
<li>the basic of GeoJSON</li>
<li>how to query documents with inclusion, intersection and proximity criteria.</li>
</ul>


<p>You can now play more with this for example integrate this into an application that expose data into some UI, or see how you can use the geospatial operators into a aggregation pipeline.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[db.person.find( { 'Role' : 'DBA' } )]]></title>
    <link href="http://tgrall.github.io/blog/2014/03/28/dbpersonfind-role-dba/"/>
    <updated>2014-03-28T07:00:32+01:00</updated>
    <id>http://tgrall.github.io/blog/2014/03/28/dbpersonfind-role-dba</id>
    <content type="html"><![CDATA[<p>Wow! it has been a while since I posted something on my blog post. I have been very busy, moving to MongoDB, learning, learning, learning…finally I can breath a little and answer some questions.</p>

<p>Last week I have been helping my colleague Norberto to deliver a MongoDB Essentials Training in Paris. This was a very nice experience, and I am impatient to deliver it on my own. I was happy to see that the audience was well balanced between developers and operations, mostly DBA.</p>

<h3>What! I still need DBA?</h3>

<p><img src="http://ct.fra.bz/ol/fz/sw/i53/5/6/8/frabz-what-if-i-told-you-you-dont-need-to-know-sql-to-be-a-dba-85380e.jpg"></p>

<p>This is a good opportunity to raise a point, or comment a wrong idea: the fact that you are using MongoDB, or any other NoSQL datastore does not mean that you do not need a DBA… Like any project, an administrator is not mandatory, but if you have one it is better. So even when MongoDB is pushed by development team it is very important to understand the way the database works, and how to administer, monitor it.</p>

<p>If you are lucky enough to have real operations teams, with good system and database administrators use them! They are very important for your application.</p>

<p>Most DBA/System Administrators have been maintaining systems in production for many years. They know how to keep your application up and running. They also most of the time experienced many “disasters”, and then recover (I hope).</p>

<p>Who knows, you may encounter big issues with your application and you will be happy to have them on your side at this moment.</p>

<h3>&ldquo;Great, but the DBA is slowing down my development!&rdquo;</h3>

<p>I hear this, sometimes, and I had this feeling in the past to as developer in large organization. Is it true?</p>

<p>Developers and DBA are today, not living in the same worlds:</p>

<ul>
<li>Developers want to integrate new technologies as soon as possible, not only because it is fun and they can brag about it during meetups/conferences; but because these technologies, most of the time, are making them more productive, and offer better service/experience to the consumer</li>
<li>DBA, are here to keep the applications up and running! So every time they do not feel confident about a technology they will push back. I think this is natural and I would be probably the same in their position. Like all geeks, they would love to adopt new technologies but they need to understand and trust it before.</li>
</ul>


<p>System administrators, DBAS look at the technology with a different angle than developers.</p>

<p>Based on this assumption, it is important to bring the operation team as early as possible when  the development team wants to integrate MongoDB or any new data store. Having the operation team in the loop early will ease the global adoption of MongoDB in the company.</p>

<p>Personally, and this will show my age, I have seen a big change in the way developers and DBAs are working together.</p>

<p>Back in the 90&rsquo;s, when the main architecture was based on client/server architecture  developers and DBAs where working pretty well togethers; probably because they were speaking the same language: SQL was everywhere.  I had regular meetings wit</p>

<p>Then, since mid 2000, mots of applications have moved to a web based architecture , with for example Java middleware, and the developers stopped working with DBAs. Probably because the abstraction data layer provided by the ORM exposed the database as a &ldquo;commodity&rdquo; service that is supposed to work: &ldquo;Hey Mr DBA, my application has been written with the best middleware technology on the market, so now deal with the performance and scalability! I am done!&rdquo;</p>

<p>Yes it is a cliché, but I am sure that some of you will recognize that.</p>

<p>Nevertheless each time I can, I have been pushing developers to talk more to administrators and look closely to their database!</p>

<h3>A new era for operations and development teams</h3>

<p>The fast adoption of MongoDB by developers, is a great opportunity to fix what we have broken 10 years ago in large information systems:</p>

<ul>
<li>Let&rsquo;s talk again!</li>
</ul>


<p>MongoDB has been built first for developers. The document oriented approach gives lot of flexibility to quickly adapt to change. So anytime your business users need a new feature you can implement it, even if this change impact the data structure. Your data model is now driven and controlled by the application, not the database engine.</p>

<p>However, the applications still need to be available 24x7, and performs well. These topics are managed - and shared- by administrator and developers! This has been always the case but, as I described it earlier, it looks like some of us have forgotten that.</p>

<p>Schemas design, change velocity, are driven by the application, so the business and development teams, but all this impacts the database, for example:</p>

<ul>
<li>How storage will grow ?</li>
<li>Which indexes must be created to speed up my application?</li>
<li>How to organize my cluster to leverage the infrastructure properly:

<ul>
<li>Replica-Set organization (and related write concerns, managed by developer)</li>
<li>Sharding options</li>
</ul>
</li>
<li>And the most important of them : backup/recovery strategies</li>
</ul>


<p>So many things that could be managed by the project team, but if you have an operation team with you, it will be better to do that as a single team.</p>

<p>You, the developer, are convinced that MongoDB is the best database for your projects! Now it is time to work with the ops team and convince them too.  So you should for sure explain why MongoDB is good for you as developer, but also you should highlight all the benefits for the operations, starting with built-in high-availability with replica sets, and easy scalability with sharding. MongoDB is also here to make the life of the administrator easier! I have shared in the next paragraph a lit of resources that are interesting for operations people.</p>

<p>Let’s repeat it another time, try to involve the operation team as soon as possible, and use that as an opportunity to build/rebuild the relationship between developers and system administrators!</p>

<h3>Resources</h3>

<p>You can find many good resources on the Site to helps operations or learn about this:</p>

<ul>
<li>Documentation : <a href="http://docs.mongodb.org/manual/administration/">Operations</a></li>
<li>Online Training :

<ul>
<li><a href="https://education.mongodb.com/courses/10gen/M102/2014_May/about">M102: MongoDB for DBAs</a></li>
<li><a href="https://education.mongodb.com/courses/10gen/M202/2014_April/about">M202: MongoDB Advanced Deployment and Operations</a></li>
</ul>
</li>
<li>And many others such as White Papers and <a href="http://www.mongodb.com/webinars">Webinars</a>.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pagination With Couchbase]]></title>
    <link href="http://tgrall.github.io/blog/2013/10/01/pagination-with-couchbase/"/>
    <updated>2013-10-01T02:00:00+02:00</updated>
    <id>http://tgrall.github.io/blog/2013/10/01/pagination-with-couchbase</id>
    <content type="html"><![CDATA[<p>If you have to deal with a large number of documents when doing queries against a Couchbase cluster it is important to use pagination to get rows by page. You can find some information in the documentation in the chapter &ldquo;<a href="http://docs.couchbase.com/couchbase-manual-2.2/#pagination">Pagination</a>&rdquo;, but I want to go in more details and sample code in this article.</p>

<p>For this example I will start by creating a simple view based on the <code>beer-sample</code> dataset, the view is used to find brewery by country:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="p">(</span><span class="nx">doc</span><span class="p">,</span> <span class="nx">meta</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">doc</span><span class="p">.</span><span class="nx">type</span> <span class="o">==</span> <span class="s2">&quot;brewery&quot;</span> <span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span> <span class="nx">doc</span><span class="p">.</span><span class="nx">country</span><span class="p">){</span>
</span><span class='line'>    <span class="nx">emit</span><span class="p">(</span><span class="nx">doc</span><span class="p">.</span><span class="nx">country</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This view list all the breweries by country, the index looks like:</p>

<table>
<tbody>
<tr><th>Doc id</th><th>Key</th><th>Value</th></tr>
<tr><td>bersaglier</td><td>Argentina</td><td>null</td></tr>
<tr><td>cervecera_jerome</td><td>Argentina</td><td>null</td></tr>
<tr><td>brouwerij_nacional_balashi</td><td>Aruba</td><td>null</td></tr>
<tr><td>australian_brewing_corporation</td><td>Australia</td><td>null</td></tr>
<tr><td>carlton_and_united_breweries</td><td>Australia</td><td>null</td></tr>
<tr><td>coopers_brewery</td><td>Australia</td><td>null</td></tr>
<tr><td>foster_s_australia_ltd</td><td>Australia</td><td>null</td></tr>
<tr><td>gold_coast_brewery</td><td>Australia</td><td>null</td></tr>
<tr><td>lion_nathan_australia_hunter_street</td><td>Australia</td><td>null</td></tr>
<tr><td>little_creatures_brewery</td><td>Australia</td><td>null</td></tr>
<tr><td>malt_shovel_brewery</td><td>Australia</td><td>null</td></tr>
<tr><td>matilda_bay_brewing</td><td>Australia</td><td>null</td></tr>
<tr><td>&#8230;</td><td>&#8230;</td><td>&#8230;</td></tr>
<tr><td>&#8230;</td><td>&#8230;</td><td>&#8230;</td></tr>
<tr><td>&#8230;</td><td>&#8230;</td><td>&#8230;</td></tr>
<tr><td>yellowstone_valley_brewing</td><td>United States</td><td>null</td></tr>
<tr><td>yuengling_son_brewing</td><td>United States</td><td>null</td></tr>
<tr><td>zea_rotisserie_and_brewery</td><td>United States</td><td>null</td></tr>
<tr><td>fosters_tien_gang</td><td>Viet Nam</td><td>null</td></tr>
<tr><td>hue_brewery</td><td>Viet Nam</td><td>null</td></tr>
</tbody></table>


<p>So now you want to navigate in this index with a page size of 5 rows.</p>

<!--more-->


<h3>Using skip / limit Parameters</h3>

<p>The most simplistic approach is to use <span style="font-family: Courier New, Courier, monospace;">limit</span> and <span style="font-family: Courier New, Courier, monospace;">skip</span> parameters for example:</p>

<p>Page 1 : <code>?limit=5&amp;amp;skip0</code><br/>
Page 2 : <code>?limit=5&amp;amp;skip=5</code>
&hellip;
Page x : <code>?limit=5&amp;amp;skip(limit*(page-1))</code></p>

<p>You can obviously use any other parameters you need to do range or key queries (<code>startkey/endkey, key, keys</code>) and sort option (<code>descending</code>).</p>

<p>This is simple but not the most efficient way, since the query engine has to read all the rows that match the query, until the skip value is reached.</p>

<p>Some code sample in python that paginate using this view :</p>

<div><script src='https://gist.github.com/6174762.js'></script>
<noscript><pre><code>from couchbase import Couchbase
cb = Couchbase.connect(bucket=&#39;beer-sample&#39;)

hasRow = True
rowPerPage = 5
page = 0
currentStartkey=&quot;&quot;
startDocId=&quot;&quot;

while hasRow :
  hasRow = False
    skip = 0 if page == 0 else 1
    page = page + 1
    print &quot;-- Page %s --&quot; % (page)
    rows = cb.query(&quot;test&quot;, &quot;by_country&quot;, limit=rowPerPage, skip=skip, startkey=currentStartkey, startkey_docid=startDocId)
    for row in rows:
        hasRow = True
        print &quot;Country: \&quot;%s\&quot; \t Id: &#39;%s&#39;&quot; % (row.key, row.docid)
        currentStartkey = row.key
        startDocId = row.docid
    print &quot; -- -- -- -- \n&quot;



</code></pre></noscript></div>


<p>This application loops on all the pages until the end of the index.</p>

<p>As I said before this is not the best approach since the system must read all the values until the skip is reached. The following example shows a better way to deal with this.</p>

<h3>Using startkey / startkey_docid parameters</h3>

<p>To make this pagination more efficient it is possible to take another approach. This approach uses the  <code>startkey</code> and <code>startkey_docid</code>  to select the proper documents.</p>

<ul>
<li><code>The startkey</code> parameter will be the value of the key where the query should start to read (based on the last key of the &ldquo;previous page&rdquo;</li>
<li>Since for a key for example &ldquo;Germany&rdquo; you may have one or more ids (documents) it is necessary to say to Couchbase query engine where to start, for this you need to use the <code>startkey_docid</code> parameter, and ignore this id since it is the last one of the previous page.</li>
</ul>


<p>So if we look at the index, and add a row number to explain the pagination</p>

<table>
<tbody>
<tr><th>Row num</th><th>Doc id</th><th>Key</th><th>Value</th></tr>
<tr><td colspan="4"><br />
Query for page 1<br />
<span style="font-family: Courier New, Courier, monospace;">?limit=5</span></td></tr>
<tr><td>1</td><td></td><td>bersaglier</td><td>Argentina</td><td>null</td></tr>
<tr><td>2</td><td></td><td>cervecera_jerome</td><td>Argentina</td><td>null</td></tr>
<tr><td>3</td><td></td><td>brouwerij_nacional_balashi</td><td>Aruba</td><td>null</td></tr>
<tr><td>4</td><td></td><td>australian_brewing_corporation</td><td>Australia</td><td>null</td></tr>
<tr><td>5</td><td></td><td>carlton_and_united_breweries</td><td>Australia</td><td>null</td></tr>
<tr><td colspan="4">
Query for page 2<br />
<span style="font-family: Courier New, Courier, monospace;">?limit=5&amp;startkey=&#8221;Australia&#8221;&amp;startkey_docid=carlton_and_united_breweries&amp;skip=1
</td></tr>
<tr><td>6</td><td></td><td>coopers_brewery</td><td>Australia</td><td>null</td></tr>
<tr><td>7</td><td></td><td>foster_s_australia_ltd</td><td>Australia</td><td>null</td></tr>
<tr><td>8</td><td></td><td>gold_coast_brewery</td><td>Australia</td><td>null</td></tr>
<tr><td>9</td><td></td><td>lion_nathan_australia_hunter_street</td><td>Australia</td><td>null</td></tr>
<tr><td>10</td><td></td><td>little_creatures_brewery</td><td>Australia</td><td>null</td></tr>
<tr><td colspan="4"><br />
Query for page 3<br />
<span style="font-family: Courier New, Courier, monospace;">?limit=5&amp;startkey=&#8221;Australia&#8221;&amp;startkey_docid=little_creatures_brewery</span><span style="font-family: 'Courier New', Courier, monospace;">&amp;skip=1</span>
</td></tr>
<tr><td>11</td><td></td><td>malt_shovel_brewery</td><td>Australia</td><td>null</td></tr>
<tr><td>12</td><td></td><td>matilda_bay_brewing</td><td>Australia</td><td>null</td></tr>
<tr><td>&#8230;</td><td>&#8230;</td><td>&#8230;</td></tr>
<tr><td>&#8230;</td><td>&#8230;</td><td>&#8230;</td></tr>
<tr><td>&#8230;</td><td>&#8230;</td><td>&#8230;</td></tr>
<tr><td>&#8230;</td><td></td><td>yellowstone_valley_brewing</td><td>United States</td><td>null</td></tr>
<tr><td>&#8230;</td><td></td><td>yuengling_son_brewing</td><td>United States</td><td>null</td></tr>
<tr><td>&#8230;</td><td></td><td>zea_rotisserie_and_brewery</td><td>United States</td><td>null</td></tr>
<tr><td>&#8230;</td><td></td><td>fosters_tien_gang</td><td>Viet Nam</td><td>null</td></tr>
<tr><td>&#8230;</td><td></td><td>hue_brewery</td><td>Viet Nam</td><td>null</td></tr>
</tbody></table>


<p>So as you can see in the examples above, the query uses the startkey, a document id, and just passes it using skip=1.</p>

<p>Let&rsquo;s now look at the application code, once again in Python</p>

<div><script src='https://gist.github.com/6176322.js'></script>
<noscript><pre><code>
from couchbase import Couchbase
cb = Couchbase.connect(bucket=&#39;beer-sample&#39;)

hasRow = True
rowPerPage = 5
page = 0
currentStartkey=&quot;&quot;
startDocId=&quot;&quot;

while hasRow :
    hasRow = False
    skip = 0 if page == 0 else 1
    page = page + 1
    print &quot;-- Page %s --&quot; % (page)
    rows = cb.query(&quot;test&quot;, &quot;by_country&quot;, limit=rowPerPage, skip=skip, startkey=currentStartkey, startkey_docid=startDocId)
    for row in rows:
        hasRow = True
        print &quot;Country: \&quot;%s\&quot; \t Id: &#39;%s&#39;&quot; % (row.key, row.docid)
        currentStartkey = row.key
        startDocId = row.docid
    print &quot; -- -- -- -- \n&quot;

</code></pre></noscript></div>


<p>This application loops on all the pages until the end of the index</p>

<p>Using this approach, the application start to read the index at a specific key (<code>startkey</code> parameter), and only loop on the necessary entry in the index. This is more efficient than using the simple skip approach.</p>

<h4>Views with Reduce function</h4>

<p>When your view is using a reduce function, if you want to paginate on the various keys only (with the reduce function) you need to use the <code>skip</code> and <code>limit</code> parameters.</p>

<p>When you are using the  paramater <code>startkey_docid</code> with a reduce function it will calculate the reduce only to the subset of document ids that are part of your query.</p>

<h3>Couchbase Java SDK Paginator</h3>

<p>In the previous examples, I have showed how to do pagination using the various query parameters. The Java SDK provides a Paginator object to help developers to deal with pagination. The following example is using the same view with the Paginator API.</p>

<div><script src='https://gist.github.com/6774932.js'></script>
<noscript><pre><code>package com.couchbase.devday;

import com.couchbase.client.CouchbaseClient;
import com.couchbase.client.protocol.views.*;
import java.net.URI;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Properties;
import java.util.concurrent.TimeUnit;
import java.util.logging.ConsoleHandler;
import java.util.logging.Handler;
import java.util.logging.Level;
import java.util.logging.Logger;

public class JavaPaginatorSample {

public static void main(String[] args) {

    configure();
    System.out.println(&quot;--------------------------------------------------------------------------&quot;);
    System.out.println(&quot;\tCouchbase - Paginator&quot;);
    System.out.println(&quot;--------------------------------------------------------------------------&quot;);

    List&lt;URI&gt; uris = new LinkedList&lt;URI&gt;();
    uris.add(URI.create(&quot;http://127.0.0.1:8091/pools&quot;));

    CouchbaseClient cb = null;
    try {
        cb = new CouchbaseClient(uris, &quot;beer-sample&quot;, &quot;&quot;);
        System.out.println(&quot;--------------------------------------------------------------------------&quot;);
        System.out.println(&quot;Breweries (by_name) with docs &amp; JSON parsing&quot;);
        View view = cb.getView(&quot;test&quot;, &quot;by_country&quot;);
        Query query = new Query();
        int docsPerPage = 5;

        Paginator paginatedQuery = cb.paginatedQuery(view, query, docsPerPage);
        int pageCount = 0;
        while(paginatedQuery.hasNext()) {
            pageCount++;
            System.out.println(&quot; -- Page &quot;+ pageCount +&quot; -- &quot;);
            ViewResponse response = paginatedQuery.next();
            for (ViewRow row : response) {
                System.out.println(row.getKey() + &quot; : &quot; + row.getId());
            }
            System.out.println(&quot; -- -- -- &quot;);
        }
        
        System.out.println(&quot;\n\n&quot;);
        cb.shutdown(10, TimeUnit.SECONDS);
    } catch (Exception e) {
        System.err.println(&quot;Error connecting to Couchbase: &quot; + e.getMessage());
    }
}



private static void configure() {

    for(Handler h : Logger.getLogger(&quot;com.couchbase.client&quot;).getParent().getHandlers()) {
        if(h instanceof ConsoleHandler) {
            h.setLevel(Level.OFF);
        }
    }
    Properties systemProperties = System.getProperties();
    systemProperties.put(&quot;net.spy.log.LoggerImpl&quot;, &quot;net.spy.memcached.compat.log.SunLogger&quot;);
    System.setProperties(systemProperties);

    Logger logger = Logger.getLogger(&quot;com.couchbase.client&quot;);
    logger.setLevel(Level.OFF);
    for(Handler h : logger.getParent().getHandlers()) {
        if(h instanceof ConsoleHandler){
            h.setLevel(Level.OFF);
        }
    }
}

}
</code></pre></noscript></div>


<p>So as you can see you can easily paginate on the results of a Query using the Java Paginator.</p>

<ul>
<li>At the line #37, the Paginator is created from using the view and query objects and a page size is specified</li>
<li>Then you just need to use the hasNext() and next() methods to navigate in the results.</li>
</ul>


<p>The Java Paginator  is aware of the fact that they query is using a reduce or not, so you can use it with all type of queries - Internally it will switch between the skip/limit approach and the doc_id approaches. You can <a href="https://github.com/couchbase/couchbase-java-client/blob/1.1.9/src/main/java/com/couchbase/client/protocol/views/Paginator.java#L176-L195">see how it is done in the Paginator class</a>.</p>

<p>Note that if you want to do that in a Web application between HTTP request you must keep the Paginator object in the user session since the current API keeps the current page in its state.</p>

<h3>Conclusion</h3>

<p>In this blog post you have  learned how to deal with pagination in Couchbase views; to summarize</p>

<ul>
<li>The pagination is based on some specific parameters that you send when executing a query.</li>
<li>Java developers can use the <a href="http://www.couchbase.com/autodocs/couchbase-java-client-1.2.0/com/couchbase/client/protocol/views/Paginator.html">Paginator</a> class that simplifies pagination.</li>
</ul>


<p>I am inviting you to look at the new Couchbase Query Language N1QL, still under development, that will provide more options to developers including pagination, using LIMIT &amp; OFFSET parameters, for example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span> <span class="n">fname</span><span class="p">,</span> <span class="n">age</span>
</span><span class='line'><span class="k">FROM</span> <span class="n">tutorial</span>
</span><span class='line'><span class="k">WHERE</span> <span class="n">age</span> <span class="o">&gt;</span> <span class="mi">30</span>
</span><span class='line'><span class="k">LIMIT</span> <span class="mi">2</span>
</span><span class='line'><span class="k">OFFSET</span> <span class="mi">2</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you want to learn more about N1QL:</p>

<ul>
<li><a href="http://query.couchbase.com/">N1QL on Couchbase Community Portal</a></li>
<li><a href="http://query.pub.couchbase.com/tutorial/">N1QL Online Tutorial</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Implement Document Versioning With Couchbase]]></title>
    <link href="http://tgrall.github.io/blog/2013/07/18/how-to-implement-document-versioning-with-couchbase/"/>
    <updated>2013-07-18T08:59:50+02:00</updated>
    <id>http://tgrall.github.io/blog/2013/07/18/how-to-implement-document-versioning-with-couchbase</id>
    <content type="html"><![CDATA[<h3>Introduction</h3>

<p>Developers are often asking me how to &ldquo;version&rdquo; documents with Couchbase 2.0. The short answer is: the clients and server do not expose such feature, but it is quite easy to implement.</p>

<p>In this article I will use a basic approach, and you will be able to extend it depending of your business requirements.</p>

<!-- more -->


<h3>Design</h3>

<p>The first thing to do is to select how to &ldquo;store/organize&rdquo; the versions of your document, and for this you have different designs:</p>

<ul>
<li>copy the versions the document into new documents</li>
<li>copy the versions of the document into a list of embedded documents</li>
<li>store the list of attributes that have been changed into a embedded element (or new documents)</li>
<li>store the &ldquo;delta&rdquo;</li>
<li>…</li>
</ul>


<p>You will have to chose the design based on your application requirements (business logic, size of the dataset, &hellip;).  For this article, let&rsquo;s use one of the most simplistic approach: create new document for each version with the following rules for the keys:</p>

<ol>
<li>The current version is is a simple Key/Document, no change to the key.</li>
<li>The version is a copy of the document, and the version number is added to the key.</li>
</ol>


<p>This looks like:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Current Version   mykey
</span><span class='line'>Version 1         mykey::v1
</span><span class='line'>Version 2         mykey::v2
</span><span class='line'>...                 ...</span></code></pre></td></tr></table></div></figure>


<p>With this approach, existing applications will always use the current version of the document, since the key is not changed. But this approach creates new documents that will be indexed by existing views.</p>

<p>For example, in the Beer Sample application, the following view is used to list the beer by name:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="p">(</span><span class="nx">doc</span><span class="p">,</span> <span class="nx">meta</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="nx">doc</span><span class="p">.</span><span class="nx">type</span> <span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span> <span class="nx">doc</span><span class="p">.</span><span class="nx">type</span> <span class="o">==</span> <span class="s2">&quot;beer&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">emit</span><span class="p">(</span><span class="nx">doc</span><span class="p">.</span><span class="nx">name</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>It is quite simple to &ldquo;support&rdquo; versioning without impacting the existing code, except the view itself. The new view needs to emit keys,value only for the current version of the document. This is the new view code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="p">(</span><span class="nx">doc</span><span class="p">,</span> <span class="nx">meta</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="nx">doc</span><span class="p">.</span><span class="nx">type</span> <span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span> <span class="nx">doc</span><span class="p">.</span><span class="nx">type</span> <span class="o">==</span> <span class="s2">&quot;beer&quot;</span> <span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span> <span class="p">(</span><span class="nx">meta</span><span class="p">.</span><span class="nx">id</span><span class="p">).</span><span class="nx">indexOf</span><span class="p">(</span><span class="s2">&quot;::v&quot;</span><span class="p">)</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span>   <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">emit</span><span class="p">(</span><span class="nx">doc</span><span class="p">.</span><span class="nx">name</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>With this change the existing applications that are using this view will continue to work with the same behavior.</p>

<h3>Implementing the versioning</h3>

<p>Based on this design, when the application needs to version the document, the following logic should happen:</p>

<ol>
<li>Get the current version of the document</li>
<li>Increment the version number (for example using another key that maintains the version number for each document)</li>
<li>Create the version with the new key  &ldquo;mykey::v1&rdquo;</li>
<li>Save the document current version</li>
</ol>


<p>Let&rsquo;s look at the code in Java</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Object</span> <span class="n">obj</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">key</span><span class="o">);</span>
</span><span class='line'><span class="k">if</span> <span class="o">(</span><span class="n">obj</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="c1">// get the next version, create or use the key: mykey_version</span>
</span><span class='line'>  <span class="kt">long</span> <span class="n">version</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="na">incr</span><span class="o">(</span><span class="n">key</span> <span class="o">+</span> <span class="s">&quot;_version&quot;</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">1</span><span class="o">);</span>
</span><span class='line'>  <span class="n">String</span> <span class="n">keyForVersion</span> <span class="o">=</span> <span class="n">key</span> <span class="o">+</span> <span class="s">&quot;::v&quot;</span> <span class="o">+</span> <span class="n">version</span><span class="o">;</span> <span class="c1">// mykey::v1</span>
</span><span class='line'>  <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">client</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="n">keyForVersion</span><span class="o">,</span> <span class="n">obj</span><span class="o">).</span><span class="na">get</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">logger</span><span class="o">.</span><span class="na">severe</span><span class="o">(</span><span class="s">&quot;Cannot save version &quot;</span><span class="o">+</span> <span class="n">version</span> <span class="o">+</span> <span class="s">&quot; for key &quot;</span><span class="o">+</span> <span class="n">key</span> <span class="o">+</span><span class="s">&quot; - Error:&quot;</span><span class="o">+</span> <span class="n">e</span><span class="o">.</span><span class="na">getMessage</span><span class="o">()</span> <span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="n">client</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="n">value</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Quite simple isn&rsquo;t?</p>

<p>The application can access the document using the key, but also get one version or the list of all versions, this is one of the reasons why it is interesting to create a key (<span style="font-family: Courier New, Courier, monospace;">mykey_version</span>), and use it also to delete documents and related versions.</p>

<p>Based on the previous comment, the delete operation looks like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Object</span> <span class="n">obj</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">key</span><span class="o">);</span>
</span><span class='line'><span class="c1">// need to delete all the version first</span>
</span><span class='line'><span class="n">Object</span> <span class="n">vObject</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">key</span> <span class="o">+</span> <span class="s">&quot;_version&quot;</span><span class="o">);</span>
</span><span class='line'><span class="k">if</span> <span class="o">(</span><span class="n">vObject</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="kt">long</span> <span class="n">biggerVersion</span> <span class="o">=</span> <span class="n">Long</span><span class="o">.</span><span class="na">parseLong</span><span class="o">((</span><span class="n">String</span><span class="o">)</span> <span class="n">vObject</span><span class="o">);</span>
</span><span class='line'>  <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// delete all the versions</span>
</span><span class='line'>    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">biggerVersion</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">String</span> <span class="n">versionKey</span> <span class="o">=</span> <span class="n">key</span> <span class="o">+</span> <span class="s">&quot;::v&quot;</span> <span class="o">+</span> <span class="n">i</span><span class="o">;</span>
</span><span class='line'>      <span class="n">client</span><span class="o">.</span><span class="na">delete</span><span class="o">(</span><span class="n">versionKey</span><span class="o">).</span><span class="na">get</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="c1">// delete the counter</span>
</span><span class='line'>    <span class="n">client</span><span class="o">.</span><span class="na">delete</span><span class="o">(</span><span class="n">key</span> <span class="o">+</span> <span class="s">&quot;_version&quot;</span><span class="o">).</span><span class="na">get</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">ExecutionException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="n">client</span><span class="o">.</span><span class="na">delete</span><span class="o">(</span><span class="n">key</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Use versioning</h4>

<p>As an example, I have created a small library available on GitHub <a href="https://github.com/tgrall/couchbase-how-to-versioning">https://github.com/tgrall/couchbase-how-to-versioning</a>, this library extends the Couchbase Client and overrides some of the operations : set, replace and delete. (the basic one: no TLL, no durability) As I said before this is just an example.</p>

<p><em>Build and Install</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">git</span> <span class="n">clone</span> <span class="nl">https:</span><span class="c1">//github.com/tgrall/couchbase-how-to-versioning.git</span>
</span><span class='line'><span class="n">cd</span> <span class="n">how</span><span class="o">-</span><span class="n">to</span><span class="o">-</span><span class="n">versioning</span>
</span><span class='line'><span class="n">mvn</span> <span class="n">clean</span> <span class="n">install</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then add this library to your project in addition to Couchbase Java Client, for example in your pom.xml</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>...
</span><span class='line'><span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>  <span class="nt">&lt;groupid&gt;</span>com.couchbase.howtos<span class="nt">&lt;/groupid&gt;</span>
</span><span class='line'>  <span class="nt">&lt;artifactid&gt;</span>couchbase-how-to-versioning<span class="nt">&lt;/artifactid&gt;</span>
</span><span class='line'>  <span class="nt">&lt;version&gt;</span>1.0-SNAPSHOT<span class="nt">&lt;/version&gt;</span>
</span><span class='line'><span class="nt">&lt;/dependency&gt;</span>
</span><span class='line'><span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>  <span class="nt">&lt;groupid&gt;</span>couchbase<span class="nt">&lt;/groupid&gt;</span>
</span><span class='line'>  <span class="nt">&lt;artifactid&gt;</span>couchbase-client<span class="nt">&lt;/artifactid&gt;</span>
</span><span class='line'>  <span class="nt">&lt;version&gt;</span>1.1.8<span class="nt">&lt;/version&gt;</span>
</span><span class='line'><span class="nt">&lt;/dependency&gt;</span>
</span><span class='line'>
</span><span class='line'>...
</span></code></pre></td></tr></table></div></figure>


<p><em>Code your application</em></p>

<p>Create a document and version it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">List</span><span class="o">&lt;</span><span class="n">uri</span><span class="o">&gt;</span> <span class="n">uris</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LinkedList</span><span class="o">&lt;</span><span class="n">uri</span><span class="o">&gt;();</span>
</span><span class='line'><span class="n">uris</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">URI</span><span class="o">.</span><span class="na">create</span><span class="o">(</span><span class="s">&quot;http://127.0.0.1:8091/pools&quot;</span><span class="o">));</span>
</span><span class='line'><span class="n">CouchbaseClientWithVersioning</span> <span class="n">client</span> <span class="o">=</span> <span class="kc">null</span>
</span><span class='line'><span class="k">try</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">client</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">CouchbaseClientWithVersioning</span><span class="o">(</span><span class="n">uris</span><span class="o">,</span> <span class="s">&quot;default&quot;</span><span class="o">,</span> <span class="s">&quot;&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="n">String</span> <span class="n">key</span> <span class="o">=</span> <span class="s">&quot;key-001&quot;</span><span class="o">;</span>
</span><span class='line'>  <span class="n">client</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="s">&quot;This is the original version&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">&quot;Original &#39;%s&#39; .\n&quot;</span><span class="o">,</span> <span class="n">client</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">key</span><span class="o">));</span>
</span><span class='line'>  <span class="n">client</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="s">&quot;This is a new version&quot;</span><span class="o">,</span> <span class="kc">true</span><span class="o">);</span> <span class="c1">// create a new version</span>
</span><span class='line'>  <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">&quot;Current Version &#39;%s&#39; .\n&quot;</span><span class="o">,</span> <span class="n">client</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">key</span><span class="o">));</span>
</span><span class='line'>  <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">&quot;Version 1 &#39;%s&#39; .\n&quot;</span><span class="o">,</span> <span class="n">client</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="mi">1</span><span class="o">));</span>
</span><span class='line'>  <span class="n">client</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="s">&quot;This is another version&quot;</span><span class="o">,</span> <span class="kc">true</span><span class="o">);</span> <span class="c1">// create a new version</span>
</span><span class='line'>  <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">&quot;All versions %s .\n&quot;</span><span class="o">,</span> <span class="n">client</span><span class="o">.</span><span class="na">getAllVersions</span><span class="o">(</span><span class="n">key</span><span class="o">));</span>
</span><span class='line'>  <span class="n">client</span><span class="o">.</span><span class="na">deleteVersion</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="mi">1</span><span class="o">);</span> <span class="c1">// create a new version</span>
</span><span class='line'>  <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">&quot;All versions %s (after delete 1 version).\n&quot;</span><span class="o">,</span> <span class="n">client</span><span class="o">.</span><span class="na">getAllVersions</span><span class="o">(</span><span class="n">key</span><span class="o">));</span>
</span><span class='line'>  <span class="n">client</span><span class="o">.</span><span class="na">delete</span><span class="o">(</span><span class="n">key</span><span class="o">);</span> <span class="c1">// create a new version</span>
</span><span class='line'>  <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">&quot;All versions %s (after delete the main key).\n&quot;</span><span class="o">,</span> <span class="n">client</span><span class="o">.</span><span class="na">getAllVersions</span><span class="o">(</span><span class="n">key</span><span class="o">));</span>
</span><span class='line'><span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="k">if</span> <span class="o">(</span><span class="n">client</span> <span class="o">!=</span><span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">client</span><span class="o">.</span><span class="na">shutdown</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Quick explanation:</p>

<ul>
<li>Line 5: instead of using the <code>CouchbaseClient</code>, the application uses the extended <code>CouchbaseClientWithVersioning</code> class.</li>
<li>Line 7: create a new entry</li>
<li>Line 9: create a new version, the boolean value to &ldquo;true&rdquo; force the versioning of the document</li>
<li>The application use other methods such as get a specific version (line 11), get all versions (line 13), delete a specific version (line 14), and finally delete the key and all versions (line 16).</li>
</ul>


<p>So using this approach the developer controls explicitly when to create a version, since he has to add the boolean parameter in the set operation. In this small sample library it is also possible to do auto versioning, in this case all set and replace calls will create a version, to achieve that the developer just needs to call the setAutoVersioning(true) method. Something like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">client</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">CouchbaseClientWithVersioning</span><span class="o">(</span><span class="n">uris</span><span class="o">,</span> <span class="s">&quot;default&quot;</span><span class="o">,</span> <span class="s">&quot;&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">client</span><span class="o">.</span><span class="na">setAutomaticVersionning</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>With this approach you can provide versioning to your application with minimal code change. You can test it in the Beer Sample application, just do not forget to change the views as documenter above to only return <em>current</em> version of the documents.</p>

<h3>Conclusion</h3>

<p>As you can see doing versioning in Couchbase is not that complicated, but it is something that must be done by your application based on its requirements and constraints. You have many different solution and none of these options is perfect for all use cases.</p>

<p>In this specific sample code, I am working with a simple design where I create a copy of the documents for each version. With this approach also, it is interesting to mention that you can version &ldquo;anything&rdquo;, not only JSON document but also any values.  As I said before, this is one possible approach, and like any design, it has some impact on the application or database, in this case most the database:</p>

<ul>
<li>Increase the number of keys and documents</li>
<li>Double - or more- the number of operations, for example when updating a document, the application needs to get the current value, create a version, save the current version.</li>
<li>Consistency management when adding new version and incrementing the version number (need to deal with errors when creating a new version, deleting the versions and counter&hellip;.)</li>
</ul>


<p>Many features could be added to this easily, for example:</p>

<ul>
<li>Limit to a specific number of version,</li>
<li>Enable the versioning only of replace() operation</li>
<li>Add specific attribute about versions in JSON document (for example date of the version)</li>
<li>&hellip;.</li>
</ul>


<p>If you are using versioning in your Couchbase application feel free to comment or write a small article that describes the way your are doing it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Deploy Your Node/Couchbase Application to the Cloud With Clever Cloud]]></title>
    <link href="http://tgrall.github.io/blog/2013/07/11/deploy-your-node-slash-couchbase-application-to-the-cloud-with-clever-cloud/"/>
    <updated>2013-07-11T06:47:51+02:00</updated>
    <id>http://tgrall.github.io/blog/2013/07/11/deploy-your-node-slash-couchbase-application-to-the-cloud-with-clever-cloud</id>
    <content type="html"><![CDATA[<h3>Introduction</h3>

<p><a href="http://www.clever-cloud.com/en/">Clever Cloud</a> is the first PaaS to provide Couchbase as a service allowing developers to run applications in a fully managed environment. This article shows how to deploy an existing application to Clever Cloud.</p>

<p><img src="http://f.cl.ly/items/2L2M2k2O000e3g2N1z3z/couchbase_gradient_clever.png"></p>

<p>I am using a very simple Node application that I have documented in a previous article: “<a href="http://tugdualgrall.blogspot.fr/2013/03/easy-application-development-with.html">Easy application development with Couchbase, Angular and Node</a>”.</p>

<p>Clever Cloud provides support for various databases MySQL, PostgreSQL, but also and this is most important for me <a href="http://www.clever-cloud.com/en/services/couchbase.html">Couchbase</a>. No only Clever Cloud allows you to use database services but also you can deploy and host your application that could be developed in the language/technology of your choice : Java, Node, Scala, Python, PHP, … and all this in a secure, scalable and managed environment.</p>

<!-- more -->


<h3>Setting up your Clever Cloud environment</h3>

<h4>Create your account</h4>

<ol>
<li>Go to the Clever Cloud site :<a href="http://www.clever-cloud.com/"> http://www.clever-cloud.com/</a></li>
<li>Click on “Login” link and follow the steps to create your account.</li>
<li>After few seconds you will received an email and be redirected to the Clever Cloud Console.</li>
</ol>


<h4>Create a Couchbase instance</h4>

<p>The <a href="https://console.clever-cloud.com/">Clever Cloud Console</a> allows you to create your Couchbase Bucket in few clicks:</p>

<p>1-  Cick on “Services” in the left menu</p>

<p>2-  Click on “Add a Service” in the left menu </span></p>

<p><img src="http://4.bp.blogspot.com/-He8scPOrH5I/Uac5B_O2k3I/AAAAAAAAAcE/OZyn8jW-bV8/s320/clever-cloud-add-couchbase.png"></p>

<p>3- Click on “Couchbase” button.</p>

<ol>
<li>Select the size of the RAM quota for your bucket</li>
</ol>


<p><img src="http://4.bp.blogspot.com/-V_GMolXLClI/Uac5CMdKQoI/AAAAAAAAAcM/vvGKJUXW-xQ/s320/Screen+Shot+2013-05-30+at+9.19.59+AM.png"></p>

<p>The size of the RAM Quota for your bucket will have an impact on performance but also on the pricing.</p>

<p>5- Click “Add this Service”</p>

<p>You are done, you should receive an email with all the information to access your newly created bucket.</p>

<p>The mail from Clever Cloud contains the following information:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>db_host = xxxxxxxx.couchbase.clvrcld.net Location of the database, this is where the endpoint is located.
</span><span class='line'>db_name = yyyyyyyy    Name of the Couchbase bucket
</span><span class='line'>db_username = xxxxxxxx    Not used in Couchbase context
</span><span class='line'>db_password = zzzzzzzz    Password to connect to the Couchbase Bucket</span></code></pre></td></tr></table></div></figure>


<p>So you are now ready to use your bucket.</p>

<p>Note: In the current version of the Clever Cloud Couchbase Service you do not have access to a management console. If you want to get some information about the database or create views you need to do it from you application code.</p>

<h4>Connect your Application to Couchbase@Clever-Cloud</h4>

<p>The first step is to get some code, so let’s clone the “Couchbase Ideas Sample Application”, and install the dependencies, using the following commands:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git clone -b 03-vote-with-value https://github.com/tgrall/couchbase-node-ideas.git
</span><span class='line'>
</span><span class='line'>cd couchbase-node-ideas
</span><span class='line'>
</span><span class='line'>git branch mybranch
</span><span class='line'>
</span><span class='line'>git checkout mybranch
</span><span class='line'>
</span><span class='line'>npm install</span></code></pre></td></tr></table></div></figure>


<p>Open the app.js and edit the connection info to point your application to the Couchbase instance and modify the HTTP port of your application to 8080 - this is a mandatory step documented <a href="http://doc.clever-cloud.com/nodejs/nodejs/#requirements">here</a> :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">dbConfiguration</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="s2">&quot;hosts&quot;</span><span class="o">:</span> <span class="p">[</span><span class="s2">&quot;xxxxxxxxxxx.couchbase.clvrcld.net:8091&quot;</span><span class="p">],</span>
</span><span class='line'>  <span class="s2">&quot;bucket&quot;</span><span class="o">:</span> <span class="s2">&quot;xxxxxxxxxxx&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;user&quot;</span><span class="o">:</span> <span class="s2">&quot;xxxxxxxxxx&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;password&quot;</span><span class="o">:</span> <span class="s2">&quot;yyyyyyyyyyyyyyyyyyyyyyyyy&quot;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="p">...</span>
</span><span class='line'><span class="p">...</span>
</span><span class='line'>
</span><span class='line'><span class="nx">appServer</span> <span class="o">=</span> <span class="nx">app</span><span class="p">.</span><span class="nx">listen</span><span class="p">(</span><span class="mi">8080</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Express server listening on port %d in %s mode&quot;</span><span class="p">,</span> <span class="nx">appServer</span><span class="p">.</span><span class="nx">address</span><span class="p">().</span><span class="nx">port</span><span class="p">,</span> <span class="nx">app</span><span class="p">.</span><span class="nx">settings</span><span class="p">.</span><span class="nx">env</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Launch your application using</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">node</span> <span class="nx">app</span><span class="p">.</span><span class="nx">js</span>
</span></code></pre></td></tr></table></div></figure>


<p>Go to <a href="http://localhost:8080">http://localhost:8080</a></p>

<p>Your application is now using Couchbase on the cloud powered by Clever Cloud. Let’s now deploy the application itself on Clever Cloud</p>

<h3>Deploy your application on Clever Cloud</h3>

<p>The easiest way to deploy an application to Clever Cloud is using git. The first thing to do is to add your SSH public key into Clever Cloud Console. If you do not have any SSH yet, follow the steps described on Github : “<a href="https://help.github.com/articles/generating-ssh-keys">Generating SSH Keys</a>”.</p>

<h4>Add your SSH key</h4>

<p>Note: As you can guess this should be done only once</p>

<p>Open the id_rsa.pub file with a text editor. This is your SSH key. Select all and copy to your clipboard.</p>

<ol>
<li>Go to the Clever Cloud Console</li>
<li>Click on “Profile” entry in the left menu</li>
<li>Click on “SSH Keys”</li>
<li>Click on “Add a SSH Key”</li>
<li>Enter a name (anything you want) and paste your key</li>
<li>Click “Add” button</li>
</ol>


<p>You are now ready to deploy applications to Clever Cloud. The next thing to do, is to create a new node application in Clever Cloud.</p>

<h4>Create your Application</h4>

<ol>
<li>Click “Add an app” in the Application menu in the top menu.</li>
<li>Give a name and description to this application</li>
<li>Select the Instance type, in this case “Node.js”</li>
<li>Configure your instances, you can keep the default values for now, click “Next”</li>
<li>Check the configuration, and click “Create”</li>
</ol>


<p>Your application is created, you are redirected to the generic information page, where you can find a Git URL that we will use to deploy the application.</p>

<p>You can navigate into the entries in the left menu to see more information about your application. In addition to the Information page, you can look at the following entries:</p>

<ol>
<li>“Domain Names” to configure the URL to access your application</li>
<li>“Logs” to view the application logs</li>
</ol>


<h4>Deploy the Application</h4>

<p>So we are almost there!</p>

<p>The deployment to Clever Cloud is done using a Git push command, so you need to add the deployment URL as a remote repository to your application, using the following command:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">git</span> <span class="nx">remote</span> <span class="nx">add</span> <span class="nx">clever</span> <span class="nx">git</span><span class="o">+</span><span class="nx">ssh</span><span class="o">:</span><span class="c1">//git@push.clever-cloud.com/app_[your_app_id].git</span>
</span><span class='line'>
</span><span class='line'><span class="nx">git</span> <span class="nx">commit</span> <span class="o">-</span><span class="nx">a</span> <span class="o">-</span><span class="nx">m</span> <span class="err">“</span><span class="nx">Couchbase</span> <span class="nx">on</span> <span class="nx">Clever</span> <span class="nx">Cloud</span> <span class="nx">connection</span><span class="err">”</span>
</span><span class='line'>
</span><span class='line'><span class="nx">git</span> <span class="nx">push</span> <span class="nx">clever</span> <span class="nx">mybranch</span><span class="o">:</span><span class="nx">master</span>
</span></code></pre></td></tr></table></div></figure>


<p>Once you have added the application as remote repository you can commit and push your application.</p>

<p>The last command pushes the application  to Clever Cloud. It is important to note that Clever Cloud will always deploy the application on the “master” branch on the remote repository. The notation mybranch:master is used to mention it. If you work locally on your master branch just use “master”.</p>

<p>You can now go to the Clever Cloud console and look in the log and click on the URL in the “Domain Names” section to test your application.</p>

<p>You should be able to see your application, that is running on the Clever Cloud PaaS.</p>

<p>When you update your application, you just need to do a  git push and git commit.</p>

<h3>Conclusion</h3>

<p>In this tutorial you have learned how to:</p>

<ul>
<li>Create your Clever Cloud account</li>
<li>Create a Couchbase instance</li>
<li>Create and deploye a Node.js application</li>
</ul>


<p>Feel free to test this yourself, with Node or other technology, as you can see it is quite easy to setup.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SQL to NoSQL : Copy Your Data From MySQL to Couchbase]]></title>
    <link href="http://tgrall.github.io/blog/2013/07/03/sql-to-nosql-copy-your-data-from-mysql-to-couchbase/"/>
    <updated>2013-07-03T11:52:56+02:00</updated>
    <id>http://tgrall.github.io/blog/2013/07/03/sql-to-nosql-copy-your-data-from-mysql-to-couchbase</id>
    <content type="html"><![CDATA[<p><strong>TL;DR:</strong> Look at the <a href="https://github.com/tgrall/couchbase-sql-importer">project on Github</a>.</p>

<h3>Introduction</h3>

<p>During my last interactions with the Couchbase community, I had the question how can I easily import my data from my current database into Couchbase. And my answer was always the same:</p>

<ul>
<li>Take an ETL such as Talend to do it</li>
<li>Just write a small program to copy the data from your RDBMS to Couchbase&hellip;</li>
</ul>


<p>So I have written this small program that allows you to import the content of a RDBMS into Couchbase. This tools could be used as it is, or you can look at the code to adapt it to your application.</p>

<iframe width="560" height="420" src="http://www.youtube.com/embed/xzqBjhYKCLY?color=white&theme=light"></iframe>


<h3>The Tool: Couchbase SQL Importer</h3>

<p>The Couchbase SQL Importer, available <a href="http://github.com/tgrall/couchbase-sql-importer">here</a>, allows you with a simple command line to copy all -or part of- your SQL schema into Couchbase. Before explaining how to run this command, let&rsquo;s see how the data are stored into Couchbase when they are imported:</p>

<ul>
<li>Each table row is imported a single JSON document

<ul>
<li>where each table column becomes a JSON attribute</li>
</ul>
</li>
<li>Each document as a key made of the name of the table and a counter (increment)</li>
</ul>


<p>The following concrete example, based on the <a href="http://dev.mysql.com/doc/world-setup/en/index.html">MySQL World sample database</a>, will help you to understand how it works. This database contains 3 tables : City, Country, CountryLanguage. The City table looks like:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>+-------------+----------+------+-----+---------+----------------+
</span><span class='line'>| Field       | Type     | Null | Key | Default | Extra          |
</span><span class='line'>+-------------+----------+------+-----+---------+----------------+
</span><span class='line'>| ID          | int(11)  | NO   | PRI | NULL    | auto_increment |
</span><span class='line'>| Name        | char(35) | NO   |     |         |                |
</span><span class='line'>| CountryCode | char(3)  | NO   |     |         |                |
</span><span class='line'>| District    | char(20) | NO   |     |         |                |
</span><span class='line'>| Population  | int(11)  | NO   |     | 0       |                |
</span><span class='line'>+-------------+----------+------+-----+---------+----------------+</span></code></pre></td></tr></table></div></figure>


<p>The JSON document that matches this table looks like the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="err">city:</span><span class="mi">3805</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;Name&quot;</span><span class="p">:</span> <span class="s2">&quot;San Francisco&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;District&quot;</span><span class="p">:</span> <span class="s2">&quot;California&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;ID&quot;</span><span class="p">:</span> <span class="mi">3805</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;Population&quot;</span><span class="p">:</span> <span class="mi">776733</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;CountryCode&quot;</span><span class="p">:</span> <span class="s2">&quot;USA&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>You see that here I am simply taking all the rows and &ldquo;moving&rdquo; them into Couchbase. This is a good first step to play with your dataset into Couchbase, but it is probably not the final model you want to use for your application; most of the time you will have to see when to use embedded documents, list of values, .. into your JSON documents.</p>

<p>In addition to the JSON document the tool create views based on the following logic:</p>

<ul>
<li>a view that list all imported documents with the name of the &ldquo;table&rdquo; (aka type) as key</li>
<li>a view for each table with the primary key columns</li>
</ul>


<p>View: all/by_type</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;rows&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>  <span class="p">{</span><span class="nt">&quot;key&quot;</span><span class="p">:</span> <span class="s2">&quot;city&quot;</span><span class="p">,</span> <span class="nt">&quot;value&quot;</span><span class="p">:</span> <span class="mi">4079</span><span class="p">},</span>
</span><span class='line'>  <span class="p">{</span><span class="nt">&quot;key&quot;</span><span class="p">:</span> <span class="s2">&quot;country&quot;</span><span class="p">,</span> <span class="nt">&quot;value&quot;</span><span class="p">:</span> <span class="mi">239</span><span class="p">},</span>
</span><span class='line'>  <span class="p">{</span><span class="nt">&quot;key&quot;</span><span class="p">:</span> <span class="s2">&quot;countrylanguage&quot;</span><span class="p">,</span> <span class="nt">&quot;value&quot;</span><span class="p">:</span> <span class="mi">984</span><span class="p">}</span>
</span><span class='line'>  <span class="p">]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see this view allows you to get with a single Couchbase query the number of document by type.</p>

<p>Also for each table/document type, a view is created where the key of the index is built from the table primary key. Let&rsquo;s for example query the &ldquo;City&rdquo; documents.</p>

<p>View: city/by_pk?reduce=false&amp;limit=5</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;total_rows&quot;</span><span class="p">:</span> <span class="mi">4079</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;rows&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>  <span class="p">{</span><span class="nt">&quot;id&quot;</span><span class="p">:</span> <span class="s2">&quot;city:1&quot;</span><span class="p">,</span> <span class="nt">&quot;key&quot;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="nt">&quot;value&quot;</span><span class="p">:</span> <span class="kc">null</span><span class="p">},</span>
</span><span class='line'>  <span class="p">{</span><span class="nt">&quot;id&quot;</span><span class="p">:</span> <span class="s2">&quot;city:2&quot;</span><span class="p">,</span> <span class="nt">&quot;key&quot;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="nt">&quot;value&quot;</span><span class="p">:</span> <span class="kc">null</span><span class="p">},</span>
</span><span class='line'>  <span class="p">{</span><span class="nt">&quot;id&quot;</span><span class="p">:</span> <span class="s2">&quot;city:3&quot;</span><span class="p">,</span> <span class="nt">&quot;key&quot;</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span> <span class="nt">&quot;value&quot;</span><span class="p">:</span> <span class="kc">null</span><span class="p">},</span>
</span><span class='line'>  <span class="p">{</span><span class="nt">&quot;id&quot;</span><span class="p">:</span> <span class="s2">&quot;city:4&quot;</span><span class="p">,</span> <span class="nt">&quot;key&quot;</span><span class="p">:</span> <span class="mi">4</span><span class="p">,</span> <span class="nt">&quot;value&quot;</span><span class="p">:</span> <span class="kc">null</span><span class="p">},</span>
</span><span class='line'>  <span class="p">{</span><span class="nt">&quot;id&quot;</span><span class="p">:</span> <span class="s2">&quot;city:5&quot;</span><span class="p">,</span> <span class="nt">&quot;key&quot;</span><span class="p">:</span> <span class="mi">5</span><span class="p">,</span> <span class="nt">&quot;value&quot;</span><span class="p">:</span> <span class="kc">null</span><span class="p">}</span>
</span><span class='line'>  <span class="p">]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The index key matches the value of the <code>City.ID</code> column.  When the primary key is made of multiple columns the key looks like:</p>

<p>View: CountryLanguage/by_pk?reduce=false&amp;limit=5</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;total_rows&quot;</span><span class="p">:</span> <span class="mi">984</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;rows&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>  <span class="p">{</span><span class="nt">&quot;id&quot;</span><span class="p">:</span> <span class="s2">&quot;countrylanguage:1&quot;</span><span class="p">,</span> <span class="nt">&quot;key&quot;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&quot;ABW&quot;</span><span class="p">,</span> <span class="s2">&quot;Dutch&quot;</span><span class="p">],</span> <span class="nt">&quot;value&quot;</span><span class="p">:</span> <span class="kc">null</span><span class="p">},</span>
</span><span class='line'>  <span class="p">{</span><span class="nt">&quot;id&quot;</span><span class="p">:</span> <span class="s2">&quot;countrylanguage:2&quot;</span><span class="p">,</span> <span class="nt">&quot;key&quot;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&quot;ABW&quot;</span><span class="p">,</span> <span class="s2">&quot;English&quot;</span><span class="p">],</span> <span class="nt">&quot;value&quot;</span><span class="p">:</span> <span class="kc">null</span><span class="p">},</span>
</span><span class='line'>  <span class="p">{</span><span class="nt">&quot;id&quot;</span><span class="p">:</span> <span class="s2">&quot;countrylanguage:3&quot;</span><span class="p">,</span> <span class="nt">&quot;key&quot;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&quot;ABW&quot;</span><span class="p">,</span> <span class="s2">&quot;Papiamento&quot;</span><span class="p">],</span> <span class="nt">&quot;value&quot;</span><span class="p">:</span> <span class="kc">null</span><span class="p">},</span>
</span><span class='line'>  <span class="p">{</span><span class="nt">&quot;id&quot;</span><span class="p">:</span> <span class="s2">&quot;countrylanguage:4&quot;</span><span class="p">,</span> <span class="nt">&quot;key&quot;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&quot;ABW&quot;</span><span class="p">,</span> <span class="s2">&quot;Spanish&quot;</span><span class="p">],</span> <span class="nt">&quot;value&quot;</span><span class="p">:</span> <span class="kc">null</span><span class="p">},</span>
</span><span class='line'>  <span class="p">{</span><span class="nt">&quot;id&quot;</span><span class="p">:</span> <span class="s2">&quot;countrylanguage:5&quot;</span><span class="p">,</span> <span class="nt">&quot;key&quot;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&quot;AFG&quot;</span><span class="p">,</span> <span class="s2">&quot;Balochi&quot;</span><span class="p">],</span> <span class="nt">&quot;value&quot;</span><span class="p">:</span> <span class="kc">null</span><span class="p">}</span>
</span><span class='line'>  <span class="p">]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This view is built from the CountryLanguage table primary key made of <code>CountryLanguage.CountryCode and </code>CountryLanguage.Language` columns.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="err">+-------------+---------------+------+-----+---------+-------+</span>
</span><span class='line'><span class="err">|</span> <span class="err">Field</span>       <span class="err">|</span> <span class="err">Type</span>          <span class="err">|</span> <span class="err">Null</span> <span class="err">|</span> <span class="err">Key</span> <span class="err">|</span> <span class="err">Default</span> <span class="err">|</span> <span class="err">Extra</span> <span class="err">|</span>
</span><span class='line'><span class="err">+-------------+---------------+------+-----+---------+-------+</span>
</span><span class='line'><span class="err">|</span> <span class="err">CountryCode</span> <span class="err">|</span> <span class="err">char(</span><span class="mi">3</span><span class="err">)</span>       <span class="err">|</span> <span class="err">NO</span>   <span class="err">|</span> <span class="err">PRI</span> <span class="err">|</span>         <span class="err">|</span>       <span class="err">|</span>
</span><span class='line'><span class="err">|</span> <span class="err">Language</span>    <span class="err">|</span> <span class="err">char(</span><span class="mi">30</span><span class="err">)</span>      <span class="err">|</span> <span class="err">NO</span>   <span class="err">|</span> <span class="err">PRI</span> <span class="err">|</span>         <span class="err">|</span>       <span class="err">|</span>
</span><span class='line'><span class="err">|</span> <span class="err">IsOfficial</span>  <span class="err">|</span> <span class="err">enum(&#39;T&#39;,&#39;F&#39;)</span> <span class="err">|</span> <span class="err">NO</span>   <span class="err">|</span>     <span class="err">|</span> <span class="err">F</span>       <span class="err">|</span>       <span class="err">|</span>
</span><span class='line'><span class="err">|</span> <span class="err">Percentage</span>  <span class="err">|</span> <span class="err">float(</span><span class="mi">4</span><span class="err">,</span><span class="mi">1</span><span class="err">)</span>    <span class="err">|</span> <span class="err">NO</span>   <span class="err">|</span>     <span class="err">|</span> <span class="mf">0.0</span>     <span class="err">|</span>       <span class="err">|</span>
</span><span class='line'><span class="err">+-------------+---------------+------+-----+---------+-------+</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>How to use Couchbase SQL Importer tool? </strong></p>

<p>The importer is a simple Java based command line utility, quite simple to use:</p>

<p>1- Download the <a href="http://goo.gl/IF89e">CouchbaseSqlImporter.jar file from here</a>. This file is contains all the dependencies to work with Couchbase: the Java Couchbase Client, and GSON.
2- Download the JDBC driver for the database you are using as data source. For this example I am using MySQL and I have download the driver for MySQL Site.
3- Configure the import using a properties file.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="err">##</span> <span class="err">SQL</span> <span class="err">Information</span> <span class="err">##</span>
</span><span class='line'><span class="err">sql.connection=jdbc:mysql://</span><span class="mf">192.168</span><span class="err">.</span><span class="mf">99.19</span><span class="err">:</span><span class="mi">3306</span><span class="err">/world</span>
</span><span class='line'><span class="err">sql.username=root</span>
</span><span class='line'><span class="err">sql.password=password</span>
</span><span class='line'>
</span><span class='line'><span class="err">##</span> <span class="err">Couchbase</span> <span class="err">Information</span> <span class="err">##</span>
</span><span class='line'><span class="err">cb.uris=http://localhost:</span><span class="mi">8091</span><span class="err">/pools</span>
</span><span class='line'><span class="err">cb.bucket=default</span>
</span><span class='line'><span class="err">cb.password=</span>
</span><span class='line'>
</span><span class='line'><span class="err">##</span> <span class="err">Import</span> <span class="err">information</span>
</span><span class='line'><span class="err">import.tables=ALL</span>
</span><span class='line'><span class="err">import.createViews=</span><span class="kc">true</span>
</span><span class='line'><span class="err">import.typefield=type</span>
</span><span class='line'><span class="err">import.fieldcase=lower</span>
</span></code></pre></td></tr></table></div></figure>


<p>This sample properties file contains three sections :</p>

<ul>
<li>The two first sections are used to configure the connections to your SQL database and Couchbase cluster (note that the bucket must be created first)</li>
<li>The third section allow you to configure the import itself</li>
</ul>


<p>4- Run the tool !</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="err">java</span> <span class="err">-cp</span> <span class="s2">&quot;./CouchbaseSqlImporter.jar:./mysql-connector-java-5.1.25-bin.jar&quot;</span> <span class="err">com.couchbase.util.SqlImporter</span> <span class="err">import.properties</span>
</span></code></pre></td></tr></table></div></figure>


<p>So you run the Java command with the proper classpath (-cp parameter).</p>

<p>And you are done, you can get your data from your SQL database into Couchbase.</p>

<p>If you are interested to see how it is working internally, you can take a look to the next paragraph.</p>

<h3>The Code: How it works?</h3>

<p>The main class of the tool is really simple  <a href="https://github.com/tgrall/couchbase-sql-importer/blob/master/sql-importer-lib/src/main/java/com/couchbase/util/SqlImporter.java">com.couchbase.util.SqlImporter</a>, the process is:</p>

<ol>
<li>Connect to the SQL database</li>
<li>Connect to Couchbase</li>
<li>Get the list of tables</li>
<li>For each tables execute a &ldquo;select * from table&rdquo;
 4.1. Analyze the ResultSetMetadata to get the list of columns
 4.2. Create a Java map for each rows where the key is the name of the columns and the value…is the value
 4.3. Serialize this Map into a GSON document and save it into Couchbase</li>
</ol>


<p>The code is available in the <a href="https://github.com/tgrall/couchbase-sql-importer/blob/master/sql-importer-lib/src/main/java/com/couchbase/util/SqlImporter.java#L212">ImportTable(String table)</a> Java method.</p>

<p>One interesting point is that you can use and extend the code to deal with your application.</p>

<h3>Conclusion</h3>

<p>I have created this tool quickly to help some people in the community, if you are using it and need new features, let me know, using comment or pull request.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Create a Couchbase Cluster in Less Than a Minute With Ansible]]></title>
    <link href="http://tgrall.github.io/blog/2013/05/31/create-a-couchbase-cluster-in-less-than-a-minute-with-ansible/"/>
    <updated>2013-05-31T14:07:00+02:00</updated>
    <id>http://tgrall.github.io/blog/2013/05/31/create-a-couchbase-cluster-in-less-than-a-minute-with-ansible</id>
    <content type="html"><![CDATA[<p><strong>TL;DR:</strong> Look at the Couchbase Ansible Playbook on my <a href="https://github.com/tgrall/couchbase-ansible-playbook">Github</a>.</p>

<h3>Introduction</h3>

<p>When I was looking for a more effective way to create my cluster I asked some sysadmins which tools I should use to do it. The answer I got during <a href="http://www.netways.de/osdc">OSDC</a> was not <a href="https://puppetlabs.com/">Puppet</a>, nor <a href="http://www.opscode.com/chef/">Chef</a>, but was <a href="http://ansible.cc/">Ansible</a>.</p>

<p>This article shows you how you can easily configure and create a Couchbase cluster deployed and many linux boxes&hellip;and the only thing you need on these boxes is an SSH Server!</p>

<p>Thanks to <a href="http://jpmens.net/">Jan-Piet Mens</a> that was one of the person that convinced me to use Ansible and answered questions I had about Ansible.</p>

<p>You can watch the demonstration below, and/or look at all the details in the next paragraph.</p>

<iframe width="560" height="420" src="http://www.youtube.com/embed/COb6y89xcYY?color=white&theme=light"></iframe>


<h3>Ansible</h3>

<h4>Ansible is an open-source software that allows administrator to configure and manage many computers over SSH.</h4>

<p>I won&rsquo;t go in all the details about the installation, just follow the steps documented in the <a href="http://ansible.cc/docs/gettingstarted.html">Getting Started Guide</a>. As you can see from this guide, you just need Python and few other libraries and clone Ansible project from Github. So I am expecting that you have Ansible working with your various servers on which you want to deploy Couchbase.</p>

<p>Also for this first scripts I am using <strong>root</strong> on my server to do all the operations. So be sure you have register the root ssh keys to your administration server, from where you are running the Ansible scripts.</p>

<h3>Create a Couchbase Cluster</h3>

<p>So before going into the details of the Ansible script it is interesting to explain how you create a Couchbase Cluster. So here are the 5 steps to create and configure a cluster:</p>

<ol>
<li>Install Couchbase on each nodes of the cluster, as documented <a href="http://www.couchbase.com/docs/couchbase-manual-2.0/couchbase-getting-started-install-ubuntu.html">here</a>.</li>
<li>Take one of the node and &ldquo;initialize&rdquo; the cluster,  using <a href="http://www.couchbase.com/docs/couchbase-manual-2.0/couchbase-cli-other-examples.html">cluster-init command</a>.</li>
<li>Add the other nodes to the cluster, using <a href="http://www.couchbase.com/docs/couchbase-manual-2.0/couchbase-cli-other-examples.html">server-add command</a>.</li>
<li>Rebalance, using <a href="http://www.couchbase.com/docs/couchbase-manual-2.0/couchbase-cli-other-examples.html">rebalance command</a>.</li>
<li>Create a Bucket, using <a href="http://www.couchbase.com/docs/couchbase-manual-2.0/couchbase-cli-other-examples.html">bucket-create command</a>.</li>
</ol>


<p>So the goal now is to create an Ansible Playbook that does these steps for you.</p>

<h4>Ansible Playbook for Couchbase</h4>

<p>The first think you need is to have the list of hosts you want to target, so I have create a <a href="https://github.com/tgrall/couchbase-ansible-playbook/blob/master/hosts">hosts file</a> that contains all my server organized in 2 groups:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[couchbase-main]
</span><span class='line'>vm1.grallandco.com
</span><span class='line'>
</span><span class='line'>[couchbase-nodes]
</span><span class='line'>vm2.grallandco.com
</span><span class='line'>vm3.grallandco.com</span></code></pre></td></tr></table></div></figure>


<p>The group [couchbase-main] group is just one of the node that will drive the installation and configuration, as you probably already know, Couchbase does not have any master&hellip; All nodes in the cluster are identical.</p>

<p>To ease the configuration of the cluster, I have create another file that contains all parameters that must be sent to all the various commands. This file is located in the <a href="https://github.com/tgrall/couchbase-ansible-playbook/blob/master/group_vars/all">group_vars/all</a> see the section <a href="http://ansible.cc/docs/patterns.html#splitting-out-host-and-group-specific-data">Splitting Out Host and Group Specific Data</a> in the documentation.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># Adminisrator user and password
</span><span class='line'>admin_user: Administrator
</span><span class='line'>admin_password: password
</span><span class='line'>
</span><span class='line'># ram quota for the cluster
</span><span class='line'>cluster_ram_quota: 1024
</span><span class='line'>
</span><span class='line'># bucket and replicas
</span><span class='line'>bucket_name: ansible
</span><span class='line'>bucket_ram_quota: 512
</span><span class='line'>num_replicas: 2</span></code></pre></td></tr></table></div></figure>


<p>Use this file to configure your cluster.</p>

<p>Let&rsquo;s describe the <a href="https://github.com/tgrall/couchbase-ansible-playbook/blob/master/couchbase.yml">playbook file</a> :</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>- name: Couchbase Installation
</span><span class='line'>hosts: all
</span><span class='line'>user: root
</span><span class='line'>
</span><span class='line'>tasks:
</span><span class='line'>
</span><span class='line'>- name: download Couchbase package
</span><span class='line'>get_url: url=http://packages.couchbase.com/releases/2.0.1/couchbase-server-enterprise_x86_64_2.0.1.deb dest=~/.
</span><span class='line'>
</span><span class='line'>- name: Install dependencies
</span><span class='line'>apt: pkg=libssl0.9.8 state=present
</span><span class='line'>
</span><span class='line'>- name: Install Couchbase .deb file on all machines
</span><span class='line'>shell: dpkg -i ~/couchbase-server-enterprise_x86_64_2.0.1.deb</span></code></pre></td></tr></table></div></figure>


<p>As expected, the installation has to be done on <strong>all</strong> servers as <strong>root</strong> then we need to execute 3 tasks:</p>

<ol>
<li>Download the product, the get_url command will only download the file if not already present</li>
<li>Install the dependencies with the apt command, the state=present allows the system to only install this package if not already present</li>
<li>Install Couchbase with a simple shell command. (here I am not checking if Couchbase is already installed)</li>
</ol>


<p>So we have now installed Couchbase on all the nodes. Let&rsquo;s now configure the first node and add the others:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>- name: Initialize the cluster and add the nodes to the cluster
</span><span class='line'>hosts: couchbase-main
</span><span class='line'>user: root
</span><span class='line'>
</span><span class='line'>tasks:
</span><span class='line'>- name: Configure main node
</span><span class='line'>shell: /opt/couchbase/bin/couchbase-cli cluster-init -c 127.0.0.1:8091  --cluster-init-username=${admin_user} --cluster-init-password=${admin_password} --cluster-init-port=8091 --cluster-init-ramsize=${cluster_ram_quota}
</span><span class='line'>
</span><span class='line'>- name: Create shell script for configuring main node
</span><span class='line'>action: template src=couchbase-add-node.j2 dest=/tmp/addnodes.sh mode=750
</span><span class='line'>
</span><span class='line'>- name: Launch config script
</span><span class='line'>action: shell /tmp/addnodes.sh
</span><span class='line'>
</span><span class='line'>- name: Rebalance the cluster
</span><span class='line'>shell: /opt/couchbase/bin/couchbase-cli rebalance -c 127.0.0.1:8091 -u ${admin_user} -p ${admin_password}
</span><span class='line'>
</span><span class='line'>- name: create bucket ${bucket_name} with ${num_replicas} replicas
</span><span class='line'>shell: /opt/couchbase/bin/couchbase-cli bucket-create -c 127.0.0.1:8091 --bucket=${bucket_name} --bucket-type=couchbase --bucket-port=11211 --bucket-ramsize=${bucket_ram_quota}  --bucket-replica=${num_replicas} -u ${admin_user} -p ${admin_password}</span></code></pre></td></tr></table></div></figure>


<p>Now we need to execute specific taks on the &ldquo;main&rdquo; server:</p>

<ul>
<li>Initialization of the cluster using the Couchbase CLI, on line 06 and 07</li>
</ul>


<p>Then the system needs to ask all other server to join the cluster. For this the system needs to get the various IP and for each IP address execute the add-server command with the IP address. As far as I know it is not possible to get the IP address from the main playbook YAML file, so I ask the system to generate a shell script to add each node and execute the script.</p>

<p>This is done from the line 09 to 13.</p>

<p>To generate the shell script, I use <a href="http://ansible.cc/docs/modules.html#template">Ansible Template</a>, the template is available in the <a href="https://github.com/tgrall/couchbase-ansible-playbook/blob/master/couchbase-add-node.j2">couchbase-add-node.j2</a> file.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'></span></code></pre></td></tr></table></div></figure>


<p>As you can see this script loop on each server in the [couchbase-nodes] group and use its IP address to add the node to the cluster.</p>

<p>Finally the script rebalance the cluster (line 16) and add a new bucket (line 19).</p>

<p>You are now ready to execute the playbook using the following command :</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>./bin/ansible-playbook -i ./couchbase/hosts ./couchbase/couchbase.yml -vv</span></code></pre></td></tr></table></div></figure>


<p>I am adding the -vv parameter to allow you to see more information about what&rsquo;s happening during the execution of the script.</p>

<p>This will execute all the commands described in the playbook, and after few seconds you will have a new cluster ready to be used! You can for example open a browser and go to the Couchase Administration Console and check that your cluster is configured as expected.</p>

<p> <img src="http://1.bp.blogspot.com/-L-3yeJZECwY/Uaj_PA_aVUI/AAAAAAAAAcg/fKBZ47Nhd4M/s320/Screen+Shot+2013-05-31+at+9.50.44+PM.png"></p>

<p>As you can see it is really easy and fast to create a new cluster using Ansible.</p>

<p>I have also create a script to uninstall properly the cluster.. just launch</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>./bin/ansible-playbook -i ./couchbase/hosts ./couchbase/couchbase-uninstall.yml</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Six Months as Technical Evangelist at Couchbase]]></title>
    <link href="http://tgrall.github.io/blog/2013/05/28/six-months-as-technical-evangelist-at-couchbase/"/>
    <updated>2013-05-28T08:36:07+02:00</updated>
    <id>http://tgrall.github.io/blog/2013/05/28/six-months-as-technical-evangelist-at-couchbase</id>
    <content type="html"><![CDATA[<p>Already 6 months! Already 6 months that I have joined Couchbase as Technical Evangelist. This is a good opportunity to take some time to look back.</p>

<p>So first of all what is a Developer/Technical Evangelist?</p>

<p>Hmm it depends of each company/product, but let me tell you what it is for me, inside Couchbase. This is one of the most exciting job I ever had. And I think it is the best job you can have when you are passionate about technology, and you like to share this passion with others. So my role as Technical Evangelist is to help the developers to adopt NoSQL technologies in general, and as you can guess Couchbase in particular.</p>

<p>Let&rsquo;s now see in more details what I have done during these past six months and why I am so happy about it. I have organized the different activities in three types:</p>

<ul>
<li>Outbound activities : meet the developers</li>
<li>Online activities : reach even more developers</li>
<li>Inbound Activities : make the product better !</li>
</ul>


<h3>Outbound activities : meet the developers !</h3>

<p>A large part of my activities for this first semester was made of conferences and meetups. All these events are great opportunities for me to talk about NoSQL and get more people to use Couchbase Server 2.0, here a short list of what I have done:</p>

<ul>
<li>participated to many Couchbase Developer Days in various cities (Portland, Seattle, Vancouver, Oslo, Copenhagen, Stockholm, Munich, Amsterdam, Barcelona, Paris, &hellip;), these are one day workshops where I am helping developers to get their hands dirty on Couchbase</li>
<li>participated to Couchconf Berlin and Couchbase [UK] our main European events where I met many Customer and key members of the community</li>
<li>submitted talks to conferences and adapt them to the conference, then spoken in various conferences about NoSQL and Couchbase (<a href="http://33degree.org/">33Degree Warsaw,</a>  <a href="http://www.johnbryce.co.il/events/nosql-big-data">NoSQL &amp; Big Data Israel</a>, <a href="http://devoxx.fr/">Devoxx France</a>, <a href="http://nosql-matters.org/">NoSQL Matters</a>, and many others).</li>
<li>met many developers during user groups and meetups. I have to say that I have been very active there, and quite happy to see that NoSQL is a very hot topic for developers, and this in all languages.</li>
<li>delivered <a href="http://en.wikipedia.org/wiki/Brown_bag_seminar">BrowBagLunch</a>es to various technical teams in companies.</li>
</ul>


<p>Yes! Be a Technical Evangelist means, at least for me, be on the road. It is very nice to meet developers from various countries, different cultures, languages, and… this also means tasting many different types of food!</p>

<p>Another interesting thing when you work on a database/infrastructure layer is the fact that it is <em>technology agnostic</em>; you can access Couchbase with multiple programming languages: Java, .Net,Javascript/Node, Ruby, PHP, Python, C, … and even Go. So with this job I met developers with different backgrounds and views about application development. So yes when I am at a conference or meetup, I am suppose to &ldquo;teach&rdquo; something to people, but I have also learned a lot of things, and still doing it.</p>

<h3>Online activities : reach even more developers!</h3>

<p>Meeting developers during conferences is great but it, it is also very important to produce content to reach even more people, so I have :</p>

<ul>
<li>written blog post about Couchbase usage, most of them based on feedback/questions from the community</li>
<li>created sample code to show how it works</li>
<li>monitored and answered questions on various sites and mailing lists, from Couchbase discussion forums, mailing lists, Stack Overflow, Quora and others&hellip;</li>
</ul>


<p>This task is quite interesting because it is the moment where you can reach many developers and also get feedback from users, and understand how they are using the product. I have to say that I was not as productive as I was expected, mainly because I was traveling a lot during this period.</p>

<p>Another important thing about online activities, is the &ldquo;Couchbase Community&rdquo; itself, many users of Couchbase are creating content : blog posts, samples, new applications, or features - for example I am talking with a person that is developing a <a href="http://blog.rikulo.org/posts/2013/May/General/couchclient/">Dart Client for Couchbase</a>, so as Technical Evangelist I am also working closely with the most active contributor.</p>

<h3>Inbound Activities : make the product better !</h3>

<p>So the ultimate goal of a Technical Evangelist at Couchbase is to &ldquo;convert&rdquo; developers to NoSQL/Couchbase and get them to talk about Couchbase. Meeting them online or during events is a way of achieving this; but it is also great to do it directly <em>with</em> the product. This means participating to the &ldquo;development&rdquo; of the product or its ecosystem. Here some of the things that I have done on this topic:</p>

<ul>
<li>talked a lot with the development team, core developers, product managers, architects, … Quite exciting to work with so much smart people and have access to them. During this discussions I was able to comment the roadmap, influence features, but also it is all the time an opportunity to learn new things about Couchbase - and many other things around architecture, programming languages, take a look for example to <a href="http://damienkatz.net/2013/01/the_unreasonable_effectiveness_of_c.html">this nice post from Damien Katz</a> .</li>
<li>contributed some code, yes remember Couchbase is an open source project and it is quite easy to participate to the development. Obviously based on my skills I have only help a little bit with the Java and the Javascript SDK. So if like me you are interested to contribute to the project, take a look to this page: &ldquo;<a href="http://www.couchbase.com/wiki/display/couchbase/Contributing+Changes">Contributing Changes</a>&rdquo;</li>
<li>but the biggest contributions to the products are such like doc reviews, testing and writing bug reports, and this is very important and interesting, since once again it helps a lot with the product adoption by the developers.</li>
</ul>


<h3>So what?</h3>

<p>As you can see the Technical Evangelist job is a quite exciting job, and one of the reason I really love it, it is simply because it allows me to do many different things, that are all related to the technology. Six months is still a very short period, I still have many things to learn and to with the team to be successful, such as be more present online (blog, sample code, technical article, screencast, ..), be accepted in more conferences, and code a little more (I have to finish for example the Couchbase Data Provider for Hibernate OGM, and many other ideas around application development experience)</p>

<p>Finally, Couchbase needs you ! This is a good opportunity to say that Couchbase is always looking for talents, especially in the Technical/Developer Evangelist team, so do not hesitate to look at <a href="http://www.couchbase.com/careers">the different job openings</a> and join the team !</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Screencast : Fun With Couchbase MapReduce and Twitter]]></title>
    <link href="http://tgrall.github.io/blog/2013/04/29/screencast-fun-with-couchbase-mapreduce-and-twitter/"/>
    <updated>2013-04-29T09:51:36+02:00</updated>
    <id>http://tgrall.github.io/blog/2013/04/29/screencast-fun-with-couchbase-mapreduce-and-twitter</id>
    <content type="html"><![CDATA[<p>I have created this simple screencast to show how you can, using Couchbase do some realtime analysis based on Twitter feed.</p>

<p>The key steps of this demonstration are</p>

<ol>
<li>Inject Tweets using a simple program available on my Github <a href="https://github.com/tgrall/couchbase-twitter-injector">Couchbase-Twitter-Injector</a></li>
<li>Create views to index and query the Tweets by

<ul>
<li>User name</li>
<li>Tags</li>
<li>Date</li>
</ul>
</li>
</ol>


<p>The views that I used in this demonstration are available at the bottom of this post.</p>

<iframe width="560" height="420" src="http://www.youtube.com/embed/X167R0TV5QE?color=white&theme=light"></iframe>


<p>Views:</p>

<div><script src='https://gist.github.com/1df10b10c9dd387995cb.js'></script>
<noscript><pre><code>function (doc, meta) {
  if (doc.created_at) {
   emit( dateToArray(doc.created_at));
  }
}</code></pre></noscript></div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Easy Application Development With Couchbase, Angular and Node]]></title>
    <link href="http://tgrall.github.io/blog/2013/03/06/easy-application-development-with-couchbase-angular-and-node/"/>
    <updated>2013-03-06T02:35:47+01:00</updated>
    <id>http://tgrall.github.io/blog/2013/03/06/easy-application-development-with-couchbase-angular-and-node</id>
    <content type="html"><![CDATA[<blockquote><p>Note : This article has been written in March 2013, since Couchbase and its drivers have a changed a lot. I am not working with/for Couchbase anymore, with no time to update the code.</p></blockquote>

<p>A friend of mine wants to build a simple system to capture ideas, and votes. Even if you can find many online services to do that, I think it is a good opportunity to show how easy it is to develop new application using a Couchbase and Node.js.</p>

<p>So how to start?</p>

<p>Some of us will start with the UI, other with the data, in this example I am starting with the model. The basics steps are :</p>

<ol>
<li>Model your documents</li>
<li>Create Views</li>
<li>Create Services</li>
<li>Create the UI</li>
<li>Improve your application by iteration</li>
</ol>


<p>The sources of this sample application are available in Gihub :</p>

<p><a href="https://github.com/tgrall/couchbase-node-ideas">https://github.com/tgrall/couchbase-node-ideas</a></p>

<p>Use the following command to clone the project locally :</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git clone https://github.com/tgrall/couchbase-node-ideas.git</span></code></pre></td></tr></table></div></figure>


<p><em>Note:</em> my goal is not to provide a complete application, but to describe the key steps to develop an application.</p>

<!--more-->


<h3>Model your documents</h3>

<p>For this application you need 3 types of document :</p>

<ul>
<li>Ideas : describes the idea with a author, title and description</li>
<li>Vote : the author and a comment - note that it is a choice to not put a value for the vote, in this first version if the vote exists this means user like the idea.</li>
<li>User : contains all the information about the user (not used in this first version of the application)</li>
</ul>


<p>You can argue that it is possible to put the votes as a list of element inside the idea document. In this case I prefer to use different document and reference the idea in the vote since we do not know how many votes/comments will have. Using different documents is also interesting in this case for the following reasons :</p>

<ul>
<li>No &ldquo;concurrent&rdquo; access, when a user wants to vote he does not change the idea document itself, so no need to put an optimistic locking in place.</li>
<li>The size of the document will be smaller and easier to cache in memory.</li>
</ul>


<p>So documents will look like:</p>

<div><script src='https://gist.github.com/79f57b13e7a637c7e62e.js'></script>
<noscript><pre><code>{
  &quot;type&quot; : &quot;idea&quot;,
  &quot;id&quot; : &quot;idea:4324&quot;,
  &quot;title&quot; : &quot;Free beer during bug hunt&quot;,
  &quot;description&quot; : &quot;It will be great to have free beer during our test campaign!&quot;,
  &quot;user_id&quot; : &quot;user:234&quot;
}</code></pre></noscript></div>


<p>What I really like is the fact that I can quickly create a small dataset to validate that it is correct and help me to design the view. The way I do it, I start my server, launch the Couchbase Administration Console, create a bucket, and finally insert document manually and validate the model and views.</p>

<h3>Create Views</h3>

<p>Now that I have created some documents, I can think about the way I want to get the information out of the database. For this application I need:</p>

<ul>
<li>The list of ideas</li>
<li>The votes by ideas</li>
</ul>


<p>The list of idea for this first version is very simple, we just need to emit the title:</p>

<div><script src='https://gist.github.com/989a5450811dec8f305e.js'></script>
<noscript><pre><code>function (doc, meta) {
  if (doc.type == &quot;idea&quot;) {
    emit(doc.title);
  }
}</code></pre></noscript></div>


<p>For the votes by ideas, I choose to create a collated view, this will give me some interesting options when I will expose them into an API/View layer. I am also for this view using <code>sum()</code> reduce function to be sure I capture the number of votes.</p>

<div><script src='https://gist.github.com/5fe945cbc12cc59e9dbd.js'></script>
<noscript><pre><code>function (doc, meta) {
  switch (doc.type){
    case &quot;idea&quot; :
      emit([meta.id,0, doc.title],0);
      break;
    case &quot;vote&quot; :
      emit([doc.idea_id,1],1);
      break;
  }  
}</code></pre></noscript></div>


<p>I have my documents, I have some views that allow me to retrieve the list of ideas, the number of vote by idea and count the vote&hellip; So I am ready to expose all these informations to the application using a simple API layer.</p>

<h3>Create Services</h3>

<p>Lately I have been playing a lot with Node.js, just because it is nice to learn new stuff and also because it is really easy to use with Couchbase. Think about it Couchbase loves JSON, and Node.js object format is JSON, this means I do not have any marshaling/unmarshaling to do.</p>

<p>My API layer is quite simple, I just need to create a set of REST endpoint to deal with:</p>

<ul>
<li>CRUD operation on each type of document</li>
<li>List the different Documents</li>
</ul>


<p>The code of the services is available in branch <a href="https://github.com/tgrall/couchbase-node-ideas/tree/01-simple-services">01-simple-services</a>:</p>

<p>You can run the application &nbsp;with simple services using the following command:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; git checkout -f 01-simple-services
</span><span class='line'>&gt; node app.js</span></code></pre></td></tr></table></div></figure>


<p>and go to you browser using the <a href="http://127.0.0.1:3000">http://127.0.0.1:3000</a></p>

<p><em>About the project</em></p>

<p>For this project I am using only 2 node modules <a href="http://expressjs.com/">Express</a> and <a href="https://github.com/couchbase/couchnode">Couchbase</a>. The package.json file looks like :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;couchbase-ideas-management&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;version&quot;</span><span class="p">:</span> <span class="s2">&quot;0.0.1&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;private&quot;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;dependencies&quot;</span><span class="p">:</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;express&quot;</span><span class="p">:</span> <span class="s2">&quot;3.x&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;couchbase&quot;</span><span class="p">:</span> <span class="s2">&quot;0.0.11&quot;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>After running the install, let&rsquo;s code the new API interface, as said before I am using an iterative approach so for now I am not dealing with the security, I just want to get the basic actions to work.</p>

<p>I am starting with the endpoints to get and set the documents. I am creating a generic endpoints that take the type as URI parameter allowing user/application to do a get/post on <code>/api/vote</code>, <code>/api/idea</code>. The following code captures this:</p>

<div><script src='https://gist.github.com/42f0b936a55fd2dcefac.js'></script>
<noscript><pre><code> // get document
 app.get(&#39;/api/:type/:id&#39;, function(req, res) {
    if (type == &#39;idea&#39; || type == &#39;vote&#39; || type == &#39;user&#39;) {
        get(req, res, type);
    } else {
        res.send(400);
    }
});

// create new document
app.post(&#39;/api/:type&#39;, function(req, res) {
    if (type == &#39;idea&#39; || type == &#39;vote&#39; || type == &#39;user&#39;) {
        upsert(req, res, type);
    } else {
        res.send(400);
    }
});
</code></pre></noscript></div>


<p>In each case I start to test if the URI is one of the supported types (idea, vote, user) and if this is the case I call the <code>get()</code> or <code>upsert()</code> method that will do the call to Couchbase.</p>

<p>The <code>get()</code> and <code>upsert()</code> methods are using more or less the same approach. I test if the document exists, if the type is correct and do the operation to Couchbase. Let&rsquo;s focus on the <code>upsert()`` method. I call it</code>upsert()` since the same operation is used to create and update the document.</p>

<div><script src='https://gist.github.com/91858dcad51affdf3521.js'></script>
<noscript><pre><code>function upsert(req, res, docType) {
    // check if the body contains a know type, if not error
    if (req.body != null &amp;&amp; req.body.type == docType) {
        var id = req.body.id;
        if (id == null) {
            // increment the sequence and save the doc
            cb.incr(&quot;counter:&quot;+req.body.type, function(err, value, meta) {
                id = req.body.type + &quot;:&quot; + value;
                req.body.id = id;
                cb.add(id, req.body, function(err, meta) {
                    res.send(200);
                });
            });
        } else {
            cb.replace(id, req.body, function(err, meta) {
                res.send(200);
            });
        }
    } else {
        res.send(403);
    }
}</code></pre></noscript></div>


<p>In this function I start by testing if the document contains a type and if the type is the one expected (line 3).</p>

<p>Then I check if the document id is present, to see if I need to create it or not. This is one of the reason why I like to keep the id/key in the document, yes I duplicate it, but it makes the development really easy. So if I have to create a new document I have to generate a new id. I chose to create a counter for each type. this is why I call the incr function (line 7) and then use the returned value to create the document (line 10).</p>

<p><em>Note:</em> as you can see, my documents contain the an ID as part of the attributes. This ID is the same value that the one used to set the document (the &ldquo;key&rdquo;). It is not necessary a good practice to duplicate this information, and in many case the application only use the document key itself. I personally like to put the ID in the document itself too, because it simplifies a lot the development.</p>

<p>If the ID is present, I just call the update operation to save the document. (line 15)</p>

<p>The delete operation is equivalent to the get, using the delete HTTP operation.</p>

<p>So now I can get, insert and update the documents. I still need to do some work to deal with the lists. As you can guess, here I need to call the views. I won&rsquo;t go in the detail of the simple list of ideas. Let&rsquo;s focus on the view that shows the result of the votes.</p>

<div><script src='https://gist.github.com/6468058737ff53553ae1.js'></script>
<noscript><pre><code>app.get(&#39;/api/results/:id?&#39;, function(req, res) {
    var queryParams = {
        stale: false,
        group_level : 3
    };
    if (req.params.id != null) {
        queryParams.startkey = [req.params.id,0];
        queryParams.endkey = [req.params.id,2];
    }
 
    cb.view(&quot;ideas&quot;, &quot;votes_by_idea&quot;, queryParams, function(err, view) {
        var result = new Array();
        var idx = -1;
        var currentKey = null;
        for (var i = 0; i &lt; view.length; i++) {
            key = view[i].key[0];
            if (currentKey == null || currentKey != key ) {
                idx = idx +1;
                currentKey = key;
                result[idx] = { id : key, title : view[i].key[2], value : 0 };
            } else {
                result[idx].value = view[i].value;
            }
        }
        res.send(result);
    });     
});</code></pre></noscript></div>


<p>For this part of the application I use a small trick to use the collated view. The <code>/api/results/</code> call returns the list of ideas with their title and the total number of votes. The result looks like the following:</p>

<div><script src='https://gist.github.com/6cfdedf1410ca99744bd.js'></script>
<noscript><pre><code>[
    {
        &quot;id&quot;: &quot;idea:0&quot;,
        &quot;title&quot;: &quot;Add new electric company cars&quot;,
        &quot;value&quot;: 0
    },
    {
        &quot;id&quot;: &quot;idea:1&quot;,
        &quot;title&quot;: &quot;Develop new blog on Jekyll&quot;,
        &quot;value&quot;: 3
    },
    {
        &quot;id&quot;: &quot;idea:2&quot;,
        &quot;title&quot;: &quot;Bring your own device project&quot;,
        &quot;value&quot;: 1
    },
    {
        &quot;id&quot;: &quot;idea:3&quot;,
        &quot;title&quot;: &quot;Test the new Rasperry Pi&quot;,
        &quot;value&quot;: 1
    }
]</code></pre></noscript></div>


<p>Note that it is also possible to select only one idea , you just need to pass the id to the call for example.</p>

<p>If you look in more detail the function, not only I call the view, but I build an array in which I put the idea id, label, then on the next loop, I add the number of vote. This is possible because the view is a collated view of the ideas and its votes.</p>

<p>I have now my REST Services, including advanced query capabilities. It is time now to use these services and build the user interface.</p>

<h3>Create the UI</h3>

<p>For the view I am using AngularJS, that I am packaging in the same node.js application for simplicity reason</p>

<h4>Simple UI without Login/Security</h4>

<p>The code of the application without login is available branch in <a href="https://github.com/tgrall/couchbase-node-ideas/tree/02-simple-ui-no-login">02-simple-ui-no-login</a></p>

<p>You can run the application &nbsp;with simple services using the following command:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="err">&gt;</span> <span class="err">git</span> <span class="err">checkout</span> <span class="err">-f</span> <span class="mi">02</span><span class="err">-simple-ui-no-login</span>
</span><span class='line'><span class="err">&gt;</span> <span class="err">node</span> <span class="err">app.js</span>
</span></code></pre></td></tr></table></div></figure>


<p>The application is based on AngularJS and Twitter Boostrap.</p>

<p>I am using basic feature and packaging for Angular :</p>

<ul>
<li><code>/public/js/app.js</code> contains the module declaration and all the routes to the different views/controllers</li>
<li><code>/public/js/controllers.js</code> contains all the controller. I will show some of them but basically this is where that I call the services that I have created above.</li>
<li><code>/views/partials/</code> contains the different pages/screens used by the application.</li>
</ul>


<p>Because the application is quite simple I have not done any packaging of directive, or other functions. This is true at for AngularJS and Node.js parts.</p>

<p><em>Dummy user management</em></p>

<p>In this first version of the UI I have not yet integrated any login/security, so I fake the user login using a global scope variable that <code>$scope.user</code> that you can see in the controller <code>AppCtrl()</code>. Since I have not yet implemented the login/security, I have added at the bottom of the page a textfield where you can enter a &ldquo;dummy&rdquo; username to test the application. This field is inserted in the <code>/views/index.html</code> page.</p>

<p><em>List Views and Number of Votes</em></p>

<p>The home page of the application contains the list of ideas and number of votes.</p>

<p><img src="http://2.bp.blogspot.com/-tniNkr_Pl0Q/USidTLKHw1I/AAAAAAAAAbQ/BWtfTaAWG1w/s320/ideas-home-page.png"></p>

<p>Look at the EntriesListCtrl controller and the <code>view/index.html</code> file. As you can guess this is based on the Couchbase collated view that return the list of ideas and number of vote.</p>

<p><em>Create/Edit an idea</em></p>

<p>When the user click on the New link in the navigation, the application call the view <code>/view/partials/idea-form.html</code>. &nbsp;This form is called using the &ldquo;/#/idea/new&rdquo; URL.</p>

<p>Just look at the <code>IdeaFormCtrl</code> controller to see what is happening :</p>

<p>Error processing input, expected syntax: {% img [class name(s)] [http[s]:/]/path/to/image [width [height]] [title text | &ldquo;title text&rdquo; [&ldquo;alt text&rdquo;]] %}</p>

<p>First of all I test if the controller is called with a idea identifier in the URL ( <code>$routeParams.id</code> - line 3) . If the ID is present, I call the REST API to get the idea and set it into the <code>$scope.idea</code> variable.</p>

<p>Then on line 9, you can see the <code>$scope.save()</code> function that calls the REST API to save/update the idea to Couchbase. I use the line 10 and 11 to set the user and the type of data to the idea.</p>

<p><em>Note:</em> It is interesting to look at these lines, by adding the two attributes (user &amp; type) I modify the &ldquo;schema&rdquo; of my data. I am adding new fields to my document that will be stored as it is in Couchbase. Once again, you see here that I drive the data type from my application. I could take another approach and force the type in the service layer. For this example I chose to put that in the application layer, that is supposed to send the proper data types.</p>

<p><em>Other Interactions</em></p>

<p>The same approach is used to create a vote associated to a user/idea as you can see in the <code>VoteFormCtrl</code>  controller.</p>

<p>I won&rsquo;t go in all the details of all operations, I am just inviting you to look at the code of the application, and feel free to add comment to this blog post if I need to clarify other part of the application.</p>

<h4>Iterative Development : adding a value to the vote!</h4>

<p>The code of the services is available in branch 01-simple-services:</p>

<p>You can run the application with simple services using the following command:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="err">&gt;</span> <span class="err">git</span> <span class="err">checkout</span> <span class="err">-f</span> <span class="mi">03</span><span class="err">-vote-with-value</span>
</span><span class='line'><span class="err">&gt;</span> <span class="err">node</span> <span class="err">app.js</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>Adding the field in the form</em></p>

<p>Something that I really like about working with AngularJS, Node and Couchbase is the fact that the developer uses JSON from the database to the browser.</p>

<p>So let&rsquo;s implement a new feature, where instead of having only a comment the user can give a rate to its vote from 1 to 5. Doing that is quite easy, here are the steps:</p>

<ul>
<li>Modify the UI : adding a new field</li>
<li>Modify the Couchabe View to use the new field</li>
</ul>


<p>This is it! AngularJS deals with the binding of the new field, so I just need to edit the <code>/views/partials/idea-form.html</code> to add this. For this I need to add the list of values in the controller and expose it into a select box in form.</p>

<p>The list of value located in the <code>$scope.ratings</code> variable :</p>

<div><script src='https://gist.github.com/fe7c8625a6f54dfd2425.js'></script>
<noscript><pre><code>  $scope.ratings = [
  {
    &quot;id&quot;: &quot;0&quot;,
    &quot;label&quot;: &quot;0 - No Interest&quot;,
    },
    {
        &quot;id&quot;: &quot;1&quot;,
        &quot;label&quot;: &quot;1 - Low Interest&quot;,
    },
    {
        &quot;id&quot;: &quot;2&quot;,
        &quot;label&quot;: &quot;2 - Medium&quot;,
    },
    {
        &quot;id&quot;: &quot;3&quot;,
        &quot;label&quot;: &quot;3 - Good&quot;,
    },
    {
        &quot;id&quot;: &quot;4&quot;,
        &quot;label&quot;: &quot;4 - Outstanding&quot;,
    }, 
    {
        &quot;id&quot;: &quot;5&quot;,
        &quot;label&quot;: &quot;5 - Must be done. Now!&quot;,
    }];</code></pre></noscript></div>


<p>Once this is done you can add a select box into your view using the following code :</p>

<div><script src='https://gist.github.com/d4115c3dbdd5a25614d9.js'></script>
<noscript><pre><code>&lt;div class=&quot;control-group&quot;&gt;  
    &lt;label class=&quot;control-label&quot; &gt;Rate&lt;/label&gt;  
    &lt;div class=&quot;controls&quot;&gt;  
            &lt;select required ng-model=&quot;vote.rating&quot; ng-options=&quot;value.id as value.label group by value.group for value in ratings&quot;&gt;
            &lt;/select&gt;
    &lt;/div&gt;
&lt;/div&gt;</code></pre></noscript></div>


<p>To add the select box into the form, I just use AngularJS features:</p>

<ul>
<li>the list of value described in my controller using the <code>ng-options</code> attribute</li>
<li>the binding to the vote.rating field object using <code>ng-model</code> attribute.</li>
</ul>


<p>I am adding the field in my form, I bind this field to my Javascript object; and&hellip; nothing else! Since my REST API is just consuming the JSON object as it is, AngularJS will send the vote object with the new attribute.</p>

<p><em>Update the view to use the rating</em></p>

<p>Now that my database is dealing with a new attribute in the vote, I need to update my view to use this in the sum function. (I could calculate an average too, but here I want the sum of all the vote/ratings).</p>

<div><script src='https://gist.github.com/c2fb3f9a3127df75e454.js'></script>
<noscript><pre><code>function (doc, meta) {
  switch (doc.type){
    case &quot;idea&quot; :
      emit([meta.id,0, doc.title],0);
      break;
    case &quot;vote&quot; :
      emit([doc.idea_id,1], (doc.rating)?doc.rating:2 );
      break;
  }  
}</code></pre></noscript></div>


<p>The only line that I have changed is the line number 7. The logic is simple, if the rating is present I emit it, if not I emit a 2, that is a medium rating for an idea.</p>

<p>This is a small tip that allow me to have a working view/system without having to update all the existing document if I have some.</p>

<p>I&rsquo;ll stop here for now, and will add new feature later such as User Authentication and User Management using for example <a href="http://passportjs.org/">Passport</a>.</p>

<h3>Version and Upgrade Management</h3>

<p>If you looked closely to the code of the application the views are automatically imported from the app.js file when the application is starting.</p>

<p>In fact I have added a small function that check the current version installed and update the views with the correct version when needed.</p>

<p>You can look at the function <a href="https://github.com/tgrall/couchbase-node-ideas/blob/03-vote-with-value/app.js#L21"><code>initApplication()</code></a> :</p>

<ul>
<li>Load the version number from Couchbase (document with ID &ldquo;<code>app.version</code>&rdquo;)</li>
<li>Check the version of if this is different</li>
<li>Update/Create the view (I am doing it in production mode here, in real application it will be better to use dev mode - just prefix the design document ID with <code>"dev_"</code> )</li>
<li>Once the view is created update/create the <code>"app.version"</code> document with the new ID.</li>
</ul>


<h3>Conclusion</h3>

<p>In this article we have seen how you can quickly develop your application/prototype and leverage the flexibility of NoSQL for developers. The steps to do this are:</p>

<ol>
<li>Design your document model and API (REST)</li>
<li>Create the UI that consumes the API</li>
<li>Modify your model by simply adding field into the UI</li>
<li>Update the view to adapt your lists to your new model</li>
</ol>


<p>In addition to this, I have also quickly explain how you can from your code control the version of your application and deploy new views (and other things) automatically.</p>

<p>I will post another blog post in few days to explain how you can easily integrate user management, security to your application and database easily</p>
]]></content>
  </entry>
  
</feed>
